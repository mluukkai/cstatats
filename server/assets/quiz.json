{
  "courses": [
    {
      "id": 1,
      "name": "ohtu2019",
      "parts": {
        "1": {
          "open": "27.10.2019",
          "close": "3.11.2019",
          "desc": "<p>Nämä tehtävät liittyvät kurssin ensimmäisen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa1/'>osa1</a></p>"
        },
        "2": {
          "open": "2.11.2019",
          "close": "10.11.2019",
          "desc": "<p>Nämä tehtävät liittyvät kurssin toisen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa2/'>osa2</a></p>"
        },
        "3": {
          "open": "8.11.2019",
          "close": "17.11.2019",
          "desc": "<p>Nämä tehtävät liittyvät kurssin kolmannen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa3/'>osa3</a> kohtaan 'Tuotannossa tapahtuva testaaminen ja laadunhallinta' asti.</p>"
        },
        "4": {
          "open": "15.11.2019",
          "close": "24.11.2019",
          "desc": "<p>Nämä tehtävät liittyvät kurssin neljännen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa4/'>osa3</a> ja <a href='https: //ohjelmistotuotanto-hy.github.io/osa4/'>osa4</a> poislukien ne luvut, joihin on merkitty <span style='color:blue'>viikko 5</span> tai <span style='color:blue'>viikko 6</span>.</p>"
        },
        "5": {
          "open": "22.11.2019",
          "close": "01.12.2019",
          "desc": "<p>Nämä tehtävät liittyvät kurssin viidennen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa5/'>osa5</a>.</p>"
        },
        "6": {
          "open": "4.12.2019",
          "close": "13.12.2019",
          "desc": "<p>Nämä tehtävät liittyvät kurssin kuudennen viikon vierailuluentoihin, luentojen tallenteet löytyvät <a href='https://ohjelmistotuotanto-hy.github.io'>kurssisivulta</a>.<br><br>Kysymysten numerot kertovat suunilleen missä järjestyksessä vastaukset löytyvät kultakin luennolta.</p>"
        },
        "7": {
          "open": "11.12.2019",
          "close": "20.12.2019",
          "desc": "<p>Nämä tehtävät liittyvät kurssin seitsemännen viikon vierailuluentoihin, luentojen tallenteet löytyvät <a href='https://ohjelmistotuotanto-hy.github.io'>kurssisivulta</a>.<br><br>Kysymysten numerot kertovat suunilleen missä järjestyksessä vastaukset löytyvät kultakin luennolta.</p>"
        }
      }
    },
    {
      "id": 2,
      "name": "ohtu-avoin-2020",
      "parts": {
        "1": {
          "open": "16.1.2020",
          "close": "30.4.2020",
          "desc": "<p>Nämä tehtävät liittyvät kurssin ensimmäisen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy-avoin.github.io/osa1/'>osa1</a></p>"
        },
        "2": {
          "open": "20.1.2020",
          "close": "30.4.2020",
          "desc": "<p>Nämä tehtävät liittyvät kurssin toisen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy-avoin.github.io/osa2/'>osa2</a></p>"
        },
        "3": {
          "open": "22.1.2020",
          "close": "30.4.2020",
          "desc": "<p>Nämä tehtävät liittyvät kurssin kolmannen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy-avoin.github.io/osa3/'>osa3</a> kohtaan 'Tuotannossa tapahtuva testaaminen ja laadunhallinta' asti.</p>"
        },
        "4": {
          "open": "24.1.2020",
          "close": "30.4.2020",
          "desc": "<p>Nämä tehtävät liittyvät kurssin neljännen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy-avoin.github.io/osa3/'>osa3</a> jälkipuolisko ja <a href=https://ohjelmistotuotanto-hy-avoin.github.io/osa4/'>osa4</a> poislukien ne luvut, joihin on merkitty <span style='color:blue'>viikko 5</span> tai <span style='color:blue'>viikko 6</span>.</p>"
        },
        "5": {
          "open": "26.1.2020",
          "close": "30.4.2020",
          "desc": "<p>Nämä tehtävät liittyvät kurssin viidennen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy-avoin.github.io/osa5/'>osa5</a>.</p>"
        },
        "6": {
          "open": "28.1.2020",
          "close": "30.4.2020",
          "desc": "<p>Nämä tehtävät liittyvät kurssin kuudennen viikon vierailuluentoihin, luentojen tallenteet löytyvät <a href='https://ohjelmistotuotanto-hy-avoin.github.io/'>kurssisivulta</a>.<br><br>Kysymysten numerot kertovat suunilleen missä järjestyksessä vastaukset löytyvät kultakin luennolta.</p>"
        },
        "7": {
          "open": "30.1.2020",
          "close": "30.4.2020",
          "desc": "<p>Nämä tehtävät liittyvät kurssin seitsemännen viikon vierailuluentoihin, luentojen tallenteet löytyvät <a href='https://ohjelmistotuotanto-hy-avoin.github.io/'>kurssisivulta</a>.<br><br>Kysymysten numerot kertovat suunilleen missä järjestyksessä vastaukset löytyvät kultakin luennolta.</p>"
        }
      }
    },
    {
      "id": 3,
      "name": "ohtu2020",
      "parts": {
        "1": {
          "open": "23.10.2020",
          "close": "1.11.2020",
          "desc": "<p>Nämä tehtävät liittyvät kurssin ensimmäisen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa1/'>osa1</a></p>"
        },
        "2": {
          "open": "30.10.2020",
          "close": "8.11.2020",
          "desc": "<p>Ilmoittatuminen miniprojektiin alkanut, deadline pe 13.11. Lisää tietoa <a href='https://ohjelmistotuotanto-hy.github.io/miniprojekti/'>täällä!</a></p><p>Nämä tehtävät liittyvät kurssin toisen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa2/'>osa2</a></p>"
        },
        "3": {
          "open": "6.11.2020",
          "close": "15.11.2020",
          "desc": "<p>Ilmoittatuminen miniprojektiin alkanut, deadline pe 13.11. Lisää tietoa <a href='https://ohjelmistotuotanto-hy.github.io/miniprojekti/'>täällä!</a></p><p>Nämä tehtävät liittyvät kurssin kolmannen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa3/'>osa3</a> kohtaan 'Tuotannossa tapahtuva testaaminen ja laadunhallinta' asti.</p>"
        },
        "4": {
          "open": "13.11.2020",
          "close": "22.11.2020",
          "desc": "<p>Nämä tehtävät liittyvät kurssin neljännen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa4/'>osa3</a> ja <a href='https: //ohjelmistotuotanto-hy.github.io/osa4/'>osa4</a> poislukien ne luvut, joihin on merkitty <span style='color:blue'>viikko 5</span> tai <span style='color:blue'>viikko 6</span>.</p>"
        },
        "5": {
          "open": "20.11.2020",
          "close": "30.11.2020",
          "desc": "<p>Nämä tehtävät liittyvät kurssin viidennen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa5/'>osa5</a>.</p>"
        },
        "6": {
          "open": "28.11.2020",
          "close": "11.12.2020",
          "desc": "<p>Nämä tehtävät liittyvät kurssin kuudennen viikon vierailuluentoihin, luentojen tallenteet löytyvät <a href='https://ohjelmistotuotanto-hy.github.io'>kurssisivulta</a>.<br><br>Kysymysten numerot kertovat suunilleen missä järjestyksessä vastaukset löytyvät kultakin luennolta.</p>"
        },
        "7": {
          "open": "28.11.2020",
          "close": "18.12.2020",
          "desc": "<p>Nämä tehtävät liittyvät kurssin seitsemännen viikon vierailuluentoihin, luentojen tallenteet löytyvät <a href='https://ohjelmistotuotanto-hy.github.io'>kurssisivulta</a>.<br><br>Kysymysten numerot kertovat suunilleen missä järjestyksessä vastaukset löytyvät kultakin luennolta.</p>"
        }
      }
    },
    {
      "id": 4,
      "name": "ohtu-avoin-2021",
      "parts": {
        "1": {
          "open": "7.1.2021",
          "close": "30.4.2021",
          "desc": "<p>Nämä tehtävät liittyvät kurssin ensimmäisen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy-avoin.github.io/osa1/'>osa1</a></p>"
        },
        "2": {
          "open": "20.1.2021",
          "close": "30.4.2021",
          "desc": "<p>Nämä tehtävät liittyvät kurssin toisen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy-avoin.github.io/osa2/'>osa2</a></p>"
        },
        "3": {
          "open": "22.1.2021",
          "close": "30.4.2021",
          "desc": "<p>Nämä tehtävät liittyvät kurssin kolmannen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy-avoin.github.io/osa3/'>osa3</a> kohtaan 'Tuotannossa tapahtuva testaaminen ja laadunhallinta' asti.</p>"
        },
        "4": {
          "open": "24.1.2021",
          "close": "30.4.2021",
          "desc": "<p>Nämä tehtävät liittyvät kurssin neljännen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy-avoin.github.io/osa3/'>osa3</a> jälkipuolisko ja <a href=https://ohjelmistotuotanto-hy-avoin.github.io/osa4/'>osa4</a> poislukien ne luvut, joihin on merkitty <span style='color:blue'>viikko 5</span> tai <span style='color:blue'>viikko 6</span>.</p>"
        },
        "5": {
          "open": "26.1.2021",
          "close": "30.4.2021",
          "desc": "<p>Nämä tehtävät liittyvät kurssin viidennen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy-avoin.github.io/osa5/'>osa5</a>.</p>"
        },
        "6": {
          "open": "28.1.2021",
          "close": "30.4.2021",
          "desc": "<p>Nämä tehtävät liittyvät kurssin kuudennen viikon vierailuluentoihin, luentojen tallenteet löytyvät <a href='https://ohjelmistotuotanto-hy-avoin.github.io/'>kurssisivulta</a>.<br><br>Kysymysten numerot kertovat suunilleen missä järjestyksessä vastaukset löytyvät kultakin luennolta.</p>"
        },
        "7": {
          "open": "30.1.2021",
          "close": "30.4.2021",
          "desc": "<p>Nämä tehtävät liittyvät kurssin seitsemännen viikon vierailuluentoihin, luentojen tallenteet löytyvät <a href='https://ohjelmistotuotanto-hy-avoin.github.io/'>kurssisivulta</a>.<br><br>Kysymysten numerot kertovat suunilleen missä järjestyksessä vastaukset löytyvät kultakin luennolta.</p>"
        }
      }
    },
    {
      "id": 5,
      "name": "ohtu2021",
      "parts": {
        "1": {
          "open": "28.10.2021",
          "close": "7.11.2021",
          "desc": "<p>Nämä tehtävät liittyvät kurssin ensimmäisen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa1/'>osa1</a></p>"
        },
        "2": {
          "open": "8.11.2021",
          "close": "14.11.2021",
          "desc": "<p>Nämä tehtävät liittyvät kurssin toisen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa2/'>osa2</a></p>"
        },
        "3": {
          "open": "15.11.2021",
          "close": "21.11.2021",
          "desc": "<p>Nämä tehtävät liittyvät kurssin kolmannen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa3/'>osa3</a> kohtaan 'Tuotannossa tapahtuva testaaminen ja laadunhallinta' asti.</p>"
        },
        "4": {
          "open": "22.11.2021",
          "close": "28.11.2021",
          "desc": "<p>Nämä tehtävät liittyvät kurssin neljännen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa4/'>osa3</a> ja <a href='https: //ohjelmistotuotanto-hy.github.io/osa4/'>osa4</a> poislukien ne luvut, joihin on merkitty <span style='color:blue'>viikko 5</span> tai <span style='color:blue'>viikko 6</span>.</p>"
        },
        "5": {
          "open": "29.11.2021",
          "close": "05.12.2021",
          "desc": "<p>Nämä tehtävät liittyvät kurssin viidennen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa5/'>osa5</a>.</p>"
        },
        "6": {
          "open": "06.12.2021",
          "close": "23.12.2021",
          "desc": "<p>Nämä tehtävät liittyvät kurssin kuudennen viikon vierailuluentoihin, luentojen tallenteet löytyvät <a href='https://ohjelmistotuotanto-hy.github.io'>kurssisivulta</a>.<br><br>Kysymysten numerot kertovat suunilleen missä järjestyksessä vastaukset löytyvät kultakin luennolta.</p>"
        },
        "7": {
          "open": "06.12.2021",
          "close": "23.12.2021",
          "desc": "<p>Nämä tehtävät liittyvät kurssin seitsemännen viikon vierailuluentoihin, luentojen tallenteet löytyvät <a href='https://ohjelmistotuotanto-hy.github.io'>kurssisivulta</a>.<br><br>Kysymysten numerot kertovat suunilleen missä järjestyksessä vastaukset löytyvät kultakin luennolta.</p>"
        }
      }
    },
    {
      "id": 6,
      "name": "ohtu-avoin-2022",
      "parts": {
        "1": {
          "open": "10.1.2022",
          "close": "30.4.2022",
          "desc": "<p>Nämä tehtävät liittyvät kurssin ensimmäisen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy-avoin.github.io/osa1/'>osa1</a></p>"
        },
        "2": {
          "open": "20.1.2022",
          "close": "30.4.2022",
          "desc": "<p>Nämä tehtävät liittyvät kurssin toisen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy-avoin.github.io/osa2/'>osa2</a></p>"
        },
        "3": {
          "open": "22.1.2022",
          "close": "30.4.2022",
          "desc": "<p>Nämä tehtävät liittyvät kurssin kolmannen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy-avoin.github.io/osa3/'>osa3</a> kohtaan 'Tuotannossa tapahtuva testaaminen ja laadunhallinta' asti.</p>"
        },
        "4": {
          "open": "24.1.2022",
          "close": "30.4.2022",
          "desc": "<p>Nämä tehtävät liittyvät kurssin neljännen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy-avoin.github.io/osa3/'>osa3</a> jälkipuolisko ja <a href=https://ohjelmistotuotanto-hy-avoin.github.io/osa4/'>osa4</a> poislukien ne luvut, joihin on merkitty <span style='color:blue'>viikko 5</span> tai <span style='color:blue'>viikko 6</span>.</p>"
        },
        "5": {
          "open": "26.1.2022",
          "close": "30.4.2022",
          "desc": "<p>Nämä tehtävät liittyvät kurssin viidennen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy-avoin.github.io/osa5/'>osa5</a>.</p>"
        },
        "6": {
          "open": "28.1.2022",
          "close": "30.4.2022",
          "desc": "<p>Nämä tehtävät liittyvät kurssin kuudennen viikon vierailuluentoihin, luentojen tallenteet löytyvät <a href='https://ohjelmistotuotanto-hy-avoin.github.io/'>kurssisivulta</a>.<br><br>Kysymysten numerot kertovat suunilleen missä järjestyksessä vastaukset löytyvät kultakin luennolta.</p>"
        },
        "7": {
          "open": "30.1.2022",
          "close": "30.4.2022",
          "desc": "<p>Nämä tehtävät liittyvät kurssin seitsemännen viikon vierailuluentoihin, luentojen tallenteet löytyvät <a href='https://ohjelmistotuotanto-hy-avoin.github.io/'>kurssisivulta</a>.<br><br>Kysymysten numerot kertovat suunilleen missä järjestyksessä vastaukset löytyvät kultakin luennolta.</p>"
        }
      }
    },
    {
      "id": 7,
      "name": "ohtu2022",
      "parts": {
        "1": {
          "open": "26.10.2022",
          "close": "6.11.2022",
          "desc": "<p>Nämä tehtävät liittyvät kurssin ensimmäisen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa1/'>osa1</a></p>"
        },
        "2": {
          "open": "5.11.2022",
          "close": "13.11.2022",
          "desc": "<p>Nämä tehtävät liittyvät kurssin toisen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa2/'>osa2</a></p>"
        },
        "3": {
          "open": "12.11.2022",
          "close": "20.11.2022",
          "desc": "<p>Nämä tehtävät liittyvät kurssin kolmannen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa3/'>osa3</a> kohtaan 'Tuotannossa tapahtuva testaaminen ja laadunhallinta' asti.</p>"
        },
        "4": {
          "open": "19.11.2022",
          "close": "27.11.2022",
          "desc": "<p>Nämä tehtävät liittyvät kurssin neljännen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa3/'>osa3</a> jälkipuolisko ja <a href=https://ohjelmistotuotanto-hy.github.io/osa4/'>osa4</a> poislukien ne luvut, joihin on merkitty <span style='color:blue'>viikko 5</span> tai <span style='color:blue'>viikko 6</span>.</p>"
        },
        "5": {
          "open": "26.11.2022",
          "close": "4.12.2022",
          "desc": "<p>Nämä tehtävät liittyvät kurssin viidennen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa5/'>osa5</a>.</p>"
        },
        "6": {
          "open": "7.12.2022",
          "close": "23.12.2022",
          "desc": "<p>Nämä tehtävät liittyvät kurssin kuudennen viikon vierailuluentoihin, luentojen tallenteet löytyvät <a href='https://ohjelmistotuotanto-hy.github.io/'>kurssisivulta</a>.<br><br>Kysymysten numerot kertovat suunilleen missä järjestyksessä vastaukset löytyvät kultakin luennolta.</p>"
        },
        "7": {
          "open": "16.12.2022",
          "close": "23.12.2022",
          "desc": "<p>Nämä tehtävät liittyvät kurssin seitsemännen viikon vierailuluentoihin, luentojen tallenteet löytyvät <a href='https://ohjelmistotuotanto-hy.github.io/'>kurssisivulta</a>.<br><br>Kysymysten numerot kertovat suunilleen missä järjestyksessä vastaukset löytyvät kultakin luennolta.</p>"
        }
      }
    },
    {
      "id": 8,
      "name": "ohtu2023",
      "parts": {
        "1": {
          "open": "18.10.2023",
          "close": "5.11.2023",
          "desc": "<p style='color:black; border-style: solid; border-width: thick; border-color: green; padding: 10px; margin-bottom: 15px; padding: 10px; background-color: #F1EFEF;'>Miniprojektien alku lähestyy. Ilmoittautumisen deadline la 11.11. klo 23.59. Lisää tietoa <a href='https://ohjelmistotuotanto-hy.github.io/miniprojekti/'>täällä!</a><p>Nämä tehtävät liittyvät kurssin ensimmäisen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa1/'>osa1</a></p>"
        },
        "2": {
          "open": "4.11.2023",
          "close": "12.11.2023",
          "desc": "<p style='color:black; border-style: solid; border-width: thick; border-color: green; padding: 10px; margin-bottom: 15px; padding: 10px; background-color: #F1EFEF;'>Miniprojektien alku lähestyy. Ilmoittautumisen deadline la 11.11. klo 23.59. Lisää tietoa <a href='https://ohjelmistotuotanto-hy.github.io/miniprojekti/'>täällä!</a><p>Nämä tehtävät liittyvät kurssin toisen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa2/'>osa2</a></p>"
        },
        "3": {
          "open": "11.11.2023",
          "close": "19.11.2023",
          "desc": "<p>Nämä tehtävät liittyvät kurssin kolmannen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa3/'>osa3</a> kohtaan 'Tuotannossa tapahtuva testaaminen ja laadunhallinta' asti.</p>"
        },
        "4": {
          "open": "18.11.2023",
          "close": "26.11.2023",
          "desc": "<p>Nämä tehtävät liittyvät kurssin neljännen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa3/'>osa3</a> jälkipuolisko ja <a href=https://ohjelmistotuotanto-hy.github.io/osa4/'>osa4</a> poislukien ne luvut, joihin on merkitty <span style='color:blue'>viikko 5</span> tai <span style='color:blue'>viikko 6</span>.</p>"
        },
        "5": {
          "open": "25.11.2023",
          "close": "3.12.2023",
          "desc": "<p>Nämä tehtävät liittyvät kurssin viidennen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa5/'>osa5</a>.</p>"
        }
      }
    }       
  ],
  "questions": [
    {
      "id": 201,
      "part": "1",
      "courseId": "3",
      "title": "Seuraavassa luetellut ovat ohjelmiston elinkaaren vaiheita (lifecycle phases):",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "asiakkaan vaatimusten selvittäminen"
        },
        {
          "right": true,
          "text": "testaus"
        },
        {
          "right": true,
          "text": "ohjelmointi"
        },
        {
          "right": true,
          "text": "ohjelmiston rakenteen suunnittelu"
        },
        {
          "right": true,
          "text": "käytössä jo olevan ohjelmiston laajentaminen"
        },
        {
          "right": false,
          "text": "ohjelmiston dokumentointi"
        },
        {
          "right": false,
          "text": "suorituskyvyn parantaminen"
        },
        {
          "right": false,
          "text": "asiakastapaamiset"
        }
      ]
    },
    {
      "courseId": "3",
      "title": "Mitkä seuraavista vesiputousmallia koskevista väitteistä ovat  'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vesiputousmallia käytettäessä tulee määrittelyn ja suunnittelun tuotokset dokumentoida huolellisesti."
        },
        {
          "right": true,
          "text": "Jos käytetään vesiputousmallia ohjelmoijat eivät tyypillisesti osallistu vaatimusmäärittelyyn"
        },
        {
          "right": false,
          "text": "Yksi ensimmäisistä vesiputousmallin puolestapuhujista oli Winston Royce"
        },
        {
          "right": false,
          "text": "Yhdysvaltojen puolustusministeriö eli Department of Defence ei tänä päivänäkään salli muiden ohjelmistotuotantotapojen kuin vesiputousmallin käyttöä"
        },
        {
          "right": false,
          "text": "Avaruussukkuloiden käyttämä ohjelmisto rakennettiin vesiputousmallilla"
        },
        {
          "right": false,
          "text": "Vesiputousmalli sopii erityisen hyvin pitkäkestoisiin projekteihin sillä niissä on paremmin aikaa suorittaa aluksi perusteellinen vaatimusmäärittely"
        },
        {
          "right": false,
          "text": "Vesiputousmalli sopii erityisen hyvin pitkäkestoisiin projekteihin sillä niissä on paremmin aikaa suorittaa lopuksi kattava testaus"
        }
      ],
      "part": "1",
      "id": 202
    },
    {
      "courseId": "3",
      "title": "Seuraavassa luetellut ovat vesiputousmallin heikkouksia:",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Asiakkaan ei ole helppoa ilmaista sitä miten tilattavan ohjelmiston tulisi toimia"
        },
        {
          "right": true,
          "text": "Jos sovelluksen toteutuksen yksityiskohtia ei ollenkaan huomioida määrittelyn yhteydessä, saatetaan vaatimusmäärittelyyn kirjata asioita joita on aivan liian kallista toteuttaa."
        },
        {
          "right": true,
          "text": "Myöhäisessä vaiheessa havaitut ongelmat saattavat johtaa suuria kustannuksia aiheuttaviin muutoksiin."
        },
        {
          "right": true,
          "text": "Vesiputousmalli ei ota huomioon sovelluksen kehityksen aikana tapahtuvia mahdollisia bisnesympäristön muutoksia"
        },
        {
          "right": false,
          "text": "Vesiputousmalli asettaa liikaa testaamiseen liittyvää vastuuta ohjelmoijille"
        },
        {
          "right": false,
          "text": "Vesiputousmalli ei ota tarpeeksi huomioon kehitystiimin johtajien mielipiteitä"
        }
      ],
      "part": "1",
      "id": 203
    },
    {
      "courseId": "3",
      "title": "Ketterän manifestin ja sen periaatteiden mukaan",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Projektin edistymistä mitataan ensisijaisesti toimivan ohjelmiston etenemisellä"
        },
        {
          "right": true,
          "text": "Muutokseen reagoiminen on tärkeämpää kuin etukäteen laadittujen suunnitelmien noudattaminen"
        },
        {
          "right": true,
          "text": "Asiakkaalle kannattaa toimittaa käyttökelpoisia ohjelmiston versioita niin usein kuin mahdollista"
        },
        {
          "right": false,
          "text": "Dokumentointi ei ole tärkeää"
        },
        {
          "right": false,
          "text": "Yksilön vaikutus ohjelmistoprojektissa kannattaa minimoida"
        },
        {
          "right": false,
          "text": "Kommunikointi kannattaa ensisijaisesti hoitaa pikaviestimien avulla"
        },
        {
          "right": false,
          "text": "Tärkeiden deadlinejen koittaessa kehitystiimin tulee työskennellä normaalia suuremmalla intensiteetillä jotta ketteryys säilytetään"
        }
      ],
      "part": "1",
      "id": 204
    },
    {
      "courseId": "3",
      "title": "Ketterän manifestin periaatteiden mukaan",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sen lisäksi, että ketterässä kehityksessä vaatimukset voivat vaihtua, voi myös tiimi vaihtaa tarpeen mukaan toimintatapojaan"
        },
        {
          "right": true,
          "text": "Ohjelmistokehittäjille kannattaa antaa vapaus ja vastuu päättää omista työtavoista"
        },
        {
          "right": true,
          "text": "On oleellista että ohjelmistokehittäjät käyvät tiivistä interaktiota loppukäyttäjien kanssa"
        },
        {
          "right": true,
          "text": "Kannattaa suosia mahdollisimman yksinkertaisia ratkaisuja"
        },
        {
          "right": false,
          "text": "Ohjelmistoarkkitehdin rooli on keskeinen projektien onnistumisen kannalta"
        },
        {
          "right": false,
          "text": "Ketterässä kehittämisessä ohjelmiston laadulla ei ole kovin suurta merkitystä, pääasia on toteuttaa asiakkaalle mahdollisimman nopeasti uutta toiminnallisuutta"
        },
        {
          "right": false,
          "text": "Ohjelmistosta ei kannata tuottaa uusia versiota liian usein"
        }
      ],
      "part": "1",
      "id": 205
    },
    {
      "courseId": "3",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Product ownerin kannattaa olla hyvin selvillä ohjelmiston käyttäjien tarpeista"
        },
        {
          "right": true,
          "text": "Scrum ei suosittele yli kymmenen hengen tiimejä"
        },
        {
          "right": true,
          "text": "Scrumissa on mahdollista ja jopa suositeltavaa vaihtaa tarpeen mukaan kehitystiimin toimintatapoja"
        },
        {
          "right": false,
          "text": "Sprintin pituuden saa valita täysin vapaasti"
        },
        {
          "right": false,
          "text": "Scrumin tehokas soveltaminen on suoraviivaista sillä sen 'pelisäännöt' määrittelevä Scrum guide on vaan noin 15 sivua pitkä."
        },
        {
          "right": false,
          "text": "Scrum antaa tarkan ohjeistuksen sille miten sovelluskehittäjän tulee toimia"
        }
      ],
      "part": "1",
      "id": 206
    },
    {
      "courseId": "3",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Product owner määrää sen mitä ja missä järjestyksessä toiminnallisuutta toteutetaan sovellukseen"
        },
        {
          "right": true,
          "text": "Jos joku tiimin ulkopuolinen pyytää sprintin aikana kehitystiimiä toteuttamaan välittömästi jonkin uuden ja briljantin idean, tulee scrum masterin puuttua asiaan"
        },
        {
          "right": true,
          "text": "Scrum master auttaa byrokraattisten ongelmien (esim. kehitystiimillä ei ole käytössä sopivaa palvelinympäristöä) ratkaisemisessa"
        },
        {
          "right": false,
          "text": "Scrum master antaa työmääräarviot sovellukseen toteutettaville toiminnallisuuksille"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjät eivät saa lisätä uusia vaatimuksia product backlogille ilman product ownerin lupaa"
        },
        {
          "right": false,
          "text": "Scrum master päättää minkä asian parissa kukin kehitystiimin jäsen sprintin aikana työskentelee"
        },
        {
          "right": false,
          "text": "Product owner työskentelee scrum masterin alaisuudessa"
        }
      ],
      "part": "1",
      "id": 207
    },
    {
      "courseId": "3",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kehittäjätiimissä tulisi olla osaamista myös sovelluksen testaamiseen"
        },
        {
          "right": true,
          "text": "Scrum suosittelee että tiimi määrittelee yhteisen laatustandardin, joka määrittelee mitä kaikkea toiminnallisuuden toteuttaminen valmiiksi asti pitää sisällään"
        },
        {
          "right": false,
          "text": "Lähellä deadlineja myös puutteellisesti toteutetut käyttäjävaatimukset voidaan hyväksyä osaksi sprintissä julkaistavaa ohjelmistoversiota"
        },
        {
          "right": false,
          "text": "Scrum master määrittelee kehitystiimin työskentelytavat"
        },
        {
          "right": false,
          "text": "Kehitystiimi saa itse valita mitä käyttäjän vaatimuksia se kussakin sprintissä toteuttaa"
        },
        {
          "right": false,
          "text": "Yhden sprintin aikana toteutetut vaatimukset testataan yleensä vasta seuraavassa sprintissä"
        },
        {
          "right": false,
          "text": "Scrum suosittelee, että järjestelmäylläpitäjät eivät työskentele osana Scrum-tiimejä"
        }
      ],
      "part": "1",
      "id": 208
    },
    {
      "courseId": "3",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sprintin suunnittelussa päätetään mitä seuraavan sprintin aikana on tarkoitus toteuttaa"
        },
        {
          "right": true,
          "text": "Daily scrum -palavereissa on tarkoitus tuoda esiin seikkoja, jotka mahdollisesti hidastavat kehitystyötä"
        },
        {
          "right": true,
          "text": "Sprintin katselmointien (sprint review) yhteydessä saatetaan product backlogille lisätä uusia vaatimuksia"
        },
        {
          "right": false,
          "text": "Product owner ei osallistu sprintin suunnitteluun. Sille ei ole tarvetta, sillä kehittäjätiimi työskentelee itseorganisoituvasti"
        },
        {
          "right": false,
          "text": "Termit sprint backlog ja product backlog tarkottavat käytännössä samaa"
        },
        {
          "right": false,
          "text": "Asiakkaat voivat antaa palautetta sovelluksesta Daily scrum -palaverissa"
        },
        {
          "right": false,
          "text": "Sprintin katselmoinnissa (sprint review) jokainen sovelluskehittäjä raportoi omista sprintin aikaisista tekemisistään scrum masterille"
        }
      ],
      "part": "1",
      "id": 209
    },
    {
      "courseId": "3",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Retrospektiivin tarkoituksena on optimoida sovelluskehittäjien työskentelytapaa"
        },
        {
          "right": true,
          "text": "Scrum ei ota kantaa siihen miten sovellus testataan"
        },
        {
          "right": true,
          "text": "Inspect-and-adapt -periaatteen takia product backlog saatetaan joutua priorisoimaan uudelleen"
        },

        {
          "right": false,
          "text": "Retrospektiivissä priorisoidaan product backlog tarpeen vaatiessa uudelleen"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjien ei kannata paljastaa sprintin alussa esiin tulevia vaikeuksia. Koska tiimit ovat itseorganisoituja, ei ole mitään tarvetta kertoa ongelmista ulkopuolisille liian aikaisin, sillä ongelmat ratkeavat yleensä ajan kanssa"
        },
        {
          "right": false,
          "text": "ScrumBut sopii erityisesti suurien ohjelmistoprojektien hallitsemiseen"
        }

      ],
      "part": "1",
      "id": 210
    },
    {
      "courseId": "3",
      "part": "2",
      "id": 211,
      "title": "Mitkä seuraavista vaatimusmäärittelyä koskevista väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vaatimusmäärittelyn aikana selvitetään mitä toiminnallisuutta kehitteillä olevaan ohjelmistoon halutaan"
        },
        {
          "right": true,
          "text": "Vaatimusmäärittelyn aikana selvitetään minkälaisessa toimintaympäristössä kehitettävän sovelluksen on tarkoitus toimia"
        },
        {
          "right": true,
          "text": "Lainsäädännölliset rajoitukset, kuten GDPR tulee huomioida sovelluksen vaatimusmäärittelyn aikana"
        },
        {
          "right": false,
          "text": "Eräs verkkokaupan laatuvaatimus (quality attribute) voisi olla 'Asiakas voi lisätä tuotteen ostoskoriin'"
        },
        {
          "right": false,
          "text": "Eräs verkkokaupan toiminnallinen (functional requirement) vaatimus voisi olla 'Verkkokauppan on toimittava kaikilla moderneilla web-selaimella'"
        },
        {
          "right": false,
          "text": "Vaatimusten validoinnilla tarkoitetaan niiden dokumentoimista kirjallisessa muodossa, esim. ohjelmistotiimin Wikisivulla"
        }
      ]
    }, 
    {
      "courseId": "3",
      "part": "2",
      "id": 212,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "MVP:n (minimal viable product) avulla voidaan tutkia ideoiden, esim. ohjelmiston potentiaalisten uusien ominaisuuksien, käyttökelpoisuutta"
        },
        {
          "right": true,
          "text": "Lean-startup-menetelmän tarkoituksena on oppia käyttäjien mieltymyksiä seuraamalla miten he sovellusta käyttävät"
        },
        {
          "right": false,
          "text": "A/B-testauksen avulla voidaan varmistua että järjestelmä toimii oikein poikkeuksellisissakin tilanteissa"
        },
        {
          "right": false,
          "text": "Vesiputousmallin hyvä puoli on se, että vaatimusmäärittelyä voidaan tarkentaa koko ohjelmistokehityksen ajan"
        },
        {
          "right": false,
          "text": "Eräs ketterien menetelmien ongelmista on se, että asiakas ei osaa ilmaista vaatimuksia riittävän hyvin ohjelmistokehitysprojektien alussa"
        },
        {
          "right": false,
          "text": "Lean startup -menetelmä sopii epämääräisyytensä takia oikeastaan vaan startup-yrityksille"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "2",
      "id": 213,
      "title": "Mitkä seuraavista user storyja koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "User storylle kannattaa kirjata hyväksymäkriteerit, eli esim. joukko testejä joiden avulla voidaan todeta storyn olevan toteutettu halutulla tavalla"
        },
        {
          "right": true,
          "text": "Ennen user storyn kuvaaman toiminnallisuuden toteuttamista on oleellista kommunikoida riittävästi product ownerin tai asiakkaan edustajan kanssa"
        },
        {
          "right": true,
          "text": "'Opiskelijan tulee pystyä tarkastelemaan seuraavan periodin opetustarjontaa' on kohtuullisen hyvä muotoilu user storylle"
        },
        {
          "right": false,
          "text": "User storyyn kirjataan tarkasti kaikki loppukäyttäjän sille asettamat vaatimukset"
        },
        {
          "right": false,
          "text": "'Opiskelijoiden tiedot talletetaan tietokantaan' on hyvä muotoilu user storylle"
        },
        {
          "right": false,
          "text": "Mike Cohn ja Ron Jeffries ovat erimielisiä siitä, mitä user storyn määritelmä pitää sisällään"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "2",
      "id": 214,
      "title": "Mitkä seuraavista user storyja koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": false,
          "text": "User storyn tekstuaalinen kuvaus on aina kirjattava muodossa 'As a _user_, I want _functionality_ so that _business value_'"
        },
        {
          "right": false,
          "text": "Kaikki product backlogille asti päätyvät user storyt ovat projektin kannalta suunilleen yhtä tärkeitä saada toteutettua"
        },
        {
          "right": false,
          "text": "User storyjen on aina noudatettava INVEST-kriteerejä"
        },
        {
          "right": false,
          "text": "Jos user story lisätään product backlogille, sen sisältöä ei saa enää muuttaa"
        },
        {
          "right": false,
          "text": "Suuren teknisen riskin sisältävän toiminnallisuuden kuvaamat user storyt kannattaa toteuttaa vasta ihan projektin lopussa, näin niissä epäonnistuminen ei laske liian aikaisessa vaiheessa sovelluskehittäjien mielialaa"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "2",
      "id": 215,
      "title": "Mitkä seuraavista user storyjen estimointia koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Suhteellisessa estimoinnissa verrataan user storyjen työmäärää muiden user storyjen vaatimaan työmäärään"
        },
        {
          "right": true,
          "text": "Työmääräarvioissa tulee huomioida definition of done eli projektissa sovittu yleinen laatutaso"
        },
        {
          "right": true,
          "text": "Työmääräarviot auttavat asiakasta user storyjen priorisoinnissa"
        },
        {
          "right": false,
          "text": "On kehitetty menetelmiä (esim. planning poker), joiden avulla ohjelmiston tekemiseen vaadittava työmäärä voidaan arvioida kohtuullisen tarkasti jo ennen projektin käynnistymistä"
        },
        {
          "right": false,
          "text": "Ketterien menetelmien parhaiden käytänteiden mukaista on antaa product ownerin ja scrum masterin hoitaa työmääräarviointi"
        },
        {
          "right": false,
          "text": "Työmääräarvioita ei tule muuttaa kesken projektin, sillä ne ovat lupaus asiakkaalle siitä milloin sovellus tulee valmistumaan"
        },
        {
          "right": false,
          "text": "Cone of uncertainity kuvaa sitä, että mitä kokeneempi sovelluskehittäjä on, sitä parempia työmääräarvioita hän pystyy tekemään"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "2",
      "id": 216,
      "title": "Mitkä seuraavista hyvää product backlogia koskevista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "User storyjen prioriteetti voi muuttua ajan kuluessa"
        },
        {
          "right": true,
          "text": "Sprinttiin toteutettavaksi valittavien user storyjen tulee olla riittävän pieniä"
        },
        {
          "right": true,
          "text": "Backlogille lisätään tarpeen mukaan uusia user storyja"
        },
        {
          "right": false,
          "text": "Backlogin sisältöä saa muuttaa ainoastaan sprintin suunnittelukokouksissa"
        },
        {
          "right": false,
          "text": "Jokaisen backlogille lisätyn user storyn täytyy aina sisältää tarkat hyväksymäkriteerit"
        },
        {
          "right": false,
          "text": "Jokainen backlogilla oleva user story täytyy toteuttaa, muuten projekti tuomitaan epäonnistuneeksi"
        },
        {
          "right": false,
          "text": "Kun user story on toteutettu valmiiksi, sanotaan että story on ready"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "2",
      "id": 217,
      "title": "Mitkä seuraavista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Tuotteen tai julkaisun burndown-kaavion avulla pystytään visualisoimaan jäljellä olevaa tekemättömän työn määrää"
        },
        {
          "right": true,
          "text": "User story mapping -tekniikka ryhmittelee user storyt toiminnallisiin loogisiin kokonaisuuksiin"
        },
        {
          "right": false,
          "text": "Tiimin velositeetilla tarkoitetaan sitä kuinka monta riviä koodia tiimi pystyy keskimäärin tuottamaan yhden sprintin aikana"
        },
        {
          "right": false,
          "text": "Velositeetin perusteella voidaan helposti vertailla mikä firman ohjelmistokehitystiimeistä on suorituskyvyltään paras"
        },
        {
          "right": false,
          "text": "Tiimin velositeettiin lasketaan jokainen sprintin aikana tehty koodirivi"
        },
        {
          "right": false,
          "text": "NoEstimates-liike on sitä mieltä että user storyjen estimointia ei tarvita ja siitä ei ole mitään hyötyä"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "2",
      "id": 218,
      "title": "Mitkä seuraavista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ei ole hyvä ottaa sprinttiin toteutettavaksi sellaista user storya jonka vaatimasta työmäärästä ei ole kellään minkäänlaista käsitystä"
        },
        {
          "right": true,
          "text": "Product owner pystyy priorisoinnin avulla vaikuttamaan siihen, mitä user storyja sprinttiin valitaan"
        },
        {
          "right": true,
          "text": "Velositeetin avulla voidaan arvioida kuinka paljon työtä yhteen sprinttiin kannattaa ottaa"
        },
        {
          "right": false,
          "text": "Sprintin tavoitteella tarkoitetaan sprinttiin valittuja user storyja"
        },
        {
          "right": false,
          "text": "Product owner määrää kuinka monta user storya kehitystiimi ottaa tiettyyn sprinttiin toteutettavaksi"
        },
        {
          "right": false,
          "text": "Jos user story on liian suuri toteutettavaksi yhdessä sprintissä, se kannattaa jakaa kahtia siten, että toinen keskittyy pelkään käyttöliittymään ja toinen bisneslogiikkaan ja tietokantaan"
        },
        {
          "right": false,
          "text": "Spike-ratkaisuilla saadaan aina nopeutettua sovelluskehitystä"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "2",
      "id": 219,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sprintin suunnittelun yhteydessä joudutaan miettimään myös sovelluksen toteutustason asioita"
        },
        {
          "right": true,
          "text": "Taskboardiksi organisoitu sprint backlog visualisoi kunkin tehtävän eli taskin statuksen"
        },
        {
          "right": false,
          "text": "Sprint backlogille laitettavat taskit tulee aina kirjoittaa asiakkaan ymmärtämällä kielellä"
        },
        {
          "right": false,
          "text": "Product owner määrää mitä sarakkeita sprintin backlogina toimivalla taskboardilla on"
        },
        {
          "right": false,
          "text": "Sprintin burndown-käyrän avulla on mahdollista seurata kuinka paljon työtunteja kehittäjillä on vielä jäljellä kyseisessä sprintissä"
        },
        {
          "right": false,
          "text": "Jos taskien työmäärä on arvioitu tunteina, tulee taskiin käytetty työaika päivän päätteeksi aina vähentää työmääräarviosta"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "2",
      "id": 220,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "WIP-rajoitteiden avulla voidaan yrittää pienentää riskiä sille, että sprintin aikana ehditään toteuttamaan useita user storyja ainoastaan osittain"
        },
        {
          "right": true,
          "text": "Retrospektiivi on hyvä hetki tarkastella ja modifioida sprintin taskboardia, esim. lisätä siihen WIP-rajoitteita"
        },
        {
          "right": true,
          "text": "On itseasiassa hiukan kiistanalaista kannattaako sprint backlogilla oleville taskeille antaa työmääräarvioita"
        },
        {
          "right": false,
          "text": "ScrumBan-menetelmässä noudatetaan aina 2 viikon pituisia sprinttejä"
        },
        {
          "right": false,
          "text": "ScrumBan-menetelmässä on tyypillistä, että jokainen sovelluskehittäjä työskentelee yhtä aikaa usean eri user storyn parissa"
        },
        {
          "right": false,
          "text": "Backlog grooming tehdään aina kahden sprintin välissä"
        }
      ]
    },


    {
      "courseId": "3",
      "part": "3",
      "id": 231,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vesiputousmallissa asiakas validoi vaatimukset lukemalla vaatimusmäärittelyn tuloksena olevaa dokumentaatiota"
        },
        {
          "right": true,
          "text": "Staattisen analyysin avulla voidaan tarkastella automatisoidusti noudattaako koodi määriteltyjä tyyliseikkoja, esim. oikeaoppista sisennystä"
        },
        {
          "right": true,
          "text": "Pariohjelmoinnin on todettu vähentävän koodiin jäävien bugien määrää"
        },
        {
          "right": false,
          "text": "Koodin katselmoinnissa testataan kaatuuko sovellus sattumanvaraisilla syötteillä"
        },
        {
          "right": false,
          "text": "Ohjelmiston verifioinnilla tarkoitetaan sen varmistamista, että ollaan ylipäätään tekemässä ohjelmistoa, joka on käyttäjän tarpeisiin sopiva"
        },
        {
          "right": false,
          "text": "Ketterät menetelmät ja vesiputousmalli poikkeavat monin paikoin, mutta vaatimusten validointi tapahtuu molemmissa suunilleen samalla tavalla"
        },
        {
          "right": false,
          "text": "XP:n koodin yhteisomistajuuden periaate tarkoittaa sitä, että koodi julkaistaan Open source -lisenssillä kaikkien vapaaseen käyttöön"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "3",
      "id": 232,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston ulkoisella laadulla tarkoitetaan sitä, onko ohjelmisto sopiva käyttötarkoitukseensa, eli toimiiko se niin kuin käyttäjä haluaa ja olettaa"
        },
        {
          "right": true,
          "text": "Järjestelmätestauksessa sovelluksen toimintaa tutkitaan usein saman rajapinnan kautta, miten loppukäyttäjä sovellusta käyttää"
        },
        {
          "right": true,
          "text": "Testitapauksia mietittäessä kannattaa valita sellaisia testisyötteitä, jotka toimivat järjestelmän kannalta erilaisella tavalla, eli mitkä eivät kuulu samaan ekvivalenssiluokkaan"
        },
        {
          "right": false,
          "text": "Käyttäjän hyväksymistestauksessa verrataan sovellusta toimintaa vaatimusmäärittelyyn"
        },
        {
          "right": false,
          "text": "Black box -testauksen suorittavat aina sovelluskehittäjät"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "3",
      "id": 233,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Yksikkötestaus on useimmiten ns. developer-testausta, eli sovelluskehittäjien vastuulla"
        },
        {
          "right": true,
          "text": "Huono sisäinen laatu saattaa vaikeuttaa sovelluksen jatkokehittämistä"
        },
        {
          "right": true,
          "text": "Haarautumakattavuutta mittaamalla voidaan löytää ehtolauseita, joiden kaikkia haaroja ei ole testattu"
        },
        {
          "right": true,
          "text": "Mutaatiotestauksen ideana on varmistaa, että testit huomaavat sen jos koodiin tulee bugeja"
        },
        {
          "right": false,
          "text": "Lasilaatikkotestauksella testataan sovelluksen tarjoamaa käyttökokemusta, eli se kohdistuu lähinnä käyttöliittymän testaamiseen"
        },
        {
          "right": false,
          "text": "Jos koodin rivikattavuus on 100%, voidaan olla lähes varmoja, että koodi toimii oikein"
        },
        {
          "right": false,
          "text": "Yksikkötestaus suoritetaan useimmiten ohjelman tilaajaorganisaation toimesta"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "3",
      "id": 234,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Integraatiotestauksessa pyritään varmistamaan sovelluksen suurempien, useimmista luokista tai moduuleista koostuvien kokonaisuuksien toiminta"
        },
        {
          "right": true,
          "text": "Regressiotestaus pyrkii varmistamaan, että ohjelmiston jo aiemmin toimineet osat eivät hajoa uusien muutosten yhteydessä"
        },
        {
          "right": true,
          "text": "Regressiotestejä on mahdollista tehdä Pythonin unittest-kirjastolla"
        },
        {
          "right": false,
          "text": "Eräs ketterän kehityksen hyvistä puolia on se, että regressiotestaukselle ei käytännössä ole mitään tarvetta"
        },
        {
          "right": false,
          "text": "Ketterässä kehityksessä koodin integraatiotestauksen suorittaa kehittäjäorganisaation QA-tiimi"
        },
        {
          "right": false,
          "text": "Ketterä kehitys ja vesiputousmalli ovat monin paikoin hyvin erilaisia menetelmiä. Koodin integrointi ja integraatiotestaus tapahtuu kuitenkin molemmissa samalla tavalla"
        },
        {
          "right": false,
          "text": "Regressiotestaus tapahtuu lähes aina manuaalisesti"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "3",
      "id": 235,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Oikeaoppista TDD:tä sovellettaessa kirjoitetaan käytännössä aina yksi testi joka ei mene läpi ja sen jälkeen mahdollisimman yksinkertainen koodi, joka läpäisee testin"
        },
        {
          "right": true,
          "text": "Oikeaoppista TDD:tä sovellettaessa koodin sisäistä rakennetta parannellaan jos huomataan sen rapistuneen, tällöin testien halutaan edelleen menevän läpi"
        },
        {
          "right": true,
          "text": "Mock-olioita käytetään testauksessa varmistamaan, että testattava olio tai metodi kommunikoi riippuvuuksiensa kanssa oikein"
        },
        {
          "right": false,
          "text": "TDD:n ikävä puoli on se, että koodista saattaa tulla sen soveltamisen seurauksena ylläpidettävyydeltään huonoa"
        },
        {
          "right": false,
          "text": "TDD soveltuu erityisen hyvin ns. legacy-järjestelmien, eli vanhojen ja ylläpidettävyyden kannalta hankalien ohjelmistojen laajentamisen välineeksi"
        },
        {
          "right": false,
          "text": "Oikeaoppista TDD:tä käytettäessä ohjelmoitavat luokat ja metodit tulee aina suunnitella erittäin tarkasti ennen ohjelmoinnin aloittamista"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "3",
      "id": 236,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Integraatiohelvetti viittaa siihen, että vasta ohjelmintivaiheen lopussa tapahtuva luokkien ja komponenttien integrointi aiheuttaa useimmiten suuria ongelmia, riippumatta siitä miten huolellisesti ohjelmisto on suunniteltu"
        },
        {
          "right": true,
          "text": "Jatkuva integraatio pyrkii tuomaan koodin komponenteissa olevat yhteensopivuusongelmat esille niin nopeasti kuin mahdollista"
        },
        {
          "right": true,
          "text": "On oleellista jatkuvan integraation suorittamisen kannalta, että Python-projektissa tiedosto pyproject.toml on lisätty versionhallintaan"
        },
        {
          "right": false,
          "text": "Smoke testiksi kutsutaan testiä, missä järjestelmä yritetään saada kaatumaan tai 'savuamaan' kuormittamalla sitä äärimmäisen suurella operaatiomäärällä"
        },
        {
          "right": false,
          "text": "Jatkuvan integraation noudattaminen on helppoa, riittää kun joku konfiguroi tiimille  esim GitHub Actionin"
        },
        {
          "right": false,
          "text": "Jos jatkuvan integraation palvelin huomaa koodissa jonkin ongelman, riittää että ongelma korjataan seuraavan sprintin alkuun mennessä"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "3",
      "id": 237,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Jatkuva toimittaminen (continuous deployment) vaatii erittäin suurta automaation astetta testauksen ja sovelluksen tuotantoon viemisen suhteen"
        },
        {
          "right": true,
          "text": "Jatkuvaa toimitusvalmius (continuous delivery) automatisoi ohjelmiston laadunhallinnan, mutta jättää ihmisen ratkaistavaksi missä vaiheessa uusia versiota julkaistaan loppukäyttäjille"
        },
        {
          "right": true,
          "text": "Staging-ympäristön on konfuguraatioiltaan syytä olla mahdollisimman lähellä sovelluksen tuotantoympäristöä"
        },
        {
          "right": false,
          "text": "Build pipelinen käyttö nopeuttaa ohjelmakoodin kääntämistä rinnakkaistamalla käännöksen vaiheet useille eri koneille"
        },
        {
          "right": false,
          "text": "Jatkuva toimittaminen (continuous deployment) sopii ainoastaan hyvin pienille yrityksille, esimerkiksi alkuvaiheessa oleville start upeille"
        },
        {
          "right": false,
          "text": "Staging-ympäristö ja CI-palvelin tarkoittavat samaa asiaa"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "3",
      "id": 238,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Tutkiva testaus kannattaa kohdistaa sprintin aikana toteutettuihin uusiin toimintoihin"
        },
        {
          "right": true,
          "text": "Kokenut testaaja voi löytää tutkivaa testaamista käyttäen virheitä, jotka jäävät helposti automatisoitujen testien ulottumattomiin"
        },
        {
          "right": false,
          "text": "Tutkiva testaaminen sopii erityisen hyvin regressiotestaukseen"
        },
        {
          "right": false,
          "text": "Jos ohjelmistoprojektissa tehdään paljon tutkivaa testaamista, ei yksikkö- ja integraatiotestausta tarvitse tehdä"
        },
        {
          "right": false,
          "text": "Tutkiva testaaminen perustuu testitapausten huolelliseen etukäteissuunnitteluun"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "4",
      "id": 241,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Canary releaseissa osa todellisista loppukäyttäjistä ohjataan käyttämään järjestelmän uutta versiota"
        },
        {
          "right": true,
          "text": "Feature toggle on eräs tekniikka canary releasejen toteuttamiseen"
        },
        {
          "right": true,
          "text": "Canary releaseja käytettäessä sovelluksen toimintaa on monitoroitava tarkasti"
        },
        {
          "right": true,
          "text": "Feature togglen avulla koodissa olevia keskeneräisiä toiminnallisuuksia voidaan piilottaa loppukäyttäjiltä"
        },
        {
          "right": false,
          "text": "Käytettäessä canary releaseja, sovelluskehittäjät testaavat sovelluksen toimivuutta ns. staging-palvelimella"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "4",
      "id": 242,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Käytettäessä feature brancheja uusi toiminnallisuus, esim. user story toteutetaan ensin omassa versionhallinnan haarassa, ja yhdistetään kehityksen päähaaraan vasta kun se on valmiina"
        },
        {
          "right": true,
          "text": "Trunk based development ei suosi feature branchien käyttöä, kaikki koodi pyritään integroimaan välittömästi pääkehityshaaraan"
        },
        {
          "right": true,
          "text": "DevOps-toimintamallia sovellettaessa kehittäjät ja järjestelmäylläpitäjät toimivat tiiviissä yhteistyössä"
        },
        {
          "right": true,
          "text": "Infrastructure as Code tarkottaa suurinpiirtein sitä, että sovelluksien käyttämiä palvelinympäristöjä hallinnoidaan koodin avulla käsiteltävillä konfiguraatiotiedostoilla, joita voidaan esim. tallettaa versionhallintaan normaalin ohjelmakoodin tapaan"
        },
        {
          "right": false,
          "text": "Trunk based development on kiinnostava idea, mutta se sopii lähinnä pienten startup-yritysten käyttöön"
        },
        {
          "right": false,
          "text": "Trunk based development -kehitysmallia on mahdotonta soveltaa, jos sovellukseen on toteutettava niin isoja toiminnallisuuksia, että niiden tekemiseen menee kauemmin kuin päivä"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "4",
      "id": 243,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston arkkitehtuuri määrittelee sen rakenteen suuret linjat, eli minkälaisista rakennekomponenteista ohjelmisto koostuu"
        },
        {
          "right": true,
          "text": "Arkkitehtuuri ohjaa sitä miten sovellusta tulee jatkokehittää"
        },
        {
          "right": false,
          "text": "Ohjelmiston toimintaympäristön ja toteutusteknologioiden ei tule koskaan antaa vaikuttaa ohjelmiston arkkitehtuuriin"
        },
        {
          "right": false,
          "text": "Arkkitehtuurityyli määrää sen, mitä luokkia ja metodeja ohjelmistossa on"
        },
        {
          "right": false,
          "text": "Ohjelmiston ei-toiminnallisilla vaatimuksilla ei ole vaikutusta sen arkkitehtuuriin"
        },
        {
          "right": false,
          "text": "Sovelluksen arkkitehtuuri on pysyvä, ts. alussa valittua arkkitehtuuria ei koskaan muuteta."
        }
      ]
    },
    {
      "courseId": "3",
      "part": "4",
      "id": 244,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kerrosarkkitehtuuri tähtää siihen, että tietyn kerroksen koodiin tehtävät muutokset aiheuttaisivat mahdollisimman vähän muutoksia sovelluksen muihin osiin"
        },
        {
          "right": true,
          "text": "Kerrosarkkitehtuuria sovellettaessa käyttöliittymästä huolehtiva koodi on eristetty esimerkiksi sovelluslogiikaasta huolehtivasta koodista"
        },
        {
          "right": true,
          "text": "Mikropalveluarkkitehtuuri mahdollistaa sovelluksen toteuttamisen useita eri ohjelmointikieliä käyttäen"
        },
        {
          "right": false,
          "text": "Mikropalveluarkkitehtuuria sovellettaessa jokainen user story toteutetaan omana mikropalveluna"
        },
        {
          "right": false,
          "text": "Kerrosarkkitehtuurissa eri kerroksilla oleva koodi keskustelee ainoastaan verkon välityksellä, eli esimerkiksi käyttöliittymästä ei koskaan kutsuta suoraan sovelluslogiikkakerroksen metodeja"
        },
        {
          "right": false,
          "text": "Mikropalveluarkkitehtuurin suurimpia etuja on niiden helppo testaaminen ja debuggaaminen"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "4",
      "id": 245,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Inkrementaalinen arkkitehtuuri tarkoittaa sitä, että ohjelman lopullinen arkkitehtuuri muodostuu projektin edetessä"
        },
        {
          "right": true,
          "text": "Inkrementaalista arkkitehtuuria sovellettaessa esimerkiksi sovelluksen kerrosrakenne toteutetaan ainakin jossain muodossa jo varhaisessa vaiheessa projektia, jopa ensimmäisessä sprintissä"
        },
        {
          "right": true,
          "text": "Ketteriä menetelmiä sovellettaessa tunnustetaan se tosiasia, että vaatimusten tapaan saattaa myös arkkitehtuuria joutua mukauttamaan projektin aikana"
        },
        {
          "right": false,
          "text": "Jos kehitystiimi rakentaa arkkitehtuurin inkrementaalisesti, ei arkkitehtuuria dokumentoida millään tavalla"
        },
        {
          "right": false,
          "text": "Walking skeleton tarkoittaa koodia, joka tullaan heittämään pois kun ohjelman ominaisuudet valmistuvat"
        },
        {
          "right": false,
          "text": "Inkrementaalinen suunnittelu ja arkkitehtuuri takaavat sen, että ohjelmistosta tulee rakenteeltaan laadukas"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "4",
      "id": 246,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kapseloinnilla tarkoitetaan toteutustason yksityiskohtien piilottamista"
        },
        {
          "right": true,
          "text": "Metoditason koheesio pyrkii siihen, että yksittäinen metodi keskittyy ainoastaan yhteen asiaan kerrallaan. Jos metodi tekee liian monia asioita, sen koheesio paranee jos metodi jaetaan useammaksi metodiksi"
        },
        {
          "right": true,
          "text": "Mikropalveluissa yksittäisen palvelun koheesion taso on korkea ja ne kapseloivat sisäiset toimintaperiaatteensa muilta palveluilta"
        },
        {
          "right": true,
          "text": "Luokkatason koheesio ja single responsibility -periaate tarkoittavat samaa asiaa"
        },
        {
          "right": false,
          "text": "Ohjelmiston sisäisellä laadulla tarkoitetaan sitä, että koodin käyttämät tietorakenteet ja algoritmit tarjoavat optimaalisen nopean toiminnallisuuden kuhunkin käyttötarkoitukseen"
        },
        {
          "right": false,
          "text": "Single responsibility -periaate ei ole relevantti käytettäessä muita ohjelmointiparadigmoja kuin olio-ohjelmointia"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "4",
      "id": 247,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Code smell eli koodihaju on merkki siitä, että koodin sisäisessä laadussa on todennäköisesti ongelmia"
        },
        {
          "right": true,
          "text": "Tekninen velka on metafora sille, että koodin sisäinen rakenne on heikkoa"
        },
        {
          "right": false,
          "text": "Nykyisten parhaiden käytänteiden mukaan koodi tulee kommentoida huolellisesti, esim. jokaisesta koodissa olevasta muuttujasta tulee selittää mikä tietoa muuttuja tallettaa"
        },
        {
          "right": false,
          "text": "Refaktoroinnilla muutetaan luokkien metodeja siten, että niiden toiminnallisuus vastaa paremmin asiakkaiden tarpeita"
        },
        {
          "right": false,
          "text": "Refaktorointia ei kannata suorittaa jokaisessa sprintissä, se laskisi liikaa kehitystiimin velositeettia"
        },
        {
          "right": false,
          "text": "Teknistä velkaa tulee välttää kaikissa olosuhteissa"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "5",
      "id": 251,
      "title": "Mitkä seuraavista ovat leanin mukaan hukkaa (muda)?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Välivarastointi"
        },
        {
          "right": true,
          "text": "Ylituotanto"
        },
        {
          "right": true,
          "text": "Odotus"
        },
        {
          "right": true,
          "text": "Tuotteessa olevat viat"
        },
        {
          "right": false,
          "text": "Taukojen pitäminen"
        },
        {
          "right": false,
          "text": "Koulutus"
        },
        {
          "right": false,
          "text": "Toimintojen ulkoistaminen"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "5",
      "id": 252,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kaizen tarkoittaa työskentelytapojen jatkuvaan parantamisen kannustavaa asennetta"
        },
        {
          "right": true,
          "text": "Jatkuva parantaminen pyrkii etsimään ongelmien perimmäisen syyn (root cause) ja eliminoimaan sen"
        },
        {
          "right": true,
          "text": "Pull- tai JIT-periaatteilla tarkoitetaan sitä, että tuotetta tai sen tarvitsemia komponentteja valmistetaan vasta tilauksesta, eli ei varalta etukäteen"
        },
        {
          "right": true,
          "text": "Kanban on eräs työkalu pull- tai JIT-periaatteen toteuttamiseen"
        },
        {
          "right": false,
          "text": "Lean pyrkii maksimoimaan tuotantolaitteiden käyttöasteen"
        },
        {
          "right": false,
          "text": "Kaizen ei kosketa yrityksen rivityöntekijöitä, keskitason johto hoitaa kaizeniin liittyvät asiat"
        },
        {
          "right": false,
          "text": "Läpimenoaika (leadtime) tarkoittaa sitä, miten nopeasti jatkuvassa parannuksessa saadaan eliminoitua hukkaa aiheuttavat tekijät"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "5",
      "id": 253,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean suosii periaatetta, jossa päätökset tehdään mahdollisimman myöhäisessä vaiheessa, mutta ei kuitenkaan liian myöhään"
        },
        {
          "right": true,
          "text": "Osassa 2 mainitun 'hyvän backlogin' kriteerejä noudattava backlog on leanin periaatteiden mukainen"
        },
        {
          "right": false,
          "text": "Build quality in -periaatteen mukaan kannattaa keskittyä kalliimpien tuotteiden valmistamiseen. Esim. Applella periaate näkyy siinä, että firmalla ei ole halpoja puhelinmalleja"
        },
        {
          "right": false,
          "text": "Lean pyrkii läpimenoajan (leadtime) optimointiin henkilökohtaisilla bonuksilla"
        },
        {
          "right": false,
          "text": "Vesiputousmallissa suositut, hyvin tarkkaan tehdyt vaatimusmäärittelydokumentit ovat leanin periaatteiden mukaisia"
        },
        {
          "right": false,
          "text": "Vesiputousmallin suosima periaate tehdä sovelluksen testaus erillisenä lopussa tapahtuvana vaiheena on leanin periaatteiden mukainen käytäntö"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "5",
      "id": 254,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean-ideaalin mukainen johtaja hallitsee myös käytännön hands on -työskentelyn"
        },
        {
          "right": true,
          "text": "Tuotekehitykseen sovellettaessa lean pyrkii kiihdyttämään oppimista"
        },
        {
          "right": true,
          "text": "Leanin tuotekehityksen periaatteiden mukaan epävarmat asiat kannattaa selvittää varhaisessa vaiheessa"
        },
        {
          "right": false,
          "text": "Leanin tuotekehityksen 'set based concurrent development'-menetelmän idea on sama kuin iteratiivisessa ohjelmistokehityksessä, tuotetta laajennetaan ja parannellaan vähitellen iteraatio iteraatiolta"
        },
        {
          "right": false,
          "text": "Go see (kenchi genbutsu) -periaateen mukaan työntekijöiden tulee raportoida tekemisistä tarkasti managerille"
        },
        {
          "right": false,
          "text": "Scrum ei ole leanin periaatteiden mukainen, koska se on push-systeemi"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "5",
      "id": 255,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Scrum of scrums on periaate, jonka avulla pyritään hallitsemaan useita kehitystiimejä, jotka työskentelevät saman tuotteen parissa"
        },
        {
          "right": true,
          "text": "SAFe on hyvin tarkkaan dokumentoitu ja runsaasti erilaisia periaatteita ja henkilörooleja sisältävä laajan mittakaavan ketterä menetelmäkehys"
        },
        {
          "right": true,
          "text": "LeSS:iä sovellettaessa oletuksena on, että kehitetään yhtä tuotetta, jolla on yksi product owner. LeSS ei ota kantaa siihen, miten eri tuotteita kehittävät tiimit suhtautuvat toisiinsa"
        },
        {
          "right": false,
          "text": "LeSS lisää Scrumiin joukon kokonaan uudentyyppisiä palavereja sekä henkilörooleja"
        },
        {
          "right": false,
          "text": "LeSS suosittelee jakamaan työtä siten, että esimerkiksi yksi tiimi huolehtii sovelluksen frontendistä, yksi sovelluksen backendista ja yksi sovelluksen tietokannasta"
        },
        {
          "right": false,
          "text": "9 tai enemmän tiimiä sisältävässä LeSS huge -versiossa jokaiselle tiimille on varattu oma product backlog"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "5",
      "id": 256,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ketteriä menetelmiä käytetään nykyään useimpien tutkimusten mukaan yli 50% kaikista ohjelmistoprojekteista"
        },
        {
          "right": true,
          "text": "Tutkimusten mukaan yllättävän monet ketteriä menetelmiä soveltavat eivät kuitenkaan noudata monia ketteryyden perusperiaatteita esimerkiksi lyhyitä iteraatiota"
        },
        {
          "right": true,
          "text": "Erään tutkimuksen mukaan Jatkuva toimittaminen (continuous deployment) on ollut käytössä jopa kolmasosalla vastaajista"
        },
        {
          "right": false,
          "text": "Ketterien menetelmien nousu näyttää olevan takana, esim. Yhdysvaltojen hallituksen alaisissa projekteissa ketteriä menetelmiä ei enää käytetä yhtä paljon kuin esimerkiksi 10 vuotta sitten, kun Scrum-hype oli suurimmillaan"
        },
        {
          "right": false,
          "text": "Tutkimusten mukaan suuret ohjelmistoprojektit onnistuvat suuremmalla todennäköisyydellä kuin pienet projektit"
        },
        {
          "right": false,
          "text": "Tutkimusten mukaan suurin ketteryyden tuoma hyöty on sen kustannustehokkuus"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "6",
      "id": 261,
      "title": "(1) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Smartlyn toimiala on Facebook-mainostus"
        },
        {
          "right": true,
          "text": "Tärkeä motivaatio automaattisille testeille on varmistua siitä, että jo toimineet asiat eivät hajoa kun koodia muokataan"
        },
        {
          "right": true,
          "text": "End to end -testit testaavat järjestelmää kokonaisuudessaan, kurssin käyttämän terminologian <i>järjestelmätestit</i> ovat siis end to end -testejä"
        },
        {
          "right": false,
          "text": "Smartyllä tiimirakene vastaa ohjelmiston arkkitehtuurisia kerroksia, eli esim. sovelluksen käyttöliittymästä on vastuussa oma tiiminsä"
        },
        {
          "right": false,
          "text": "Automatisoidut testit ovat hyvä keino löytää ohjelmistosta kokonaan uudenlaisia bugeja"
        },
        {
          "right": false,
          "text": "Kattava yksikkötestaus on riittävä tapa saavuttaa täysi luottamus sille, että ohjelmisto toimii oikein"
        },
        {
          "right": false,
          "text": "End to end -testeissä kutsutaan myös ulkoisten palveluiden esimerkiksi Facebookin rajapintoja"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "6",
      "id": 262,
      "title": "(2) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "API-testeillä voidaan testata esimerkiksi yksittäistä mikropalvelua kokonaisuudessaan"
        },
        {
          "right": true,
          "text": "Yksikkötestit eivät käytä tietokantaa"
        },
        {
          "right": true,
          "text": "End to end -testit suoritetaan käyttöliittymän läpi"
        },
        {
          "right": true,
          "text": "End to end -testien huono puoli on se, että ne ovat usein riippuvaisia käyttöliittymässä esitettävän datan muodosta"
        },
        {
          "right": false,
          "text": "Integraatiotestit eivät käytä tietokantaa"
        },
        {
          "right": false,
          "text": "Yksikkötestit tekevät usein HTTP-pyyntöjä verkossa oleviin rajapintoihin"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "6",
      "id": 263,
      "title": "(3) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Testipyramidi antaa erään suosituksen sille, kuinka paljon testausta kannattaa kohdentaa eri testauksen tasoille"
        },
        {
          "right": true,
          "text": "Monien startupien tapaan Smartyllä oli tilanne aluksi se, että automatisoituja testejä ei ollut"
        },
        {
          "right": true,
          "text": "Jos koodissa havaitaan bugi, kannattaa bugikorjauksen lisäksi tehdä testit, jotka varmistavat ettei sama bugi palaa koodiin uudelleen"
        },
        {
          "right": false,
          "text": "Kokonaan ilman automaattisia testejä olevan 'legacy'-koodin testauksen automatisointi kannattaa aloittaa yksikkötesteistä"
        },
        {
          "right": false,
          "text": "Startup-yrityksen kannattaa rakentaa kattavat automaattiset testit jo siinä vaiheessa kun ns. 'product market -fit' on vielä löytymättä"
        },
        {
          "right": false,
          "text": "Testipyramidin mukaista jakaumaa eri tason testien määrään suhteen kannattaa noudattaa aina heti ohjelmakomponentin, esim. mikropalvelun toteuttamisen ensimmäisestä päivästä alkaen"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "6",
      "id": 264,
      "title": "(4) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Smartly ei enää käytä ollenkaan end to end -testejä sillä kokemus niistä oli huono, testit rikkoontuivat välillä ilman mitään syytä"
        },
        {
          "right": true,
          "text": "Smartlyllä koodiin tehtävät lisäykset katselmoidaan pull requestien (PR) kautta"
        },
        {
          "right": true,
          "text": "Smartly julkaisee feature togglejen avulla joitain koodiin tulevia muutoksia/toiminnallisuuksia aluksi vain osalle asiakkaista"
        },
        {
          "right": false,
          "text": "Smartlyllä on yhtenäiset testauskäytänteet, tämän takia jokainen tiimi testaa vastuullaan olevaa ohjelmiston osaa samalla tavalla"
        },
        {
          "right": false,
          "text": "Smartlyllä ohjelmiston laadusta vastaa erillinen laadunhallintaan keskittyvä QA-tiimi"
        },
        {
          "right": false,
          "text": "Smartlyllä koodia testataan manuaalisesti ennen kuin se päästetään tuotantokäyttöön"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "6",
      "id": 265,
      "title": "(1) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Saavutettavuus/esteettömyys tarkoittaa sitä, että tuotteen on tarjottava sama kokemus käyttäjän rajoitteista huolimatta"
        },
        {
          "right": true,
          "text": "Käyttökokemussuunnittelun (UX design) on mukautunut ketteryyteen paljon ohjelmistokehitystä hitaammin"
        },
        {
          "right": true,
          "text": "Käyttäjäkeskeinen suunnittelu (User centric design) on iteratiivinen menetelmä käyttökokemussuunnitteluun"
        },
        {
          "right": false,
          "text": "Käyttökokemussuunnittelun (UX design) katsotaan syntyneen 1980-luvulla piilaaksossa Microsoftin tuotekehityslaboratoriossa"
        },
        {
          "right": false,
          "text": "Tarkka, etukäteen tapahtuva suunnittelu on onnistuneen käyttökokemuksen luomisen edellytys"
        },
        {
          "right": false,
          "text": "Käyttäjäkeskeinen suunnittelu (User centric design) määrittelee erään tarkan ohjeiston sille, miten käyttökokemussuunnittelua tulee tehdä"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "6",
      "id": 266,
      "title": "(2) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean UX suosittelee sijoittamaan designerit osaksi ohjelmistokehitystiimejä"
        },
        {
          "right": true,
          "text": "Lean UX pyrkii siihen että työtä edistetään pienissä paloissa ja eritasoisia aikaansaannoksia julkaistaan nopeassa syklissä"
        },
        {
          "right": true,
          "text": "Erehdykset salliva kulttuuri kuuluu Lean UX:ään"
        },
        {
          "right": false,
          "text": "Ketterässä käyttökokemussuunnittelussa (Agile UX) ovat avainasemassa tarkat eli ns. pixel perfect -tasolla tehdyt layout-suunnitelmat"
        },
        {
          "right": false,
          "text": "Lean UX:ssä käyttökokemuksen määrittelee firman johtava suunnittelija, eli ns. UX-ninja"
        },
        {
          "right": false,
          "text": "Lean UX suosittelee että käyttäjätestaus tehdään kontrolloiduissa laboratorio-olosuhteissa"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "6",
      "id": 267,
      "title": "(3) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Design sprintti on menetelmä, jonka avulla käydään lyhyessä ajassa läpi kaikki design-prosessin vaiheet, motivaationa esim. alustavan liiketoimintakonseptin luominen"
        },
        {
          "right": true,
          "text": "Design systeemi määrittelee esimerkiksi yrityksen web-sivuston graafisen ulkoasun"
        },
        {
          "right": true,
          "text": "Design systeemi saattaa tarjota joukon muotoilultaan valmiita käyttöliittymäkomponentteja"
        },
        {
          "right": false,
          "text": "Oikeaoppisessa Lean UX -menetelmässä joka toinen sprintti on Design sprintti ja joka toinen normaali sovelluskehitykseen keskittyvä sprintti"
        },
        {
          "right": false,
          "text": "Design sprintin pituus on aina viikko"
        },
        {
          "right": false,
          "text": "Käytettävyyssuunnittelu on taidetta, tieteellisellä ajattelulla ei ole roolia käytettävyyssuunnittelussa"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "7",
      "id": 271,
      "title": "(1) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Nykyään on tyypillistä, että sovelluskehittäjä joutuu käyttämään useita eri ohjelmointikieliä jopa yhdessä projektissa työskennellessään"
        },
        {
          "right": true,
          "text": "Ei ole olemassa vain yhtä tapaa kouluttautua ohjelmistoalalle"
        },
        {
          "right": false,
          "text": "Ketterän manifestin mukaiset itseorganisoituvat tiimit ovat utopia, niillä ei ole sijaa nykyisessä bisneksessä, tiimien tulee työskennellä tiukan ulkoisen ohjauksen varassa"
        },
        {
          "right": false,
          "text": "Softa-alalla menestyksekkäästi toimimiseen tarvitaan nykyään täysin erilainen mindset, eli mielenlaatu/ajattelutapa kuin 80-luvulla"
        },
        {
          "right": false,
          "text": "Jos osaat hyvin yhden teknologian, pärjäät sen avulla ohjelmistoalalla jopa vuosikymmeniä"
        },
        {
          "right": false,
          "text": "On parasta koostaa ohjelmistotiimi mahdollisimman samankaltaisista ihmisistä, liika erilaisuus ihmisten taustoissa vaikeuttaa asiakkaiden tarpeiden ymmärtämistä"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "7",
      "id": 272,
      "title": "(2) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston uusia versiota kannattaa viedä (eli 'shipata') tuotantoon niin usein kuin mahdollista, jopa yli 10 kertaa päivässä"
        },
        {
          "right": true,
          "text": "Ensimmäisenä mieleen tuleva tekninen ratkaisu kannattaa usein kyseenalaistaa"
        },
        {
          "right": false,
          "text": "Isojen IT-organisaatioiden on huomattavasti helpompi ottaa huomioon asiakkaan tarpeet kuin pienten ketterien tiimien"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjien ei ole tarvetta ymmärtää bisneksen tarpeita tai sovelluksen arkkitehtuuriratkaisuja, riittää että sovelluskehittäjä maksimoi tuotantokäyttöön vietävän koodin määrään"
        },
        {
          "right": false,
          "text": "Sovelluksen laadunhallinta kannattaa tehdä laadunhallintaan varatuissa sprinteissä, joita pidetään noin 4-5 sprintin välein"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "7",
      "id": 273,
      "title": "(3) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Retrospektiiveja ei tulisi jättää pitämättä"
        },
        {
          "right": true,
          "text": "Sprintin aikaisesta työskentelystä noin 10% tulisi kohdistua seuraavien sprinttien aikana toteutettavien storyjen valmisteluun"
        },
        {
          "right": false,
          "text": "Paras sprintin pituus on 4 viikkoa"
        },
        {
          "right": false,
          "text": "Eräs Elisan parhaista käytänteistä ovat ns. tekniset storyt, eli storyt joiden toteuttaminen ei yleensä näy käyttäjälle mitenkään"
        },
        {
          "right": false,
          "text": "Teknistä velkaa ei tule ottaa missään olosuhteissa"
        },
        {
          "right": false,
          "text": "Niin sanotun Nokia-testin voi läpäistä ainoastaan, jos ennen toteutusvaihetta pidetään joukko spesifikaatiosprinttejä, joiden aikana ohjelmisto määritellään tarkasti"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "7",
      "id": 274,
      "title": "(4) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Hyvin toimiva jatkuva integraatio (CI) vaikuttaa parhaimmillaan organisaation suorituskykyyn jopa liiketoiminnan tasolla"
        },
        {
          "right": true,
          "text": "Yli muutaman päivän pituisia feature brancheja ei kannata käyttää"
        },
        {
          "right": true,
          "text": "Jos jatkuvan integraation (CI) 'build' hajoaa, eli koodi ei käänny, tai jokin testi ei mene läpi, tulee ongelma korjata heti"
        },
        {
          "right": true,
          "text": "Sen koodin määrä joka ei ole tuotantokäytössä tulee minimoida"
        },
        {
          "right": false,
          "text": "Jatkuva integraatio (CI) toimii ainoastaan sellaisissa ohjelmistoissa, joita kehittää yksi tai korkeintaan pari tiimiä. Isommassa skaalassa ohjelmistoja kehitettäessä CI:n käyttö olisi liian suuri hidaste"
        },
        {
          "right": false,
          "text": "Jatkuva integraation (CI) soveltaminen onnistuu ainoastaan pilvipalveluina toteutetuille web-sovelluksille"
        },
        {
          "right": false,
          "text": "CI-palvelimen status, eli onko kaikki hyvin vai onko esim. testeissä ongelmia, tulee pitää kehitystiimin sisäisenä asiana"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "7",
      "id": 279,
      "title": "(5) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Suurin hukka ohjelmistokehityksessä on se, että rakennetaan asiakkaan tarpeiden kannalta kokonaan vääränlainen järjestelmä"
        },
        {
          "right": true,
          "text": "Lean-startup-menetelmällä testataan idean tarpeellisuutta/hyödyllisyyttä oikeilla käyttäjillä"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä jokaisella tiimillä voi olla oma Definition of done"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä osan tiimeistä kannattaa erikoistua joihinkin osa-alueisiin, esimerkiksi testaamiseen"
        },
        {
          "right": false,
          "text": "Ohjelmistokehittäjille kannattaa antaa henkilökohtaisia suoriutumistavoitteita jotka vaikuttavat suoraan palkkaukseen, näin myös tiimit saadaan työskentelemään mahdollisimman tehokkaasti"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä eri tiimien jäsenet eivät yleensä keskustele suoraan keskenään, keskustelu hoidetaan tiimien scrum masterien kautta"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "7",
      "id": 275,
      "title": "(1) Mitkä seuraavista Marko Klemetin luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Erään määritelmän mukaan DevOps tarkoittaa sovelluskehittäjien ja järjestelmäylläpitäjien välistä yhteistyötä"
        },
        {
          "right": true,
          "text": "DevOpsiin liittyvät työkalut auttavat keräämään monenlaista informaatiota tuotantoympäristöstä ja täten tekemään sovelluksen toiminnallisuuteen liittyviä kokeiluja"
        },
        {
          "right": true,
          "text": "Sovellus tulisi viedä tuotantoympäristöön heti kehitystyön alkuvaiheessa, jopa jo ensimmäisenä päivänä, ennen kuin sovelluksessa on juurikaan valmiina olevaa toiminnallisuutta"
        },
        {
          "right": true,
          "text": "Eräs pilviympäristöjen hyvistä puolista on se, että ne antavat sovelluskehittäjille mahdollisuuden julkaista koodia suoraan tuotantoympäristöön"
        },
        {
          "right": false,
          "text": "DevOpsia soveltamalla on mahdollista korvata testausautomaatio"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "7",
      "id": 276,
      "title": "(2) Mitkä seuraavista Marko Klemetin luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Design-systeemi dokumentoi yrityksen visuaalisen ilmeen ja saattaa jopa tarjota uudelleenkäytettäviä, visuaalista ilmettä noudattavia käyttöliittymäkomponentteja"
        },
        {
          "right": true,
          "text": "ROBOT-framework on hyväksymistestauksen työkalu, missä testit kirjoitetaan asiakkaan ymmärtämällä kielellä"
        },
        {
          "right": true,
          "text": "GitHub actions ja Jenkins ovat jatkuvaan integraatioon (CI) sopivia palveluita"
        },
        {
          "right": false,
          "text": "Paras käytänne DevOpsin soveltamiseen on muodostaa yritykseen erillinen DevOps-tiimi, joka hoitaa tuotantojärjestelmien ja deployment-pipelinen konfiguroinnin"
        },
        {
          "right": false,
          "text": "Jatkuvan integraation (CI) ja jatkuvan julkaisun (CD) konfiguraatioita ei kannata tallettaa versionhallintaan"
        },
        {
          "right": false,
          "text": "DevOpsin käyttöönotossa tärkeimmässä asemassa on sopivien työkalujen tehokas käyttö"
        }
      ]
    },
    {
      "id": 1,
      "part": "1",
      "courseId": "1",
      "title": "Mitkä seuraavista ovat ohjelmiston elinkaaren vaiheita (lifecycle phases)?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "asiakkaan vaatimusten selvittäminen"
        },
        {
          "right": true,
          "text": "testaus"
        },
        {
          "right": true,
          "text": "ohjelmointi"
        },
        {
          "right": true,
          "text": "ohjelmiston rakenteen suunnittelu"
        },
        {
          "right": true,
          "text": "käytössä jo olevan ohjelmiston laajentaminen"
        },
        {
          "right": false,
          "text": "ohjelmiston dokumentointi"
        },
        {
          "right": false,
          "text": "suorituskyvyn parantaminen"
        },
        {
          "right": false,
          "text": "asiakastapaamiset"
        }
      ]
    },
    {
      "courseId": "1",
      "title": "Mitkä seuraavista vesiputousmallia koskevista väitteistä ovat  'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vesiputousmallia käytettäessä tulee määrittelyn ja suunnittelun tuotokset dokumentoida huolellisesti."
        },
        {
          "right": true,
          "text": "Jos käytetään vesiputousmallia ohjelmoijat eivät tyypillisesti osallistu vaatimusmäärittelyyn"
        },
        {
          "right": false,
          "text": "Yksi ensimmäisistä vesiputousmallin puolestapuhujista oli Winston Royce"
        },
        {
          "right": false,
          "text": "Yhdysvaltojen puolustusministeriö eli Department of Defence ei tänä päivänäkään salli muiden ohjelmistotuotantotapojen kuin vesiputousmallin käyttöä"
        },
        {
          "right": false,
          "text": "Avaruussukkuloiden käyttämä ohjelmisto rakennettiin vesiputousmallilla"
        },
        {
          "right": false,
          "text": "Vesiputousmalli sopii erityisen hyvin pitkäkestoisiin projekteihin sillä niissä on paremmin aikaa suorittaa aluksi perusteellinen vaatimusmäärittely"
        },
        {
          "right": false,
          "text": "Vesiputousmalli sopii erityisen hyvin pitkäkestoisiin projekteihin sillä niissä on paremmin aikaa suorittaa lopuksi kattava testaus"
        }
      ],
      "part": "1",
      "id": 2
    },
    {
      "courseId": "1",
      "title": "Seuraavassa luetellut ovat vesiputousmallin heikkouksia:",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Asiakkaan ei ole helppoa ilmaista sitä miten tilattavan ohjelmiston tulisi toimia"
        },
        {
          "right": true,
          "text": "Jos sovelluksen toteutuksen yksityiskohtia ei ollenkaan huomioida määrittelyn yhteydessä, saatetaan vaatimusmäärittelyyn kirjata asioita joita on aivan liian kallista toteuttaa."
        },
        {
          "right": true,
          "text": "Myöhäisessä vaiheessa havaitut ongelmat saattavat johtaa suuria kustannuksia aiheuttaviin muutoksiin."
        },
        {
          "right": true,
          "text": "Vesiputousmalli ei ota huomioon sovelluksen kehityksen aikana tapahtuvia mahdollisia bisnesympäristön muutoksia"
        },
        {
          "right": false,
          "text": "Vesiputousmalli asettaa liikaa testaamiseen liittyvää vastuuta ohjelmoijille"
        },
        {
          "right": false,
          "text": "Vesiputousmalli ei ota tarpeeksi huomioon kehitystiimin johtajien mielipiteitä"
        }
      ],
      "part": "1",
      "id": 3
    },
    {
      "courseId": "1",
      "title": "Ketterän manifestin ja sen periaatteiden mukaan",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Projektin edistymistä mitataan ensisijaisesti toimivan ohjelmiston etenemisellä"
        },
        {
          "right": true,
          "text": "Muutokseen reagoiminen on tärkeämpää kuin etukäteen laadittujen suunnitelmien noudattaminen"
        },
        {
          "right": true,
          "text": "Asiakkaalle kannattaa toimittaa käyttökelpoisia ohjelmiston versioita niin usein kuin mahdollista"
        },
        {
          "right": false,
          "text": "Dokumentointi ei ole tärkeää"
        },
        {
          "right": false,
          "text": "Yksilön vaikutus ohjelmistoprojektissa kannattaa minimoida"
        },
        {
          "right": false,
          "text": "Kommunikointi kannattaa ensisijaisesti hoitaa pikaviestimien avulla"
        },
        {
          "right": false,
          "text": "Tärkeiden deadlinejen koittaessa kehitystiimin tulee työskennellä normaalia suuremmalla intensiteetillä jotta ketteryys säilytetään"
        }
      ],
      "part": "1",
      "id": 4
    },
    {
      "courseId": "1",
      "title": "Ketterän manifestin periaatteiden mukaan",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sen lisäksi, että ketterässä kehityksessä vaatimukset voivat vaihtua, voi myös tiimi vaihtaa tarpeen mukaan toimintatapojaan"
        },
        {
          "right": true,
          "text": "Ohjelmistokehittäjille kannattaa antaa vapaus ja vastuu päättää omista työtavoista"
        },
        {
          "right": true,
          "text": "On oleellista että ohjelmistokehittäjät käyvät tiivistä interaktiota loppukäyttäjien kanssa"
        },
        {
          "right": true,
          "text": "Kannattaa suosia mahdollisimman yksinkertaisia ratkaisuja"
        },
        {
          "right": false,
          "text": "Ohjelmistoarkkitehdin rooli on keskeinen projektien onnistumisen kannalta"
        },
        {
          "right": false,
          "text": "Ketterässä kehittämisessä ohjelmiston laadulla ei ole kovin suurta merkitystä, pääasia on toteuttaa asiakkaalle mahdollisimman nopeasti uutta toiminnallisuutta"
        },
        {
          "right": false,
          "text": "Ohjelmistosta ei kannata tuottaa uusia versiota liian usein"
        }
      ],
      "part": "1",
      "id": 5
    },
    {
      "courseId": "1",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Product ownerin kannattaa olla hyvin selvillä ohjelmiston käyttäjien tarpeista"
        },
        {
          "right": true,
          "text": "Scrum ei suosittele yli kymmenen hengen tiimejä"
        },
        {
          "right": true,
          "text": "Scrumissa on mahdollista ja jopa suositeltavaa vaihtaa tarpeen mukaan kehitystiimin toimintatapoja"
        },
        {
          "right": false,
          "text": "Sprintin pituuden saa valita täysin vapaasti"
        },
        {
          "right": false,
          "text": "Scrumin tehokas soveltaminen on suoraviivaista sillä sen 'pelisäännöt' määrittelevä Scrum guide on vaan noin 15 sivua pitkä."
        },
        {
          "right": false,
          "text": "Scrum antaa tarkan ohjeistuksen sille miten sovelluskehittäjän tulee toimia"
        }
      ],
      "part": "1",
      "id": 6
    },
    {
      "courseId": "1",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Product owner määrää sen mitä ja missä järjestyksessä toiminnallisuutta toteutetaan sovellukseen"
        },
        {
          "right": true,
          "text": "Jos joku tiimin ulkopuolinen pyytää sprintin aikana kehitystiimiä toteuttamaan välittömästi jonkin uuden ja briljantin idean, tulee scrum masterin puuttua asiaan"
        },
        {
          "right": true,
          "text": "Scrum master auttaa byrokraattisten ongelmien (esim. kehitystiimillä ei ole käytössä sopivaa palvelinympäristöä) ratkaisemisessa"
        },
        {
          "right": false,
          "text": "Scrum master antaa työmääräarviot sovellukseen toteutettaville toiminnallisuuksille"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjät eivät saa lisätä uusia vaatimuksia product backlogille ilman product ownerin lupaa"
        },
        {
          "right": false,
          "text": "Scrum master päättää minkä asian parissa kukin kehitystiimin jäsen sprintin aikana työskentelee"
        },
        {
          "right": false,
          "text": "Product owner työskentelee scrum masterin alaisuudessa"
        }
      ],
      "part": "1",
      "id": 7
    },
    {
      "courseId": "1",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kehittäjätiimissä tulisi olla osaamista myös sovelluksen testaamiseen"
        },
        {
          "right": true,
          "text": "Scrum suosittelee että tiimi määrittelee yhteisen laatustandardin, joka määrittelee mitä kaikkea toiminnallisuuden toteuttaminen valmiiksi asti pitää sisällään"
        },
        {
          "right": false,
          "text": "Lähellä deadlineja myös puutteellisesti toteutetut käyttäjävaatimukset voidaan hyväksyä osaksi sprintissä julkaistavaa ohjelmistoversiota"
        },
        {
          "right": false,
          "text": "Scrum master määrittelee kehitystiimin työskentelytavat"
        },
        {
          "right": false,
          "text": "Kehitystiimi saa itse valita mitä käyttäjän vaatimuksia se kussakin sprintissä toteuttaa"
        },
        {
          "right": false,
          "text": "Yhden sprintin aikana toteutetut vaatimukset testataan yleensä vasta seuraavassa sprintissä"
        },
        {
          "right": false,
          "text": "Scrum suosittelee, että järjestelmäylläpitäjät eivät työskentele osana Scrum-tiimejä"
        }
      ],
      "part": "1",
      "id": 8
    },
    {
      "courseId": "1",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sprintin suunnittelussa päätetään mitä seuraavan sprintin aikana on tarkoitus toteuttaa"
        },
        {
          "right": true,
          "text": "Daily scrum -palavereissa on tarkoitus tuoda esiin seikkoja, jotka mahdollisesti hidastavat kehitystyötä"
        },
        {
          "right": true,
          "text": "Sprintin katselmointien (sprint review) yhteydessä saatetaan product backlogille lisätä uusia vaatimuksia"
        },
        {
          "right": false,
          "text": "Product owner ei osallistu sprintin suunnitteluun. Sille ei ole tarvetta, sillä kehittäjätiimi työskentelee itseorganisoituvasti"
        },
        {
          "right": false,
          "text": "Termit sprint backlog ja product backlog tarkottavat käytännössä samaa"
        },
        {
          "right": false,
          "text": "Asiakkaat voivat antaa palautetta sovelluksesta Daily scrum -palaverissa"
        },
        {
          "right": false,
          "text": "Sprintin katselmoinnissa (sprint review) jokainen sovelluskehittäjä raportoi omista sprintin aikaisista tekemisistään scrum masterille"
        }
      ],
      "part": "1",
      "id": 9
    },
    {
      "courseId": "1",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Retrospektiivin tarkoituksena on optimoida sovelluskehittäjien työskentelytapaa"
        },
        {
          "right": true,
          "text": "Scrum ei ota kantaa siihen miten sovellus testataan"
        },
        {
          "right": true,
          "text": "Inspect-and-adapt -periaatteen takia product backlog saatetaan joutua priorisoimaan uudelleen"
        },

        {
          "right": false,
          "text": "Retrospektiivissä priorisoidaan product backlog tarpeen vaatiessa uudelleen"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjien ei kannata paljastaa sprintin alussa esiin tulevia vaikeuksia. Koska tiimit ovat itseorganisoituja, ei ole mitään tarvetta kertoa ongelmista ulkopuolisille liian aikaisin, sillä ongelmat ratkeavat yleensä ajan kanssa"
        },
        {
          "right": false,
          "text": "ScrumBut sopii erityisesti suurien ohjelmistoprojektien hallitsemiseen"
        }

      ],
      "part": "1",
      "id": 10
    },
    {
      "courseId": "1",
      "part": "2",
      "id": 11,
      "title": "Mitkä seuraavista vaatimusmäärittelyä koskevista väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vaatimusmäärittelyn aikana selvitetään mitä toiminnallisuutta kehitteillä olevaan ohjelmistoon halutaan"
        },
        {
          "right": true,
          "text": "Vaatimusmäärittelyn aikana selvitetään minkälaisessa toimintaympäristössä kehitettävän sovelluksen on tarkoitus toimia"
        },
        {
          "right": true,
          "text": "Lainsäädännölliset rajoitukset, kuten GDPR tulee huomioida sovelluksen vaatimusmäärittelyn aikana"
        },
        {
          "right": false,
          "text": "Eräs verkkokaupan laatuvaatimus (quality attribute) voisi olla 'Asiakas voi lisätä tuotteen ostoskoriin'"
        },
        {
          "right": false,
          "text": "Eräs verkkokaupan toiminnallinen (functional requirement) vaatimus voisi olla 'Verkkokauppan on toimittava kaikilla moderneilla web-selaimella'"
        },
        {
          "right": false,
          "text": "Vaatimusten validoinnilla tarkoitetaan niiden dokumentoimista kirjallisessa muodossa, esim. ohjelmistotiimin Wikisivulla"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "2",
      "id": 12,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "MVP:n (minimal viable product) avulla voidaan tutkia ideoiden, esim. ohjelmiston potentiaalisten uusien ominaisuuksien, käyttökelpoisuutta"
        },
        {
          "right": true,
          "text": "Lean-startup-menetelmän tarkoituksena on oppia käyttäjien mieltymyksiä seuraamalla miten he sovellusta käyttävät"
        },
        {
          "right": false,
          "text": "A/B-testauksen avulla voidaan varmistua että järjestelmä toimii oikein poikkeuksellisissakin tilanteissa"
        },
        {
          "right": false,
          "text": "Vesiputousmallin hyvä puoli on se, että vaatimusmäärittelyä voidaan tarkentaa koko ohjelmistokehityksen ajan"
        },
        {
          "right": false,
          "text": "Eräs ketterien menetelmien ongelmista on se, että asiakas ei osaa ilmaista vaatimuksia riittävän hyvin ohjelmistokehitysprojektien alussa"
        },
        {
          "right": false,
          "text": "Lean startup -menetelmä sopii epämääräisyytensä takia oikeastaan vaan startup-yrityksille"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "2",
      "id": 13,
      "title": "Mitkä seuraavista user storyja koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "User storylle kannattaa kirjata hyväksymäkriteerit, eli esim. joukko testejä joiden avulla voidaan todeta storyn olevan toteutettu halutulla tavalla"
        },
        {
          "right": true,
          "text": "Ennen user storyn kuvaaman toiminnallisuuden toteuttamista on oleellista kommunikoida riittävästi product ownerin tai asiakkaan edustajan kanssa"
        },
        {
          "right": true,
          "text": "'Opiskelijan tulee pystyä tarkastelemaan seuraavan periodin opetustarjontaa' on kohtuullisen hyvä muotoilu user storylle"
        },
        {
          "right": false,
          "text": "User storyyn kirjataan tarkasti kaikki loppukäyttäjän sille asettamat vaatimukset"
        },
        {
          "right": false,
          "text": "'Opiskelijoiden tiedot talletetaan tietokantaan' on hyvä muotoilu user storylle"
        },
        {
          "right": false,
          "text": "Mike Cohn ja Ron Jeffries ovat erimielisiä siitä, mitä user storyn määritelmä pitää sisällään"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "2",
      "id": 14,
      "title": "Mitkä seuraavista user storyja koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": false,
          "text": "User storyn tekstuaalinen kuvaus on aina kirjattava muodossa 'As a _user_, I want _functionality_ so that _business value_'"
        },
        {
          "right": false,
          "text": "Kaikki product backlogille asti päätyvät user storyt ovat projektin kannalta suunilleen yhtä tärkeitä saada toteutettua"
        },
        {
          "right": false,
          "text": "User storyjen on aina noudatettava INVEST-kriteerejä"
        },
        {
          "right": false,
          "text": "Jos user story lisätään product backlogille, sen sisältöä ei saa enää muuttaa"
        },
        {
          "right": false,
          "text": "Suuren teknisen riskin sisältävän toiminnallisuuden kuvaamat user storyt kannattaa toteuttaa vasta ihan projektin lopussa, näin niissä epäonnistuminen ei laske liian aikaisessa vaiheessa sovelluskehittäjien mielialaa"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "2",
      "id": 15,
      "title": "Mitkä seuraavista user storyjen estimointia koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Suhteellisessa estimoinnissa verrataan user storyjen työmäärää muiden user storyjen vaatimaan työmäärään"
        },
        {
          "right": true,
          "text": "Työmääräarvioissa tulee huomioida definition of done eli projektissa sovittu yleinen laatutaso"
        },
        {
          "right": true,
          "text": "Työmääräarviot auttavat asiakasta user storyjen priorisoinnissa"
        },
        {
          "right": false,
          "text": "On kehitetty menetelmiä (esim. planning poker), joiden avulla ohjelmiston tekemiseen vaadittava työmäärä voidaan arvioida kohtuullisen tarkasti jo ennen projektin käynnistymistä"
        },
        {
          "right": false,
          "text": "Ketterien menetelmien parhaiden käytänteiden mukaista on antaa product ownerin ja scrum masterin hoitaa työmääräarviointi"
        },
        {
          "right": false,
          "text": "Työmääräarvioita ei tule muuttaa kesken projektin, sillä ne ovat lupaus asiakkaalle siitä milloin sovellus tulee valmistumaan"
        },
        {
          "right": false,
          "text": "Cone of uncertainity kuvaa sitä, että mitä kokeneempi sovelluskehittäjä on, sitä parempia työmääräarvioita hän pystyy tekemään"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "2",
      "id": 16,
      "title": "Mitkä seuraavista hyvää product backlogia koskevista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "User storyjen prioriteetti voi muuttua ajan kuluessa"
        },
        {
          "right": true,
          "text": "Sprinttiin toteutettavaksi valittavien user storyjen tulee olla riittävän pieniä"
        },
        {
          "right": true,
          "text": "Backlogille lisätään tarpeen mukaan uusia user storyja"
        },
        {
          "right": false,
          "text": "Backlogin sisältöä saa muuttaa ainoastaan sprintin suunnittelukokouksissa"
        },
        {
          "right": false,
          "text": "Jokaisen backlogille lisätyn user storyn täytyy aina sisältää tarkat hyväksymäkriteerit"
        },
        {
          "right": false,
          "text": "Jokainen backlogilla oleva user story täytyy toteuttaa, muuten projekti tuomitaan epäonnistuneeksi"
        },
        {
          "right": false,
          "text": "Kun user story on toteutettu valmiiksi, sanotaan että story on ready"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "2",
      "id": 17,
      "title": "Mitkä seuraavista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Tuotteen tai julkaisun burndown-kaavion avulla pystytään visualisoimaan jäljellä olevaa tekemättömän työn määrää"
        },
        {
          "right": true,
          "text": "User story mapping -tekniikka ryhmittelee user storyt toiminnallisiin loogisiin kokonaisuuksiin"
        },
        {
          "right": false,
          "text": "Tiimin velositeetilla tarkoitetaan sitä kuinka monta riviä koodia tiimi pystyy keskimäärin tuottamaan yhden sprintin aikana"
        },
        {
          "right": false,
          "text": "Velositeetin perusteella voidaan helposti vertailla mikä firman ohjelmistokehitystiimeistä on suorituskyvyltään paras"
        },
        {
          "right": false,
          "text": "Tiimin velositeettiin lasketaan jokainen sprintin aikana tehty koodirivi"
        },
        {
          "right": false,
          "text": "NoEstimates-liike on sitä mieltä että user storyjen estimointia ei tarvita ja siitä ei ole mitään hyötyä"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "2",
      "id": 18,
      "title": "Mitkä seuraavista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ei ole hyvä ottaa sprinttiin toteutettavaksi sellaista user storya jonka vaatimasta työmäärästä ei ole kellään minkäänlaista käsitystä"
        },
        {
          "right": true,
          "text": "Product owner pystyy priorisoinnin avulla vaikuttamaan siihen, mitä user storyja sprinttiin valitaan"
        },
        {
          "right": true,
          "text": "Velositeetin avulla voidaan arvioida kuinka paljon työtä yhteen sprinttiin kannattaa ottaa"
        },
        {
          "right": false,
          "text": "Sprintin tavoitteella tarkoitetaan sprinttiin valittuja user storyja"
        },
        {
          "right": false,
          "text": "Product owner määrää kuinka monta user storya kehitystiimi ottaa tiettyyn sprinttiin toteutettavaksi"
        },
        {
          "right": false,
          "text": "Jos user story on liian suuri toteutettavaksi yhdessä sprintissä, se kannattaa jakaa kahtia siten, että toinen keskittyy pelkään käyttöliittymään ja toinen bisneslogiikkaan ja tietokantaan"
        },
        {
          "right": false,
          "text": "Spike-ratkaisuilla saadaan aina nopeutettua sovelluskehitystä"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "2",
      "id": 19,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sprintin suunnittelun yhteydessä joudutaan miettimään myös sovelluksen toteutustason asioita"
        },
        {
          "right": true,
          "text": "Taskboardiksi organisoitu sprint backlog visualisoi kunkin tehtävän eli taskin statuksen"
        },
        {
          "right": false,
          "text": "Sprint backlogille laitettavat taskit tulee aina kirjoittaa asiakkaan ymmärtämällä kielellä"
        },
        {
          "right": false,
          "text": "Product owner määrää mitä sarakkeita sprintin backlogina toimivalla taskboardilla on"
        },
        {
          "right": false,
          "text": "Sprintin burndown-käyrän avulla on mahdollista seurata kuinka paljon työtunteja kehittäjillä on vielä jäljellä kyseisessä sprintissä"
        },
        {
          "right": false,
          "text": "Jos taskien työmäärä on arvioitu tunteina, tulee taskiin käytetty työaika päivän päätteeksi aina vähentää työmääräarviosta"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "2",
      "id": 20,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "WIP-rajoitteiden avulla voidaan yrittää pienentää riskiä sille, että sprintin aikana ehditään toteuttamaan useita user storyja ainoastaan osittain"
        },
        {
          "right": true,
          "text": "Retrospektiivi on hyvä hetki tarkastella ja modifioida sprintin taskboardia, esim. lisätä siihen WIP-rajoitteita"
        },
        {
          "right": true,
          "text": "On itseasiassa hiukan kiistanalaista kannattaako sprint backlogilla oleville taskeille antaa työmääräarvioita"
        },
        {
          "right": false,
          "text": "ScrumBan-menetelmässä noudatetaan aina 2 viikon pituisia sprinttejä"
        },
        {
          "right": false,
          "text": "ScrumBan-menetelmässä on tyypillistä, että jokainen sovelluskehittäjä työskentelee yhtä aikaa usean eri user storyn parissa"
        },
        {
          "right": false,
          "text": "Backlog grooming tehdään aina kahden sprintin välissä"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "3",
      "id": 31,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vesiputousmallissa asiakas validoi vaatimukset lukemalla vaatimusmäärittelyn tuloksena olevaa dokumentaatiota"
        },
        {
          "right": true,
          "text": "Staattisen analyysin avulla voidaan tarkastella automatisoidusti noudattaako koodi määriteltyjä tyyliseikkoja, esim. oikeaoppista sisennystä"
        },
        {
          "right": true,
          "text": "Pariohjelmoinnin on todettu vähentävän koodiin jäävien bugien määrää"
        },
        {
          "right": false,
          "text": "Koodin katselmoinnissa testataan kaatuuko sovellus sattumanvaraisilla syötteillä"
        },
        {
          "right": false,
          "text": "Ohjelmiston verifioinnilla tarkoitetaan sen varmistamista, että ollaan ylipäätään tekemässä ohjelmistoa, joka on käyttäjän tarpeisiin sopiva"
        },
        {
          "right": false,
          "text": "Ketterät menetelmät ja vesiputousmalli poikkeavat monin paikoin, mutta vaatimusten validointi tapahtuu molemmissa suunilleen samalla tavalla"
        },
        {
          "right": false,
          "text": "XP:n koodin yhteisomistajuuden periaate tarkoittaa sitä, että koodi julkaistaan Open source -lisenssillä kaikkien vapaaseen käyttöön"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "3",
      "id": 32,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston ulkoisella laadulla tarkoitetaan sitä, onko ohjelmisto sopiva käyttötarkoitukseensa, eli toimiiko se niin kuin käyttäjä haluaa ja olettaa"
        },
        {
          "right": true,
          "text": "Järjestelmätestauksessa sovelluksen toimintaa tutkitaan usein saman rajapinnan kautta, miten loppukäyttäjä sovellusta käyttää"
        },
        {
          "right": true,
          "text": "Testitapauksia mietittäessä kannattaa valita sellaisia testisyötteitä, jotka toimivat järjestelmän kannalta erilaisella tavalla, eli mitkä eivät kuulu samaan ekvivalenssiluokkaan"
        },
        {
          "right": false,
          "text": "Käyttäjän hyväksymistestauksessa verrataan sovellusta toimintaa vaatimusmäärittelyyn"
        },
        {
          "right": false,
          "text": "Black box -testauksen suorittavat aina sovelluskehittäjät"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "3",
      "id": 33,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Yksikkötestaus on useimmiten ns. developer-testausta, eli sovelluskehittäjien vastuulla"
        },
        {
          "right": true,
          "text": "Huono sisäinen laatu saattaa vaikeuttaa sovelluksen jatkokehittämistä"
        },
        {
          "right": true,
          "text": "Haarautumakattavuutta mittaamalla voidaan löytää ehtolauseita, joiden kaikkia haaroja ei ole testattu"
        },
        {
          "right": true,
          "text": "Mutaatiotestauksen ideana on varmistaa, että testit huomaavat sen jos koodiin tulee bugeja"
        },
        {
          "right": false,
          "text": "Lasilaatikkotestauksella testataan sovelluksen tarjoamaa käyttökokemusta, eli se kohdistuu lähinnä käyttöliittymän testaamiseen"
        },
        {
          "right": false,
          "text": "Jos koodin rivikattavuus on 100%, voidaan olla lähes varmoja, että koodi toimii oikein"
        },
        {
          "right": false,
          "text": "Yksikkötestaus suoritetaan useimmiten ohjelman tilaajaorganisaation toimesta"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "3",
      "id": 34,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Integraatiotestauksessa pyritään varmistamaan sovelluksen suurempien, useimmista luokista tai moduuleista koostuvien kokonaisuuksien toiminta"
        },
        {
          "right": true,
          "text": "Regressiotestaus pyrkii varmistamaan, että ohjelmiston jo aiemmin toimineet osat eivät hajoa uusien muutosten yhteydessä"
        },
        {
          "right": true,
          "text": "Regressiotestejä on mahdollista tehdä Pythonin unittest-kirjastolla"
        },
        {
          "right": false,
          "text": "Eräs ketterän kehityksen hyvistä puolia on se, että regressiotestaukselle ei käytännössä ole mitään tarvetta"
        },
        {
          "right": false,
          "text": "Ketterässä kehityksessä koodin integraatiotestauksen suorittaa kehittäjäorganisaation QA-tiimi"
        },
        {
          "right": false,
          "text": "Ketterä kehitys ja vesiputousmalli ovat monin paikoin hyvin erilaisia menetelmiä. Koodin integrointi ja integraatiotestaus tapahtuu kuitenkin molemmissa samalla tavalla"
        },
        {
          "right": false,
          "text": "Regressiotestaus tapahtuu lähes aina manuaalisesti"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "3",
      "id": 35,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Oikeaoppista TDD:tä sovellettaessa kirjoitetaan käytännössä aina yksi testi joka ei mene läpi ja sen jälkeen mahdollisimman yksinkertainen koodi, joka läpäisee testin"
        },
        {
          "right": true,
          "text": "Oikeaoppista TDD:tä sovellettaessa koodin sisäistä rakennetta parannellaan jos huomataan sen rapistuneen, tällöin testien halutaan edelleen menevän läpi"
        },
        {
          "right": true,
          "text": "Mock-olioita käytetään testauksessa varmistamaan, että testattava olio tai metodi kommunikoi riippuvuuksiensa kanssa oikein"
        },
        {
          "right": false,
          "text": "TDD:n ikävä puoli on se, että koodista saattaa tulla sen soveltamisen seurauksena ylläpidettävyydeltään huonoa"
        },
        {
          "right": false,
          "text": "TDD soveltuu erityisen hyvin ns. legacy-järjestelmien, eli vanhojen ja ylläpidettävyyden kannalta hankalien ohjelmistojen laajentamisen välineeksi"
        },
        {
          "right": false,
          "text": "Oikeaoppista TDD:tä käytettäessä ohjelmoitavat luokat ja metodit tulee aina suunnitella erittäin tarkasti ennen ohjelmoinnin aloittamista"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "3",
      "id": 36,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Integraatiohelvetti viittaa siihen, että vasta ohjelmintivaiheen lopussa tapahtuva luokkien ja komponenttien integrointi aiheuttaa useimmiten suuria ongelmia, riippumatta siitä miten huolellisesti ohjelmisto on suunniteltu"
        },
        {
          "right": true,
          "text": "Jatkuva integraatio pyrkii tuomaan koodin komponenteissa olevat yhteensopivuusongelmat esille niin nopeasti kuin mahdollista"
        },
        {
          "right": true,
          "text": "On oleellista jatkuvan integraation suorittamisen kannalta, että Python-projektissa tiedosto pyproject.toml on lisätty versionhallintaan"
        },
        {
          "right": false,
          "text": "Smoke testiksi kutsutaan testiä, missä järjestelmä yritetään saada kaatumaan tai 'savuamaan' kuormittamalla sitä äärimmäisen suurella operaatiomäärällä"
        },
        {
          "right": false,
          "text": "Jatkuvan integraation noudattaminen on helppoa, riittää kun joku konfiguroi tiimille  esim GitHub Actionin"
        },
        {
          "right": false,
          "text": "Jos jatkuvan integraation palvelin huomaa koodissa jonkin ongelman, riittää että ongelma korjataan seuraavan sprintin alkuun mennessä"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "3",
      "id": 37,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Jatkuva toimittaminen (continuous deployment) vaatii erittäin suurta automaation astetta testauksen ja sovelluksen tuotantoon viemisen suhteen"
        },
        {
          "right": true,
          "text": "Jatkuvaa toimitusvalmius (continuous delivery) automatisoi ohjelmiston laadunhallinnan, mutta jättää ihmisen ratkaistavaksi missä vaiheessa uusia versiota julkaistaan loppukäyttäjille"
        },
        {
          "right": true,
          "text": "Staging-ympäristön on konfuguraatioiltaan syytä olla mahdollisimman lähellä sovelluksen tuotantoympäristöä"
        },
        {
          "right": false,
          "text": "Build pipelinen käyttö nopeuttaa ohjelmakoodin kääntämistä rinnakkaistamalla käännöksen vaiheet useille eri koneille"
        },
        {
          "right": false,
          "text": "Jatkuva toimittaminen (continuous deployment) sopii ainoastaan hyvin pienille yrityksille, esimerkiksi alkuvaiheessa oleville start upeille"
        },
        {
          "right": false,
          "text": "Staging-ympäristö ja CI-palvelin tarkoittavat samaa asiaa"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "3",
      "id": 38,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Tutkiva testaus kannattaa kohdistaa sprintin aikana toteutettuihin uusiin toimintoihin"
        },
        {
          "right": true,
          "text": "Kokenut testaaja voi löytää tutkivaa testaamista käyttäen virheitä, jotka jäävät helposti automatisoitujen testien ulottumattomiin"
        },
        {
          "right": false,
          "text": "Tutkiva testaaminen sopii erityisen hyvin regressiotestaukseen"
        },
        {
          "right": false,
          "text": "Jos ohjelmistoprojektissa tehdään paljon tutkivaa testaamista, ei yksikkö- ja integraatiotestausta tarvitse tehdä"
        },
        {
          "right": false,
          "text": "Tutkiva testaaminen perustuu testitapausten huolelliseen etukäteissuunnitteluun"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "4",
      "id": 41,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Canary releaseissa osa todellisista loppukäyttäjistä ohjataan käyttämään järjestelmän uutta versiota"
        },
        {
          "right": true,
          "text": "Feature toggle on eräs tekniikka canary releasejen toteuttamiseen"
        },
        {
          "right": true,
          "text": "Canary releaseja käytettäessä sovelluksen toimintaa on monitoroitava tarkasti"
        },
        {
          "right": true,
          "text": "Feature togglen avulla koodissa olevia keskeneräisiä toiminnallisuuksia voidaan piilottaa loppukäyttäjiltä"
        },
        {
          "right": false,
          "text": "Käytettäessä canary releaseja, sovelluskehittäjät testaavat sovelluksen toimivuutta ns. staging-palvelimella"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "4",
      "id": 42,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Käytettäessä feature brancheja uusi toiminnallisuus, esim. user story toteutetaan ensin omassa versionhallinnan haarassa, ja yhdistetään kehityksen päähaaraan vasta kun se on valmiina"
        },
        {
          "right": true,
          "text": "Trunk based development ei suosi feature branchien käyttöä, kaikki koodi pyritään integroimaan välittömästi pääkehityshaaraan"
        },
        {
          "right": true,
          "text": "DevOps-toimintamallia sovellettaessa kehittäjät ja järjestelmäylläpitäjät toimivat tiiviissä yhteistyössä"
        },
        {
          "right": true,
          "text": "Infrastructure as Code tarkottaa suurinpiirtein sitä, että sovelluksien käyttämiä palvelinympäristöjä hallinnoidaan koodin avulla käsiteltävillä konfiguraatiotiedostoilla, joita voidaan esim. tallettaa versionhallintaan normaalin ohjelmakoodin tapaan"
        },
        {
          "right": false,
          "text": "Trunk based development on kiinnostava idea, mutta se sopii lähinnä pienten startup-yritysten käyttöön"
        },
        {
          "right": false,
          "text": "Trunk based development -kehitysmallia on mahdotonta soveltaa, jos sovellukseen on toteutettava niin isoja toiminnallisuuksia, että niiden tekemiseen menee kauemmin kuin päivä"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "4",
      "id": 43,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston arkkitehtuuri määrittelee sen rakenteen suuret linjat, eli minkälaisista rakennekomponenteista ohjelmisto koostuu"
        },
        {
          "right": true,
          "text": "Arkkitehtuuri ohjaa sitä miten sovellusta tulee jatkokehittää"
        },
        {
          "right": false,
          "text": "Ohjelmiston toimintaympäristön ja toteutusteknologioiden ei tule koskaan antaa vaikuttaa ohjelmiston arkkitehtuuriin"
        },
        {
          "right": false,
          "text": "Arkkitehtuurityyli määrää sen, mitä luokkia ja metodeja ohjelmistossa on"
        },
        {
          "right": false,
          "text": "Ohjelmiston ei-toiminnallisilla vaatimuksilla ei ole vaikutusta sen arkkitehtuuriin"
        },
        {
          "right": false,
          "text": "Sovelluksen arkkitehtuuri on pysyvä, ts. alussa valittua arkkitehtuuria ei koskaan muuteta."
        }
      ]
    },
    {
      "courseId": "1",
      "part": "4",
      "id": 44,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kerrosarkkitehtuuri tähtää siihen, että tietyn kerroksen koodiin tehtävät muutokset aiheuttaisivat mahdollisimman vähän muutoksia sovelluksen muihin osiin"
        },
        {
          "right": true,
          "text": "Kerrosarkkitehtuuria sovellettaessa käyttöliittymästä huolehtiva koodi on eristetty esimerkiksi sovelluslogiikaasta huolehtivasta koodista"
        },
        {
          "right": true,
          "text": "Mikropalveluarkkitehtuuri mahdollistaa sovelluksen toteuttamisen useita eri ohjelmointikieliä käyttäen"
        },
        {
          "right": false,
          "text": "Mikropalveluarkkitehtuuria sovellettaessa jokainen user story toteutetaan omana mikropalveluna"
        },
        {
          "right": false,
          "text": "Kerrosarkkitehtuurissa eri kerroksilla oleva koodi keskustelee ainoastaan verkon välityksellä, eli esimerkiksi käyttöliittymästä ei koskaan kutsuta suoraan sovelluslogiikkakerroksen metodeja"
        },
        {
          "right": false,
          "text": "Mikropalveluarkkitehtuurin suurimpia etuja on niiden helppo testaaminen ja debuggaaminen"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "4",
      "id": 45,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Inkrementaalinen arkkitehtuuri tarkoittaa sitä, että ohjelman lopullinen arkkitehtuuri muodostuu projektin edetessä"
        },
        {
          "right": true,
          "text": "Inkrementaalista arkkitehtuuria sovellettaessa esimerkiksi sovelluksen kerrosrakenne toteutetaan ainakin jossain muodossa jo varhaisessa vaiheessa projektia, jopa ensimmäisessä sprintissä"
        },
        {
          "right": true,
          "text": "Ketteriä menetelmiä sovellettaessa tunnustetaan se tosiasia, että vaatimusten tapaan saattaa myös arkkitehtuuria joutua mukauttamaan projektin aikana"
        },
        {
          "right": false,
          "text": "Jos kehitystiimi rakentaa arkkitehtuurin inkrementaalisesti, ei arkkitehtuuria dokumentoida millään tavalla"
        },
        {
          "right": false,
          "text": "Walking skeleton tarkoittaa koodia, joka tullaan heittämään pois kun ohjelman ominaisuudet valmistuvat"
        },
        {
          "right": false,
          "text": "Inkrementaalinen suunnittelu ja arkkitehtuuri takaavat sen, että ohjelmistosta tulee rakenteeltaan laadukas"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "4",
      "id": 46,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kapseloinnilla tarkoitetaan toteutustason yksityiskohtien piilottamista"
        },
        {
          "right": true,
          "text": "Metoditason koheesio pyrkii siihen, että yksittäinen metodi keskittyy ainoastaan yhteen asiaan kerrallaan. Jos metodi tekee liian monia asioita, sen koheesio paranee jos metodi jaetaan useammaksi metodiksi"
        },
        {
          "right": true,
          "text": "Mikropalveluissa yksittäisen palvelun koheesion taso on korkea ja ne kapseloivat sisäiset toimintaperiaatteensa muilta palveluilta"
        },
        {
          "right": true,
          "text": "Luokkatason koheesio ja single responsibility -periaate tarkoittavat samaa asiaa"
        },
        {
          "right": false,
          "text": "Ohjelmiston sisäisellä laadulla tarkoitetaan sitä, että koodin käyttämät tietorakenteet ja algoritmit tarjoavat optimaalisen nopean toiminnallisuuden kuhunkin käyttötarkoitukseen"
        },
        {
          "right": false,
          "text": "Single responsibility -periaate ei ole relevantti käytettäessä muita ohjelmointiparadigmoja kuin olio-ohjelmointia"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "4",
      "id": 47,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Code smell eli koodihaju on merkki siitä, että koodin sisäisessä laadussa on todennäköisesti ongelmia"
        },
        {
          "right": true,
          "text": "Tekninen velka on metafora sille, että koodin sisäinen rakenne on heikkoa"
        },
        {
          "right": false,
          "text": "Nykyisten parhaiden käytänteiden mukaan koodi tulee kommentoida huolellisesti, esim. jokaisesta koodissa olevasta muuttujasta tulee selittää mikä tietoa muuttuja tallettaa"
        },
        {
          "right": false,
          "text": "Refaktoroinnilla muutetaan luokkien metodeja siten, että niiden toiminnallisuus vastaa paremmin asiakkaiden tarpeita"
        },
        {
          "right": false,
          "text": "Refaktorointia ei kannata suorittaa jokaisessa sprintissä, se laskisi liikaa kehitystiimin velositeettia"
        },
        {
          "right": false,
          "text": "Teknistä velkaa tulee välttää kaikissa olosuhteissa"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "5",
      "id": 51,
      "title": "Mitkä seuraavista ovat leanin mukaan hukkaa (muda)?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Välivarastointi"
        },
        {
          "right": true,
          "text": "Ylituotanto"
        },
        {
          "right": true,
          "text": "Odotus"
        },
        {
          "right": true,
          "text": "Tuotteessa olevat viat"
        },
        {
          "right": false,
          "text": "Taukojen pitäminen"
        },
        {
          "right": false,
          "text": "Koulutus"
        },
        {
          "right": false,
          "text": "Toimintojen ulkoistaminen"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "5",
      "id": 52,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kaizen tarkoittaa työskentelytapojen jatkuvaan parantamisen kannustavaa asennetta"
        },
        {
          "right": true,
          "text": "Jatkuva parantaminen pyrkii etsimään ongelmien perimmäisen syyn (root cause) ja eliminoimaan sen"
        },
        {
          "right": true,
          "text": "Pull- tai JIT-periaatteilla tarkoitetaan sitä, että tuotetta tai sen tarvitsemia komponentteja valmistetaan vasta tilauksesta, eli ei varalta etukäteen"
        },
        {
          "right": true,
          "text": "Kanban on eräs työkalu pull- tai JIT-periaatteen toteuttamiseen"
        },
        {
          "right": false,
          "text": "Lean pyrkii maksimoimaan tuotantolaitteiden käyttöasteen"
        },
        {
          "right": false,
          "text": "Kaizen ei kosketa yrityksen rivityöntekijöitä, keskitason johto hoitaa kaizeniin liittyvät asiat"
        },
        {
          "right": false,
          "text": "Läpimenoaika (leadtime) tarkoittaa sitä, miten nopeasti jatkuvassa parannuksessa saadaan eliminoitua hukkaa aiheuttavat tekijät"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "5",
      "id": 53,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean suosii periaatetta, jossa päätökset tehdään mahdollisimman myöhäisessä vaiheessa, mutta ei kuitenkaan liian myöhään"
        },
        {
          "right": true,
          "text": "Osassa 2 mainitun 'hyvän backlogin' kriteerejä noudattava backlog on leanin periaatteiden mukainen"
        },
        {
          "right": false,
          "text": "Build quality in -periaatteen mukaan kannattaa keskittyä kalliimpien tuotteiden valmistamiseen. Esim. Applella periaate näkyy siinä, että firmalla ei ole halpoja puhelinmalleja"
        },
        {
          "right": false,
          "text": "Lean pyrkii läpimenoajan (leadtime) optimointiin henkilökohtaisilla bonuksilla"
        },
        {
          "right": false,
          "text": "Vesiputousmallissa suositut, hyvin tarkkaan tehdyt vaatimusmäärittelydokumentit ovat leanin periaatteiden mukaisia"
        },
        {
          "right": false,
          "text": "Vesiputousmallin suosima periaate tehdä sovelluksen testaus erillisenä lopussa tapahtuvana vaiheena on leanin periaatteiden mukainen käytäntö"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "5",
      "id": 54,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean-ideaalin mukainen johtaja hallitsee myös käytännön hands on -työskentelyn"
        },
        {
          "right": true,
          "text": "Tuotekehitykseen sovellettaessa lean pyrkii kiihdyttämään oppimista"
        },
        {
          "right": true,
          "text": "Leanin tuotekehityksen periaatteiden mukaan epävarmat asiat kannattaa selvittää varhaisessa vaiheessa"
        },
        {
          "right": false,
          "text": "Leanin tuotekehityksen 'set based concurrent development'-menetelmän idea on sama kuin iteratiivisessa ohjelmistokehityksessä, tuotetta laajennetaan ja parannellaan vähitellen iteraatio iteraatiolta"
        },
        {
          "right": false,
          "text": "Go see (kenchi genbutsu) -periaateen mukaan työntekijöiden tulee raportoida tekemisistä tarkasti managerille"
        },
        {
          "right": false,
          "text": "Scrum ei ole leanin periaatteiden mukainen, koska se on push-systeemi"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "5",
      "id": 55,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Scrum of scrums on periaate, jonka avulla pyritään hallitsemaan useita kehitystiimejä, jotka työskentelevät saman tuotteen parissa"
        },
        {
          "right": true,
          "text": "SAFe on hyvin tarkkaan dokumentoitu ja runsaasti erilaisia periaatteita ja henkilörooleja sisältävä laajan mittakaavan ketterä menetelmäkehys"
        },
        {
          "right": true,
          "text": "LeSS:iä sovellettaessa oletuksena on, että kehitetään yhtä tuotetta, jolla on yksi product owner. LeSS ei ota kantaa siihen, miten eri tuotteita kehittävät tiimit suhtautuvat toisiinsa"
        },
        {
          "right": false,
          "text": "LeSS lisää Scrumiin joukon kokonaan uudentyyppisiä palavereja sekä henkilörooleja"
        },
        {
          "right": false,
          "text": "LeSS suosittelee jakamaan työtä siten, että esimerkiksi yksi tiimi huolehtii sovelluksen frontendistä, yksi sovelluksen backendista ja yksi sovelluksen tietokannasta"
        },
        {
          "right": false,
          "text": "9 tai enemmän tiimiä sisältävässä LeSS huge -versiossa jokaiselle tiimille on varattu oma product backlog"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "5",
      "id": 56,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ketteriä menetelmiä käytetään nykyään useimpien tutkimusten mukaan yli 50% kaikista ohjelmistoprojekteista"
        },
        {
          "right": true,
          "text": "Tutkimusten mukaan yllättävän monet ketteriä menetelmiä soveltavat eivät kuitenkaan noudata monia ketteryyden perusperiaatteita esimerkiksi lyhyitä iteraatiota"
        },
        {
          "right": true,
          "text": "Erään tutkimuksen mukaan Jatkuva toimittaminen (continuous deployment) on ollut käytössä jopa kolmasosalla vastaajista"
        },
        {
          "right": false,
          "text": "Ketterien menetelmien nousu näyttää olevan takana, esim. Yhdysvaltojen hallituksen alaisissa projekteissa ketteriä menetelmiä ei enää käytetä yhtä paljon kuin esimerkiksi 10 vuotta sitten, kun Scrum-hype oli suurimmillaan"
        },
        {
          "right": false,
          "text": "Tutkimusten mukaan suuret ohjelmistoprojektit onnistuvat suuremmalla todennäköisyydellä kuin pienet projektit"
        },
        {
          "right": false,
          "text": "Tutkimusten mukaan suurin ketteryyden tuoma hyöty on sen kustannustehokkuus"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "6",
      "id": 61,
      "title": "(1) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Smartlyn toimiala on Facebook-mainostus"
        },
        {
          "right": true,
          "text": "Tärkeä motivaatio automaattisille testeille on varmistua siitä, että jo toimineet asiat eivät hajoa kun koodia muokataan"
        },
        {
          "right": true,
          "text": "End to end -testit testaavat järjestelmää kokonaisuudessaan, kurssin käyttämän terminologian <i>järjestelmätestit</i> ovat siis end to end -testejä"
        },
        {
          "right": false,
          "text": "Smartyllä tiimirakene vastaa ohjelmiston arkkitehtuurisia kerroksia, eli esim. sovelluksen käyttöliittymästä on vastuussa oma tiiminsä"
        },
        {
          "right": false,
          "text": "Automatisoidut testit ovat hyvä keino löytää ohjelmistosta kokonaan uudenlaisia bugeja"
        },
        {
          "right": false,
          "text": "Kattava yksikkötestaus on riittävä tapa saavuttaa täysi luottamus sille, että ohjelmisto toimii oikein"
        },
        {
          "right": false,
          "text": "End to end -testeissä kutsutaan myös ulkoisten palveluiden esimerkiksi Facebookin rajapintoja"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "6",
      "id": 62,
      "title": "(2) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "API-testeillä voidaan testata esimerkiksi yksittäistä mikropalvelua kokonaisuudessaan"
        },
        {
          "right": true,
          "text": "Yksikkötestit eivät käytä tietokantaa"
        },
        {
          "right": true,
          "text": "End to end -testit suoritetaan käyttöliittymän läpi"
        },
        {
          "right": true,
          "text": "End to end -testien huono puoli on se, että ne ovat usein riippuvaisia käyttöliittymässä esitettävän datan muodosta"
        },
        {
          "right": false,
          "text": "Integraatiotestit eivät käytä tietokantaa"
        },
        {
          "right": false,
          "text": "Yksikkötestit tekevät usein HTTP-pyyntöjä verkossa oleviin rajapintoihin"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "6",
      "id": 63,
      "title": "(3) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Testipyramidi antaa erään suosituksen sille, kuinka paljon testausta kannattaa kohdentaa eri testauksen tasoille"
        },
        {
          "right": true,
          "text": "Monien startupien tapaan Smartyllä oli tilanne aluksi se, että automatisoituja testejä ei ollut"
        },
        {
          "right": true,
          "text": "Jos koodissa havaitaan bugi, kannattaa bugikorjauksen lisäksi tehdä testit, jotka varmistavat ettei sama bugi palaa koodiin uudelleen"
        },
        {
          "right": false,
          "text": "Kokonaan ilman automaattisia testejä olevan 'legacy'-koodin testauksen automatisointi kannattaa aloittaa yksikkötesteistä"
        },
        {
          "right": false,
          "text": "Startup-yrityksen kannattaa rakentaa kattavat automaattiset testit jo siinä vaiheessa kun ns. 'product market -fit' on vielä löytymättä"
        },
        {
          "right": false,
          "text": "Testipyramidin mukaista jakaumaa eri tason testien määrään suhteen kannattaa noudattaa aina heti ohjelmakomponentin, esim. mikropalvelun toteuttamisen ensimmäisestä päivästä alkaen"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "6",
      "id": 64,
      "title": "(4) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Smartly ei enää käytä ollenkaan end to end -testejä sillä kokemus niistä oli huono, testit rikkoontuivat välillä ilman mitään syytä"
        },
        {
          "right": true,
          "text": "Smartlyllä koodiin tehtävät lisäykset katselmoidaan pull requestien (PR) kautta"
        },
        {
          "right": true,
          "text": "Smartly julkaisee feature togglejen avulla joitain koodiin tulevia muutoksia/toiminnallisuuksia aluksi vain osalle asiakkaista"
        },
        {
          "right": false,
          "text": "Smartlyllä on yhtenäiset testauskäytänteet, tämän takia jokainen tiimi testaa vastuullaan olevaa ohjelmiston osaa samalla tavalla"
        },
        {
          "right": false,
          "text": "Smartlyllä ohjelmiston laadusta vastaa erillinen laadunhallintaan keskittyvä QA-tiimi"
        },
        {
          "right": false,
          "text": "Smartlyllä koodia testataan manuaalisesti ennen kuin se päästetään tuotantokäyttöön"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "6",
      "id": 65,
      "title": "(1) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Saavutettavuus/esteettömyys tarkoittaa sitä, että tuotteen on tarjottava sama kokemus käyttäjän rajoitteista huolimatta"
        },
        {
          "right": true,
          "text": "Käyttökokemussuunnittelun (UX design) on mukautunut ketteryyteen paljon ohjelmistokehitystä hitaammin"
        },
        {
          "right": true,
          "text": "Käyttäjäkeskeinen suunnittelu (User centric design) on iteratiivinen menetelmä käyttökokemussuunnitteluun"
        },
        {
          "right": false,
          "text": "Käyttökokemussuunnittelun (UX design) katsotaan syntyneen 1980-luvulla piilaaksossa Microsoftin tuotekehityslaboratoriossa"
        },
        {
          "right": false,
          "text": "Tarkka, etukäteen tapahtuva suunnittelu on onnistuneen käyttökokemuksen luomisen edellytys"
        },
        {
          "right": false,
          "text": "Käyttäjäkeskeinen suunnittelu (User centric design) määrittelee erään tarkan ohjeiston sille, miten käyttökokemussuunnittelua tulee tehdä"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "6",
      "id": 66,
      "title": "(2) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean UX suosittelee sijoittamaan designerit osaksi ohjelmistokehitystiimejä"
        },
        {
          "right": true,
          "text": "Lean UX pyrkii siihen että työtä edistetään pienissä paloissa ja eritasoisia aikaansaannoksia julkaistaan nopeassa syklissä"
        },
        {
          "right": true,
          "text": "Erehdykset salliva kulttuuri kuuluu Lean UX:ään"
        },
        {
          "right": false,
          "text": "Ketterässä käyttökokemussuunnittelussa (Agile UX) ovat avainasemassa tarkat eli ns. pixel perfect -tasolla tehdyt layout-suunnitelmat"
        },
        {
          "right": false,
          "text": "Lean UX:ssä käyttökokemuksen määrittelee firman johtava suunnittelija, eli ns. UX-ninja"
        },
        {
          "right": false,
          "text": "Lean UX suosittelee että käyttäjätestaus tehdään kontrolloiduissa laboratorio-olosuhteissa"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "6",
      "id": 67,
      "title": "(3) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Design sprintti on menetelmä, jonka avulla käydään lyhyessä ajassa läpi kaikki design-prosessin vaiheet, motivaationa esim. alustavan liiketoimintakonseptin luominen"
        },
        {
          "right": true,
          "text": "Design systeemi määrittelee esimerkiksi yrityksen web-sivuston graafisen ulkoasun"
        },
        {
          "right": true,
          "text": "Design systeemi saattaa tarjota joukon muotoilultaan valmiita käyttöliittymäkomponentteja"
        },
        {
          "right": false,
          "text": "Oikeaoppisessa Lean UX -menetelmässä joka toinen sprintti on Design sprintti ja joka toinen normaali sovelluskehitykseen keskittyvä sprintti"
        },
        {
          "right": false,
          "text": "Design sprintin pituus on aina viikko"
        },
        {
          "right": false,
          "text": "Käytettävyyssuunnittelu on taidetta, tieteellisellä ajattelulla ei ole roolia käytettävyyssuunnittelussa"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "7",
      "id": 71,
      "title": "(1) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Nykyään on tyypillistä, että sovelluskehittäjä joutuu käyttämään useita eri ohjelmointikieliä jopa yhdessä projektissa työskennellessään"
        },
        {
          "right": true,
          "text": "Ei ole olemassa vain yhtä tapaa kouluttautua ohjelmistoalalle"
        },
        {
          "right": false,
          "text": "Ketterän manifestin mukaiset itseorganisoituvat tiimit ovat utopia, niillä ei ole sijaa nykyisessä bisneksessä, tiimien tulee työskennellä tiukan ulkoisen ohjauksen varassa"
        },
        {
          "right": false,
          "text": "Softa-alalla menestyksekkäästi toimimiseen tarvitaan nykyään täysin erilainen mindset, eli mielenlaatu/ajattelutapa kuin 80-luvulla"
        },
        {
          "right": false,
          "text": "Jos osaat hyvin yhden teknologian, pärjäät sen avulla ohjelmistoalalla jopa vuosikymmeniä"
        },
        {
          "right": false,
          "text": "On parasta koostaa ohjelmistotiimi mahdollisimman samankaltaisista ihmisistä, liika erilaisuus ihmisten taustoissa vaikeuttaa asiakkaiden tarpeiden ymmärtämistä"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "7",
      "id": 72,
      "title": "(2) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston uusia versiota kannattaa viedä (eli 'shipata') tuotantoon niin usein kuin mahdollista, jopa yli 10 kertaa päivässä"
        },
        {
          "right": true,
          "text": "Ensimmäisenä mieleen tuleva tekninen ratkaisu kannattaa usein kyseenalaistaa"
        },
        {
          "right": false,
          "text": "Isojen IT-organisaatioiden on huomattavasti helpompi ottaa huomioon asiakkaan tarpeet kuin pienten ketterien tiimien"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjien ei ole tarvetta ymmärtää bisneksen tarpeita tai sovelluksen arkkitehtuuriratkaisuja, riittää että sovelluskehittäjä maksimoi tuotantokäyttöön vietävän koodin määrään"
        },
        {
          "right": false,
          "text": "Sovelluksen laadunhallinta kannattaa tehdä laadunhallintaan varatuissa sprinteissä, joita pidetään noin 4-5 sprintin välein"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "7",
      "id": 73,
      "title": "(3) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Retrospektiiveja ei tulisi jättää pitämättä"
        },
        {
          "right": true,
          "text": "Sprintin aikaisesta työskentelystä noin 10% tulisi kohdistua seuraavien sprinttien aikana toteutettavien storyjen valmisteluun"
        },
        {
          "right": false,
          "text": "Paras sprintin pituus on 4 viikkoa"
        },
        {
          "right": false,
          "text": "Eräs Elisan parhaista käytänteistä ovat ns. tekniset storyt, eli storyt joiden toteuttaminen ei yleensä näy käyttäjälle mitenkään"
        },
        {
          "right": false,
          "text": "Teknistä velkaa ei tule ottaa missään olosuhteissa"
        },
        {
          "right": false,
          "text": "Niin sanotun Nokia-testin voi läpäistä ainoastaan, jos ennen toteutusvaihetta pidetään joukko spesifikaatiosprinttejä, joiden aikana ohjelmisto määritellään tarkasti"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "7",
      "id": 74,
      "title": "(4) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Hyvin toimiva jatkuva integraatio (CI) vaikuttaa parhaimmillaan organisaation suorituskykyyn jopa liiketoiminnan tasolla"
        },
        {
          "right": true,
          "text": "Yli muutaman päivän pituisia feature brancheja ei kannata käyttää"
        },
        {
          "right": true,
          "text": "Jos jatkuvan integraation (CI) 'build' hajoaa, eli koodi ei käänny, tai jokin testi ei mene läpi, tulee ongelma korjata heti"
        },
        {
          "right": true,
          "text": "Sen koodin määrä joka ei ole tuotantokäytössä tulee minimoida"
        },
        {
          "right": false,
          "text": "Jatkuva integraatio (CI) toimii ainoastaan sellaisissa ohjelmistoissa, joita kehittää yksi tai korkeintaan pari tiimiä. Isommassa skaalassa ohjelmistoja kehitettäessä CI:n käyttö olisi liian suuri hidaste"
        },
        {
          "right": false,
          "text": "Jatkuva integraation (CI) soveltaminen onnistuu ainoastaan pilvipalveluina toteutetuille web-sovelluksille"
        },
        {
          "right": false,
          "text": "CI-palvelimen status, eli onko kaikki hyvin vai onko esim. testeissä ongelmia, tulee pitää kehitystiimin sisäisenä asiana"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "7",
      "id": 79,
      "title": "(5) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Suurin hukka ohjelmistokehityksessä on se, että rakennetaan asiakkaan tarpeiden kannalta kokonaan vääränlainen järjestelmä"
        },
        {
          "right": true,
          "text": "Lean-startup-menetelmällä testataan idean tarpeellisuutta/hyödyllisyyttä oikeilla käyttäjillä"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä jokaisella tiimillä voi olla oma Definition of done"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä osan tiimeistä kannattaa erikoistua joihinkin osa-alueisiin, esimerkiksi testaamiseen"
        },
        {
          "right": false,
          "text": "Ohjelmistokehittäjille kannattaa antaa henkilökohtaisia suoriutumistavoitteita jotka vaikuttavat suoraan palkkaukseen, näin myös tiimit saadaan työskentelemään mahdollisimman tehokkaasti"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä eri tiimien jäsenet eivät yleensä keskustele suoraan keskenään, keskustelu hoidetaan tiimien scrum masterien kautta"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "7",
      "id": 75,
      "title": "(1) Mitkä seuraavista Marko Klemetin luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Erään määritelmän mukaan DevOps tarkoittaa sovelluskehittäjien ja järjestelmäylläpitäjien välistä yhteistyötä"
        },
        {
          "right": true,
          "text": "DevOpsiin liittyvät työkalut auttavat keräämään monenlaista informaatiota tuotantoympäristöstä ja täten tekemään sovelluksen toiminnallisuuteen liittyviä kokeiluja"
        },
        {
          "right": true,
          "text": "Sovellus tulisi viedä tuotantoympäristöön heti kehitystyön alkuvaiheessa, jopa jo ensimmäisenä päivänä, ennen kuin sovelluksessa on juurikaan valmiina olevaa toiminnallisuutta"
        },
        {
          "right": true,
          "text": "Eräs pilviympäristöjen hyvistä puolista on se, että ne antavat sovelluskehittäjille mahdollisuuden julkaista koodia suoraan tuotantoympäristöön"
        },
        {
          "right": false,
          "text": "DevOpsia soveltamalla on mahdollista korvata testausautomaatio"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "7",
      "id": 76,
      "title": "(2) Mitkä seuraavista Marko Klemetin luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Design-systeemi dokumentoi yrityksen visuaalisen ilmeen ja saattaa jopa tarjota uudelleenkäytettäviä, visuaalista ilmettä noudattavia käyttöliittymäkomponentteja"
        },
        {
          "right": true,
          "text": "ROBOT-framework on hyväksymistestauksen työkalu, missä testit kirjoitetaan asiakkaan ymmärtämällä kielellä"
        },
        {
          "right": true,
          "text": "GitHub actions ja Jenkins ovat jatkuvaan integraatioon (CI) sopivia palveluita"
        },
        {
          "right": false,
          "text": "Paras käytänne DevOpsin soveltamiseen on muodostaa yritykseen erillinen DevOps-tiimi, joka hoitaa tuotantojärjestelmien ja deployment-pipelinen konfiguroinnin"
        },
        {
          "right": false,
          "text": "Jatkuvan integraation (CI) ja jatkuvan julkaisun (CD) konfiguraatioita ei kannata tallettaa versionhallintaan"
        },
        {
          "right": false,
          "text": "DevOpsin käyttöönotossa tärkeimmässä asemassa on sopivien työkalujen tehokas käyttö"
        }
      ]
    },
    {
      "id": 77,
      "part": "1",
      "courseId": "2",
      "title": "Mitkä seuraavista ovat ohjelmiston elinkaaren vaiheita (lifecycle phases)?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "asiakkaan vaatimusten selvittäminen"
        },
        {
          "right": true,
          "text": "testaus"
        },
        {
          "right": true,
          "text": "ohjelmointi"
        },
        {
          "right": true,
          "text": "ohjelmiston rakenteen suunnittelu"
        },
        {
          "right": true,
          "text": "jo käytössä olevan ohjelmiston laajentaminen"
        },
        {
          "right": false,
          "text": "ohjelmiston dokumentointi"
        },
        {
          "right": false,
          "text": "suorituskyvyn parantaminen"
        },
        {
          "right": false,
          "text": "asiakastapaamiset"
        }
      ]
    },
    {
      "courseId": "2",
      "title": "Mitkä seuraavista vesiputousmallia koskevista väitteistä ovat  'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vesiputousmallia käytettäessä tulee määrittelyn ja suunnittelun tuotokset dokumentoida huolellisesti"
        },
        {
          "right": true,
          "text": "Jos käytetään vesiputousmallia ohjelmoijat eivät tyypillisesti osallistu vaatimusmäärittelyyn"
        },
        {
          "right": false,
          "text": "Yksi ensimmäisistä vesiputousmallin puolestapuhujista oli Winston Royce"
        },
        {
          "right": false,
          "text": "Yhdysvaltojen puolustusministeriö eli Department of Defence ei vielä nykyäänkään salli muiden ohjelmistotuotantotapojen kuin vesiputousmallin käyttöä"
        },
        {
          "right": false,
          "text": "Avaruussukkuloiden käyttämä ohjelmisto rakennettiin vesiputousmallilla"
        },
        {
          "right": false,
          "text": "Vesiputousmalli sopii erityisen hyvin pitkäkestoisiin projekteihin, sillä niissä on paremmin aikaa suorittaa aluksi perusteellinen vaatimusmäärittely"
        },
        {
          "right": false,
          "text": "Vesiputousmalli sopii erityisen hyvin pitkäkestoisiin projekteihin, sillä niissä on paremmin aikaa suorittaa lopuksi kattava testaus"
        }
      ],
      "part": "1",
      "id": 78
    },
    {
      "courseId": "2",
      "title": "Seuraavassa luetellut ovat vesiputousmallin heikkouksia:",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Asiakkaan ei ole helppoa ilmaista sitä miten tilattavan ohjelmiston tulisi toimia"
        },
        {
          "right": true,
          "text": "Jos sovelluksen toteutuksen yksityiskohtia ei ollenkaan huomioida määrittelyn yhteydessä, saatetaan vaatimusmäärittelyyn kirjata asioita joita on aivan liian kallista toteuttaa"
        },
        {
          "right": true,
          "text": "Myöhäisessä vaiheessa havaitut ongelmat saattavat johtaa suuria kustannuksia aiheuttaviin muutoksiin"
        },
        {
          "right": true,
          "text": "Vesiputousmalli ei ota huomioon sovelluksen kehityksen aikana tapahtuvia mahdollisia bisnesympäristön muutoksia"
        },
        {
          "right": false,
          "text": "Vesiputousmalli asettaa liikaa testaamiseen ja laadunhallintaan liittyvää vastuuta ohjelmoijille"
        },
        {
          "right": false,
          "text": "Vesiputousmalli ei ota tarpeeksi huomioon kehitystiimin johtajien mielipiteitä"
        }
      ],
      "part": "1",
      "id": 145
    },
    {
      "courseId": "2",
      "title": "Ketterän manifestin ja sen periaatteiden mukaan",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Projektin edistymistä mitataan ensisijaisesti toimivan ohjelmiston etenemisellä"
        },
        {
          "right": true,
          "text": "Muutokseen reagoiminen on tärkeämpää kuin etukäteen laadittujen suunnitelmien noudattaminen"
        },
        {
          "right": true,
          "text": "Asiakkaalle kannattaa toimittaa käyttökelpoisia ohjelmiston versioita niin usein kuin mahdollista"
        },
        {
          "right": false,
          "text": "Dokumentointi ei ole tärkeää"
        },
        {
          "right": false,
          "text": "Yksilön vaikutus ohjelmistoprojektissa kannattaa minimoida"
        },
        {
          "right": false,
          "text": "Kommunikointi kannattaa ensisijaisesti hoitaa pikaviestimien avulla"
        },
        {
          "right": false,
          "text": "Tärkeiden deadlinejen koittaessa kehitystiimin tulee työskennellä normaalia suuremmalla intensiteetillä jotta ketteryys säilytetään"
        }
      ],
      "part": "1",
      "id": 80
    },
    {
      "courseId": "2",
      "title": "Ketterän manifestin periaatteiden mukaan",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sen lisäksi, että ketterässä kehityksessä vaatimukset voivat vaihtua, voi myös tiimi vaihtaa tarpeen mukaan toimintatapojaan"
        },
        {
          "right": true,
          "text": "Ohjelmistokehittäjille kannattaa antaa vapaus ja vastuu päättää omista työtavoista"
        },
        {
          "right": true,
          "text": "On oleellista että ohjelmistokehittäjät käyvät tiivistä interaktiota loppukäyttäjien kanssa"
        },
        {
          "right": true,
          "text": "Kannattaa suosia mahdollisimman yksinkertaisia ratkaisuja"
        },
        {
          "right": false,
          "text": "Ohjelmistoarkkitehdin rooli on keskeinen projektien onnistumisen kannalta"
        },
        {
          "right": false,
          "text": "Ketterässä kehittämisessä ohjelmiston laadulla ei ole kovin suurta merkitystä, pääasia on toteuttaa asiakkaalle mahdollisimman nopeasti uutta toiminnallisuutta"
        },
        {
          "right": false,
          "text": "Ohjelmistosta ei kannata tuottaa uusia versiota liian usein"
        }
      ],
      "part": "1",
      "id": 81
    },
    {
      "courseId": "2",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Product ownerin kannattaa olla hyvin selvillä ohjelmiston käyttäjien tarpeista"
        },
        {
          "right": true,
          "text": "Scrum ei suosittele yli kymmenen hengen tiimejä"
        },
        {
          "right": true,
          "text": "Scrumissa on mahdollista ja jopa suositeltavaa vaihtaa tarpeen vaatiessa kehitystiimin toimintatapoja"
        },
        {
          "right": false,
          "text": "Sprintin pituudelle ei ole asetettu mitään rajoitteita"
        },
        {
          "right": false,
          "text": "Scrumin tehokas soveltaminen on suoraviivaista sillä sen 'pelisäännöt' määrittelevä Scrum guide on vaan noin 15 sivua pitkä."
        },
        {
          "right": false,
          "text": "Scrum antaa tarkan ohjeistuksen sille miten sovelluskehittäjän tulee toimia"
        }
      ],
      "part": "1",
      "id": 82
    },
    {
      "courseId": "2",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Product owner määrää sen mitä ja missä järjestyksessä toiminnallisuutta toteutetaan sovellukseen"
        },
        {
          "right": true,
          "text": "Jos joku tiimin ulkopuolinen pyytää sprintin aikana kehitystiimiä toteuttamaan välittömästi jonkin uuden ja briljantin idean, tulee scrum masterin puuttua asiaan"
        },
        {
          "right": true,
          "text": "Scrum master auttaa byrokraattisten ongelmien (esim. kehitystiimillä ei ole käytössä sopivaa palvelinympäristöä) ratkaisemisessa"
        },
        {
          "right": false,
          "text": "Scrum master antaa työmääräarviot sovellukseen toteutettaville toiminnallisuuksille"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjät eivät saa lisätä uusia vaatimuksia product backlogille ilman product ownerin lupaa"
        },
        {
          "right": false,
          "text": "Scrum master päättää minkä asian parissa kukin kehitystiimin jäsen työskentelee sprintin aikana"
        },
        {
          "right": false,
          "text": "Product owner työskentelee scrum masterin alaisuudessa"
        }
      ],
      "part": "1",
      "id": 83
    },
    {
      "courseId": "2",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kehittäjätiimissä tulisi olla osaamista myös sovelluksen testaamiseen"
        },
        {
          "right": true,
          "text": "Scrum suosittelee että tiimi määrittelee yhteisen laatustandardin, joka määrittelee mitä kaikkea toiminnallisuuden toteuttaminen valmiiksi asti pitää sisällään"
        },
        {
          "right": false,
          "text": "Lähellä deadlineja myös puutteellisesti toteutetut käyttäjävaatimukset voidaan hyväksyä osaksi sprintissä julkaistavaa ohjelmistoversiota"
        },
        {
          "right": false,
          "text": "Scrum master määrittelee kehitystiimin työskentelytavat"
        },
        {
          "right": false,
          "text": "Kehitystiimi saa itse valita mitä käyttäjän vaatimuksia se kussakin sprintissä toteuttaa"
        },
        {
          "right": false,
          "text": "Yhden sprintin aikana toteutetut vaatimukset testataan yleensä vasta seuraavassa sprintissä"
        },
        {
          "right": false,
          "text": "Scrum suosittelee, että järjestelmäylläpitäjät eivät työskentele osana Scrum-tiimejä"
        }
      ],
      "part": "1",
      "id": 84
    },
    {
      "courseId": "2",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sprintin suunnittelussa päätetään mitä seuraavan sprintin aikana on tarkoitus toteuttaa"
        },
        {
          "right": true,
          "text": "Daily scrum -palavereissa on tarkoitus tuoda esiin seikkoja, jotka mahdollisesti hidastavat kehitystyötä"
        },
        {
          "right": true,
          "text": "Sprintin katselmointien (sprint review) yhteydessä saatetaan product backlogille lisätä uusia vaatimuksia"
        },
        {
          "right": false,
          "text": "Product owner ei osallistu sprintin suunnitteluun. Sille ei ole tarvetta, sillä kehittäjätiimi työskentelee itseorganisoituvasti"
        },
        {
          "right": false,
          "text": "Termit sprint backlog ja product backlog tarkottavat käytännössä samaa asiaa"
        },
        {
          "right": false,
          "text": "Asiakkaat antavat sovelluksesta palautetta Daily scrum -palaverissa"
        },
        {
          "right": false,
          "text": "Sprintin katselmoinnissa (sprint review) jokainen sovelluskehittäjä raportoi omista sprintin aikaisista tekemisistään scrum masterille"
        }
      ],
      "part": "1",
      "id": 85
    },
    {
      "courseId": "2",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Retrospektiivin tarkoituksena on optimoida sovelluskehittäjien työskentelytapaa"
        },
        {
          "right": true,
          "text": "Scrum ei ota kantaa siihen miten sovellus testataan"
        },
        {
          "right": true,
          "text": "Inspect-and-adapt -periaatteen takia product backlog saatetaan joutua priorisoimaan uudelleen"
        },
        {
          "right": false,
          "text": "Retrospektiivissä priorisoidaan product backlog tarpeen vaatiessa uudelleen"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjien ei kannata paljastaa sprintin alussa esiin tulevia vaikeuksia. Koska tiimit ovat itseorganisoituja, ei ole mitään tarvetta kertoa ongelmista ulkopuolisille liian aikaisin, sillä ongelmat ratkeavat yleensä ajan kanssa"
        },
        {
          "right": false,
          "text": "ScrumBut sopii erityisesti suurien ohjelmistoprojektien hallitsemiseen"
        }
      ],
      "part": "1",
      "id": 86
    },
    {
      "courseId": "2",
      "part": "2",
      "id": 87,
      "title": "Mitkä seuraavista vaatimusmäärittelyä koskevista väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vaatimusmäärittelyn aikana selvitetään mitä toiminnallisuutta kehitteillä olevaan ohjelmistoon halutaan"
        },
        {
          "right": true,
          "text": "Vaatimusmäärittelyn aikana selvitetään minkälaisessa toimintaympäristössä kehitettävän sovelluksen on tarkoitus toimia"
        },
        {
          "right": true,
          "text": "Lainsäädännölliset rajoitukset, kuten GDPR tulee huomioida sovelluksen vaatimusmäärittelyn aikana"
        },
        {
          "right": false,
          "text": "Eräs verkkokaupan laatuvaatimus (quality attribute) voisi olla 'Asiakas voi lisätä tuotteen ostoskoriin'"
        },
        {
          "right": false,
          "text": "Eräs verkkokaupan toiminnallinen (functional requirement) vaatimus voisi olla 'Verkkokauppan on toimittava kaikilla moderneilla web-selaimella'"
        },
        {
          "right": false,
          "text": "Vaatimusten validoinnilla tarkoitetaan niiden dokumentoimista kirjallisessa muodossa, esim. ohjelmistotiimin Wikisivulla"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "2",
      "id": 88,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "MVP:n (minimal viable product) avulla voidaan tutkia ideoiden, esim. ohjelmiston potentiaalisten uusien ominaisuuksien, käyttökelpoisuutta"
        },
        {
          "right": true,
          "text": "Lean-startup-menetelmän tarkoituksena on oppia käyttäjien mieltymyksiä seuraamalla miten he sovellusta käyttävät"
        },
        {
          "right": false,
          "text": "A/B-testauksen avulla voidaan varmistua että järjestelmä toimii oikein poikkeuksellisissakin tilanteissa"
        },
        {
          "right": false,
          "text": "Vesiputousmallin hyvä puoli on se, että vaatimusmäärittelyä voidaan tarkentaa koko ohjelmistokehityksen ajan"
        },
        {
          "right": false,
          "text": "Eräs ketterien menetelmien ongelmista on se, että asiakas ei osaa ilmaista vaatimuksia riittävän hyvin ohjelmistokehitysprojektien alussa"
        },
        {
          "right": false,
          "text": "Lean startup -menetelmä sopii epämääräisyytensä takia oikeastaan vaan startup-yrityksille"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "2",
      "id": 89,
      "title": "Mitkä seuraavista user storyja koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "User storylle kannattaa kirjata hyväksymäkriteerit, eli esim. joukko testejä joiden avulla voidaan todeta storyn olevan toteutettu halutulla tavalla"
        },
        {
          "right": true,
          "text": "Ennen user storyn kuvaaman toiminnallisuuden toteuttamista on oleellista kommunikoida riittävästi product ownerin tai asiakkaan edustajan kanssa"
        },
        {
          "right": true,
          "text": "'Opiskelijan tulee pystyä tarkastelemaan seuraavan periodin opetustarjontaa' on kohtuullisen hyvä muotoilu user storylle"
        },
        {
          "right": false,
          "text": "User storyyn kirjataan tarkasti kaikki loppukäyttäjän sille asettamat vaatimukset"
        },
        {
          "right": false,
          "text": "'Opiskelijoiden tiedot talletetaan tietokantaan' on hyvä muotoilu user storylle"
        },
        {
          "right": false,
          "text": "Mike Cohn ja Ron Jeffries ovat erimielisiä siitä, mitä user storyn määritelmä pitää sisällään"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "2",
      "id": 90,
      "title": "Mitkä seuraavista user storyja koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": false,
          "text": "User storyn tekstuaalinen kuvaus on aina kirjattava muodossa 'As a _user_, I want _functionality_ so that _business value_'"
        },
        {
          "right": false,
          "text": "Kaikki product backlogille asti päätyvät user storyt ovat projektin kannalta suunilleen yhtä tärkeitä saada toteutettua"
        },
        {
          "right": false,
          "text": "User storyjen on aina noudatettava INVEST-kriteerejä"
        },
        {
          "right": false,
          "text": "Jos user story lisätään product backlogille, sen sisältöä ei saa enää muuttaa"
        },
        {
          "right": false,
          "text": "Suuren teknisen riskin sisältävän toiminnallisuuden kuvaamat user storyt kannattaa toteuttaa vasta ihan projektin lopussa, näin niissä epäonnistuminen ei laske liian aikaisessa vaiheessa sovelluskehittäjien mielialaa"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "2",
      "id": 91,
      "title": "Mitkä seuraavista user storyjen estimointia koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Suhteellisessa estimoinnissa verrataan user storyjen työmäärää muiden user storyjen vaatimaan työmäärään"
        },
        {
          "right": true,
          "text": "Työmääräarvioissa tulee huomioida definition of done eli projektissa sovittu yleinen laatutaso"
        },
        {
          "right": true,
          "text": "Työmääräarviot auttavat asiakasta user storyjen priorisoinnissa"
        },
        {
          "right": false,
          "text": "On kehitetty menetelmiä (esim. planning poker), joiden avulla ohjelmiston tekemiseen vaadittava työmäärä voidaan arvioida kohtuullisen tarkasti jo ennen projektin käynnistymistä"
        },
        {
          "right": false,
          "text": "Ketterien menetelmien parhaiden käytänteiden mukaista on antaa product ownerin ja scrum masterin hoitaa työmääräarviointi"
        },
        {
          "right": false,
          "text": "Työmääräarvioita ei tule muuttaa kesken projektin, sillä ne ovat lupaus asiakkaalle siitä milloin sovellus tulee valmistumaan"
        },
        {
          "right": false,
          "text": "Cone of uncertainity kuvaa sitä, että mitä kokeneempi sovelluskehittäjä on, sitä parempia työmääräarvioita hän pystyy tekemään"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "2",
      "id": 92,
      "title": "Mitkä seuraavista hyvää product backlogia koskevista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "User storyjen prioriteetti voi muuttua ajan kuluessa"
        },
        {
          "right": true,
          "text": "Sprinttiin toteutettavaksi valittavien user storyjen tulee olla riittävän pieniä"
        },
        {
          "right": true,
          "text": "Backlogille lisätään tarpeen mukaan uusia user storyja"
        },
        {
          "right": false,
          "text": "Backlogin sisältöä saa muuttaa ainoastaan sprintin suunnittelukokouksissa"
        },
        {
          "right": false,
          "text": "Jokaisen backlogille lisätyn user storyn täytyy aina sisältää tarkat hyväksymäkriteerit"
        },
        {
          "right": false,
          "text": "Jokainen backlogilla oleva user story täytyy toteuttaa, muuten projekti tuomitaan epäonnistuneeksi"
        },
        {
          "right": false,
          "text": "Kun user story on toteutettu valmiiksi, sanotaan että story on ready"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "2",
      "id": 93,
      "title": "Mitkä seuraavista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Tuotteen tai julkaisun burndown-kaavion avulla pystytään visualisoimaan jäljellä olevaa tekemättömän työn määrää"
        },
        {
          "right": true,
          "text": "User story mapping -tekniikka ryhmittelee user storyt toiminnallisiin loogisiin kokonaisuuksiin"
        },
        {
          "right": false,
          "text": "Tiimin velositeetilla tarkoitetaan sitä kuinka monta riviä koodia tiimi pystyy keskimäärin tuottamaan yhden sprintin aikana"
        },
        {
          "right": false,
          "text": "Velositeetin perusteella voidaan helposti vertailla mikä firman ohjelmistokehitystiimeistä on suorituskyvyltään paras"
        },
        {
          "right": false,
          "text": "Tiimin velositeettiin lasketaan jokainen sprintin aikana tehty koodirivi"
        },
        {
          "right": false,
          "text": "NoEstimates-liike on sitä mieltä että user storyjen estimointia ei tarvita ja siitä ei ole mitään hyötyä"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "2",
      "id": 94,
      "title": "Mitkä seuraavista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ei ole hyvä ottaa sprinttiin toteutettavaksi sellaista user storya jonka vaatimasta työmäärästä ei ole kellään minkäänlaista käsitystä"
        },
        {
          "right": true,
          "text": "Product owner pystyy priorisoinnin avulla vaikuttamaan siihen, mitä user storyja sprinttiin valitaan"
        },
        {
          "right": true,
          "text": "Velositeetin avulla voidaan arvioida kuinka paljon työtä yhteen sprinttiin kannattaa ottaa"
        },
        {
          "right": false,
          "text": "Sprintin tavoitteella tarkoitetaan sprinttiin valittuja user storyja"
        },
        {
          "right": false,
          "text": "Product owner määrää kuinka monta user storya kehitystiimi ottaa tiettyyn sprinttiin toteutettavaksi"
        },
        {
          "right": false,
          "text": "Jos user story on liian suuri toteutettavaksi yhdessä sprintissä, se kannattaa jakaa kahtia siten, että toinen keskittyy pelkään käyttöliittymään ja toinen bisneslogiikkaan ja tietokantaan"
        },
        {
          "right": false,
          "text": "Spike-ratkaisuilla saadaan aina nopeutettua sovelluskehitystä"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "2",
      "id": 95,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sprintin suunnittelun yhteydessä joudutaan miettimään myös sovelluksen toteutukseen liittyviä asioita"
        },
        {
          "right": true,
          "text": "Taskboardiksi organisoitu sprint backlog visualisoi kunkin tehtävän eli taskin statuksen"
        },
        {
          "right": false,
          "text": "Sprint backlogille laitettavat taskit tulee aina kirjoittaa asiakkaan ymmärtämällä kielellä"
        },
        {
          "right": false,
          "text": "Product owner määrää mitä sarakkeita sprintin backlogina toimivalla taskboardilla on"
        },
        {
          "right": false,
          "text": "Sprintin burndown-käyrän avulla on mahdollista seurata kuinka paljon työtunteja kehittäjillä on vielä jäljellä kyseisessä sprintissä"
        },
        {
          "right": false,
          "text": "Jos taskien työmäärä on arvioitu tunteina, tulee taskiin käytetty työaika päivän päätteeksi aina vähentää työmääräarviosta"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "2",
      "id": 96,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "WIP-rajoitteiden avulla voidaan yrittää pienentää riskiä sille, että sprintin aikana ehditään toteuttamaan useita user storyja ainoastaan osittain"
        },
        {
          "right": true,
          "text": "Retrospektiivi on hyvä hetki tarkastella ja modifioida sprintin taskboardia, esim. lisätä siihen WIP-rajoitteita"
        },
        {
          "right": true,
          "text": "On itseasiassa hiukan kiistanalaista kannattaako sprint backlogilla oleville taskeille antaa työmääräarvioita"
        },
        {
          "right": false,
          "text": "ScrumBan-menetelmässä noudatetaan aina 2 viikon pituisia sprinttejä"
        },
        {
          "right": false,
          "text": "ScrumBan-menetelmässä on tyypillistä, että jokainen sovelluskehittäjä työskentelee yhtä aikaa usean eri user storyn parissa"
        },
        {
          "right": false,
          "text": "Backlog grooming tehdään aina kahden sprintin välissä"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "3",
      "id": 107,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vesiputousmallissa asiakas validoi vaatimukset lukemalla vaatimusmäärittelyn tuloksena olevaa dokumentaatiota"
        },
        {
          "right": true,
          "text": "Staattisen analyysin avulla voidaan tarkastella automatisoidusti noudattaako koodi määriteltyjä tyyliseikkoja, esim. oikeaoppista sisennystä"
        },
        {
          "right": true,
          "text": "Pariohjelmoinnin on todettu vähentävän koodiin jäävien bugien määrää"
        },
        {
          "right": false,
          "text": "Koodin katselmoinnissa testataan kaatuuko sovellus sattumanvaraisilla syötteillä"
        },
        {
          "right": false,
          "text": "Ohjelmiston verifioinnilla tarkoitetaan sen varmistamista, että ollaan ylipäätään tekemässä ohjelmistoa, joka on käyttäjän tarpeisiin sopiva"
        },
        {
          "right": false,
          "text": "Ketterät menetelmät ja vesiputousmalli poikkeavat monin paikoin, mutta vaatimusten validointi tapahtuu molemmissa suunilleen samalla tavalla"
        },
        {
          "right": false,
          "text": "XP:n koodin yhteisomistajuuden periaate tarkoittaa sitä, että koodi julkaistaan Open source -lisenssillä kaikkien vapaaseen käyttöön"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "3",
      "id": 108,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston ulkoisella laadulla tarkoitetaan sitä, onko ohjelmisto sopiva käyttötarkoitukseensa, eli toimiiko se niin kuin käyttäjä haluaa ja olettaa"
        },
        {
          "right": true,
          "text": "Järjestelmätestauksessa sovelluksen toimintaa tutkitaan usein saman rajapinnan kautta, miten loppukäyttäjä sovellusta käyttää"
        },
        {
          "right": true,
          "text": "Testitapauksia mietittäessä kannattaa valita sellaisia testisyötteitä, jotka toimivat järjestelmän kannalta erilaisella tavalla, eli mitkä eivät kuulu samaan ekvivalenssiluokkaan"
        },
        {
          "right": false,
          "text": "Käyttäjän hyväksymistestauksessa verrataan sovellusta toimintaa vaatimusmäärittelyyn"
        },
        {
          "right": false,
          "text": "Black box -testauksen suorittavat aina sovelluskehittäjät"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "3",
      "id": 109,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Yksikkötestaus on useimmiten ns. developer-testausta, eli sovelluskehittäjien vastuulla"
        },
        {
          "right": true,
          "text": "Huono sisäinen laatu saattaa vaikeuttaa sovelluksen jatkokehittämistä"
        },
        {
          "right": true,
          "text": "Haarautumakattavuutta mittaamalla voidaan löytää ehtolauseita, joiden kaikkia haaroja ei ole testattu"
        },
        {
          "right": true,
          "text": "Mutaatiotestauksen ideana on varmistaa, että testit huomaavat sen jos koodiin tulee bugeja"
        },
        {
          "right": false,
          "text": "Lasilaatikkotestauksella testataan sovelluksen tarjoamaa käyttökokemusta, eli se kohdistuu lähinnä käyttöliittymän testaamiseen"
        },
        {
          "right": false,
          "text": "Jos koodin rivikattavuus on 100%, voidaan olla lähes varmoja, että koodi toimii oikein"
        },
        {
          "right": false,
          "text": "Yksikkötestaus suoritetaan useimmiten ohjelman tilaajaorganisaation toimesta"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "3",
      "id": 110,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Integraatiotestauksessa pyritään varmistamaan sovelluksen suurempien, useimmista luokista tai moduuleista koostuvien kokonaisuuksien toiminta"
        },
        {
          "right": true,
          "text": "Regressiotestaus pyrkii varmistamaan, että ohjelmiston jo aiemmin toimineet osat eivät hajoa uusien muutosten yhteydessä"
        },
        {
          "right": true,
          "text": "Regressiotestejä on mahdollista tehdä Pythonin unittest-kirjastolla"
        },
        {
          "right": false,
          "text": "Eräs ketterän kehityksen hyvistä puolia on se, että regressiotestaukselle ei käytännössä ole mitään tarvetta"
        },
        {
          "right": false,
          "text": "Ketterässä kehityksessä koodin integraatiotestauksen suorittaa kehittäjäorganisaation QA-tiimi"
        },
        {
          "right": false,
          "text": "Ketterä kehitys ja vesiputousmalli ovat monin paikoin hyvin erilaisia menetelmiä. Koodin integrointi ja integraatiotestaus tapahtuu kuitenkin molemmissa samalla tavalla"
        },
        {
          "right": false,
          "text": "Regressiotestaus tapahtuu lähes aina manuaalisesti"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "3",
      "id": 111,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Oikeaoppista TDD:tä sovellettaessa kirjoitetaan käytännössä aina yksi testi joka ei mene läpi ja sen jälkeen mahdollisimman yksinkertainen koodi, joka läpäisee testin"
        },
        {
          "right": true,
          "text": "Oikeaoppista TDD:tä sovellettaessa koodin sisäistä rakennetta parannellaan jos huomataan sen rapistuneen, tällöin testien halutaan edelleen menevän läpi"
        },
        {
          "right": true,
          "text": "Mock-olioita käytetään testauksessa varmistamaan, että testattava olio tai metodi kommunikoi riippuvuuksiensa kanssa oikein"
        },
        {
          "right": false,
          "text": "TDD:n ikävä puoli on se, että koodista saattaa tulla sen soveltamisen seurauksena ylläpidettävyydeltään huonoa"
        },
        {
          "right": false,
          "text": "TDD soveltuu erityisen hyvin ns. legacy-järjestelmien, eli vanhojen ja ylläpidettävyyden kannalta hankalien ohjelmistojen laajentamisen välineeksi"
        },
        {
          "right": false,
          "text": "Oikeaoppista TDD:tä käytettäessä ohjelmoitavat luokat ja metodit tulee aina suunnitella erittäin tarkasti ennen ohjelmoinnin aloittamista"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "3",
      "id": 112,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Integraatiohelvetti viittaa siihen, että vasta ohjelmintivaiheen lopussa tapahtuva luokkien ja komponenttien integrointi aiheuttaa useimmiten suuria ongelmia, riippumatta siitä miten huolellisesti ohjelmisto on suunniteltu"
        },
        {
          "right": true,
          "text": "Jatkuva integraatio pyrkii tuomaan koodin komponenteissa olevat yhteensopivuusongelmat esille niin nopeasti kuin mahdollista"
        },
        {
          "right": true,
          "text": "On oleellista jatkuvan integraation suorittamisen kannalta, että Python-projektissa tiedosto pyproject.toml on lisätty versionhallintaan"
        },
        {
          "right": false,
          "text": "Smoke testiksi kutsutaan testiä, missä järjestelmä yritetään saada kaatumaan tai 'savuamaan' kuormittamalla sitä äärimmäisen suurella operaatiomäärällä"
        },
        {
          "right": false,
          "text": "Jatkuvan integraation noudattaminen on helppoa, riittää kun joku konfiguroi tiimille  esim GitHub Actionin"
        },
        {
          "right": false,
          "text": "Jos jatkuvan integraation palvelin huomaa koodissa jonkin ongelman, riittää että ongelma korjataan seuraavan sprintin alkuun mennessä"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "3",
      "id": 113,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Jatkuva toimittaminen (continuous deployment) vaatii erittäin suurta automaation astetta testauksen ja sovelluksen tuotantoon viemisen suhteen"
        },
        {
          "right": true,
          "text": "Jatkuvaa toimitusvalmius (continuous delivery) (continuous delivery) automatisoi ohjelmiston laadunhallinnan, mutta jättää ihmisen ratkaistavaksi missä vaiheessa uusia versiota julkaistaan loppukäyttäjille"
        },
        {
          "right": true,
          "text": "Staging-ympäristön on konfuguraatioiltaan syytä olla mahdollisimman lähellä sovelluksen tuotantoympäristöä"
        },
        {
          "right": false,
          "text": "Deployment pipelinen käyttö nopeuttaa ohjelmakoodin kääntämistä rinnakkaistamalla käännöksen vaiheet useille eri koneille"
        },
        {
          "right": false,
          "text": "Jatkuva toimittaminen (continuous deployment) (continuous deployment) sopii ainoastaan hyvin pienille yrityksille, esimerkiksi alkuvaiheessa oleville start upeille"
        },
        {
          "right": false,
          "text": "Staging-ympäristö ja CI-palvelin tarkoittavat samaa asiaa"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "3",
      "id": 114,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Tutkiva testaus kannattaa kohdistaa sprintin aikana toteutettuihin uusiin toimintoihin"
        },
        {
          "right": true,
          "text": "Kokenut testaaja voi löytää tutkivaa testaamista käyttäen virheitä, jotka jäävät helposti automatisoitujen testien ulottumattomiin"
        },
        {
          "right": false,
          "text": "Tutkiva testaaminen sopii erityisen hyvin regressiotestaukseen"
        },
        {
          "right": false,
          "text": "Jos ohjelmistoprojektissa tehdään paljon tutkivaa testaamista, ei yksikkö- ja integraatiotestausta tarvitse tehdä"
        },
        {
          "right": false,
          "text": "Tutkiva testaaminen perustuu testitapausten huolelliseen etukäteissuunnitteluun"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "4",
      "id": 117,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Canary releaseissa osa todellisista loppukäyttäjistä ohjataan käyttämään järjestelmän uutta versiota"
        },
        {
          "right": true,
          "text": "Feature toggle on eräs tekniikka canary releasejen toteuttamiseen"
        },
        {
          "right": true,
          "text": "Canary releaseja käytettäessä sovelluksen toimintaa on monitoroitava tarkasti"
        },
        {
          "right": true,
          "text": "Feature togglen avulla koodissa olevia keskeneräisiä toiminnallisuuksia voidaan piilottaa loppukäyttäjiltä"
        },
        {
          "right": false,
          "text": "Käytettäessä canary releaseja, sovelluskehittäjät testaavat sovelluksen toimivuutta ns. staging-palvelimella"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "4",
      "id": 118,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Käytettäessä feature brancheja uusi toiminnallisuus, esim. user story toteutetaan ensin omassa versionhallinnan haarassa, ja yhdistetään kehityksen päähaaraan vasta kun se on valmiina"
        },
        {
          "right": true,
          "text": "Trunk based development ei suosi feature branchien käyttöä, kaikki koodi pyritään integroimaan välittömästi pääkehityshaaraan"
        },
        {
          "right": true,
          "text": "DevOps-toimintamallia sovellettaessa kehittäjät ja järjestelmäylläpitäjät toimivat tiiviissä yhteistyössä"
        },
        {
          "right": true,
          "text": "Infrastructure as Code tarkottaa suurinpiirtein sitä, että sovelluksien käyttämiä palvelinympäristöjä hallinnoidaan koodin avulla käsiteltävillä konfiguraatiotiedostoilla, joita voidaan esim. tallettaa versionhallintaan normaalin ohjelmakoodin tapaan"
        },
        {
          "right": false,
          "text": "Trunk based development on kiinnostava idea, mutta se sopii lähinnä pienten startup-yritysten käyttöön"
        },
        {
          "right": false,
          "text": "Trunk based development -kehitysmallia on mahdotonta soveltaa, jos sovellukseen on toteutettava niin isoja toiminnallisuuksia, että niiden tekemiseen menee kauemmin kuin päivä"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "4",
      "id": 119,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston arkkitehtuuri määrittelee sen rakenteen suuret linjat, eli minkälaisista rakennekomponenteista ohjelmisto koostuu"
        },
        {
          "right": true,
          "text": "Arkkitehtuuri ohjaa sitä miten sovellusta tulee jatkokehittää"
        },
        {
          "right": false,
          "text": "Ohjelmiston toimintaympäristön ja toteutusteknologioiden ei tule koskaan antaa vaikuttaa ohjelmiston arkkitehtuuriin"
        },
        {
          "right": false,
          "text": "Arkkitehtuurityyli määrää sen, mitä luokkia ja metodeja ohjelmistossa on"
        },
        {
          "right": false,
          "text": "Ohjelmiston ei-toiminnallisilla vaatimuksilla ei ole vaikutusta sen arkkitehtuuriin"
        },
        {
          "right": false,
          "text": "Sovelluksen arkkitehtuuri on pysyvä, ts. alussa valittua arkkitehtuuria ei koskaan muuteta."
        }
      ]
    },
    {
      "courseId": "2",
      "part": "4",
      "id": 120,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kerrosarkkitehtuuri tähtää siihen, että tietyn kerroksen koodiin tehtävät muutokset aiheuttaisivat mahdollisimman vähän muutoksia sovelluksen muihin osiin"
        },
        {
          "right": true,
          "text": "Kerrosarkkitehtuuria sovellettaessa käyttöliittymästä huolehtiva koodi on eristetty esimerkiksi sovelluslogiikaasta huolehtivasta koodista"
        },
        {
          "right": true,
          "text": "Mikropalveluarkkitehtuuri mahdollistaa sovelluksen toteuttamisen useita eri ohjelmointikieliä käyttäen"
        },
        {
          "right": false,
          "text": "Mikropalveluarkkitehtuuria sovellettaessa jokainen user story toteutetaan omana mikropalveluna"
        },
        {
          "right": false,
          "text": "Kerrosarkkitehtuurissa eri kerroksilla oleva koodi keskustelee ainoastaan verkon välityksellä, eli esimerkiksi käyttöliittymästä ei koskaan kutsuta suoraan sovelluslogiikkakerroksen metodeja"
        },
        {
          "right": false,
          "text": "Mikropalveluarkkitehtuurin suurimpia etuja on niiden helppo testaaminen ja debuggaaminen"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "4",
      "id": 121,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Inkrementaalinen arkkitehtuuri tarkoittaa sitä, että ohjelman lopullinen arkkitehtuuri muodostuu projektin edetessä"
        },
        {
          "right": true,
          "text": "Inkrementaalista arkkitehtuuria sovellettaessa esimerkiksi sovelluksen kerrosrakenne toteutetaan ainakin jossain muodossa jo varhaisessa vaiheessa projektia, jopa ensimmäisessä sprintissä"
        },
        {
          "right": true,
          "text": "Ketteriä menetelmiä sovellettaessa tunnustetaan se tosiasia, että vaatimusten tapaan saattaa myös arkkitehtuuria joutua mukauttamaan projektin aikana"
        },
        {
          "right": false,
          "text": "Jos kehitystiimi rakentaa arkkitehtuurin inkrementaalisesti, ei arkkitehtuuria dokumentoida millään tavalla"
        },
        {
          "right": false,
          "text": "Walking skeleton tarkoittaa koodia, joka tullaan heittämään pois kun ohjelman ominaisuudet valmistuvat"
        },
        {
          "right": false,
          "text": "Inkrementaalinen suunnittelu ja arkkitehtuuri takaavat sen, että ohjelmistosta tulee rakenteeltaan laadukas"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "4",
      "id": 122,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kapseloinnilla tarkoitetaan toteutustason yksityiskohtien piilottamista"
        },
        {
          "right": true,
          "text": "Metoditason koheesio pyrkii siihen, että yksittäinen metodi keskittyy ainoastaan yhteen asiaan kerrallaan. Jos metodi tekee liian monia asioita, sen koheesio paranee jos metodi jaetaan useammaksi metodiksi"
        },
        {
          "right": true,
          "text": "Mikropalveluissa yksittäisen palvelun koheesion taso on korkea ja ne kapseloivat sisäiset toimintaperiaatteensa muilta palveluilta"
        },
        {
          "right": true,
          "text": "Luokkatason koheesio ja single responsibility -periaate tarkoittavat samaa asiaa"
        },
        {
          "right": false,
          "text": "Ohjelmiston sisäisellä laadulla tarkoitetaan sitä, että koodin käyttämät tietorakenteet ja algoritmit tarjoavat optimaalisen nopean toiminnallisuuden kuhunkin käyttötarkoitukseen"
        },
        {
          "right": false,
          "text": "Single responsibility -periaate ei ole relevantti käytettäessä muita ohjelmointiparadigmoja kuin olio-ohjelmointia"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "4",
      "id": 123,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Code smell eli koodihaju on merkki siitä, että koodin sisäisessä laadussa on todennäköisesti ongelmia"
        },
        {
          "right": true,
          "text": "Tekninen velka on metafora sille, että koodin sisäinen rakenne on heikkoa"
        },
        {
          "right": false,
          "text": "Nykyisten parhaiden käytänteiden mukaan koodi tulee kommentoida huolellisesti, esim. jokaisesta koodissa olevasta muuttujasta tulee selittää mikä tietoa muuttuja tallettaa"
        },
        {
          "right": false,
          "text": "Refaktoroinnilla muutetaan luokkien metodeja siten, että niiden toiminnallisuus vastaa paremmin asiakkaiden tarpeita"
        },
        {
          "right": false,
          "text": "Refaktorointia ei kannata suorittaa jokaisessa sprintissä, se laskisi liikaa kehitystiimin velositeettia"
        },
        {
          "right": false,
          "text": "Teknistä velkaa tulee välttää kaikissa olosuhteissa"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "5",
      "id": 127,
      "title": "Mitkä seuraavista ovat leanin mukaan hukkaa (muda)?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Välivarastointi"
        },
        {
          "right": true,
          "text": "Ylituotanto"
        },
        {
          "right": true,
          "text": "Odotus"
        },
        {
          "right": true,
          "text": "Tuotteessa olevat viat"
        },
        {
          "right": false,
          "text": "Taukojen pitäminen"
        },
        {
          "right": false,
          "text": "Koulutus"
        },
        {
          "right": false,
          "text": "Toimintojen ulkoistaminen"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "5",
      "id": 128,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kaizen tarkoittaa työskentelytapojen jatkuvaan parantamisen kannustavaa asennetta"
        },
        {
          "right": true,
          "text": "Jatkuva parantaminen pyrkii etsimään ongelmien perimmäisen syyn (root cause) ja eliminoimaan sen"
        },
        {
          "right": true,
          "text": "Pull- tai JIT-periaatteilla tarkoitetaan sitä, että tuotetta tai sen tarvitsemia komponentteja valmistetaan vasta tilauksesta, eli ei varalta etukäteen"
        },
        {
          "right": true,
          "text": "Kanban on eräs työkalu pull- tai JIT-periaatteen toteuttamiseen"
        },
        {
          "right": false,
          "text": "Lean pyrkii maksimoimaan tuotantolaitteiden käyttöasteen"
        },
        {
          "right": false,
          "text": "Kaizen ei kosketa yrityksen rivityöntekijöitä, keskitason johto hoitaa kaizeniin liittyvät asiat"
        },
        {
          "right": false,
          "text": "Läpimenoaika (leadtime) tarkoittaa sitä, miten nopeasti jatkuvassa parannuksessa saadaan eliminoitua hukkaa aiheuttavat tekijät"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "5",
      "id": 129,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean suosii periaatetta, jossa päätökset tehdään mahdollisimman myöhäisessä vaiheessa, mutta ei kuitenkaan liian myöhään"
        },
        {
          "right": true,
          "text": "Osassa 2 mainitun 'hyvän backlogin' kriteerejä noudattava backlog on leanin periaatteiden mukainen"
        },
        {
          "right": false,
          "text": "Build quality in -periaatteen mukaan kannattaa keskittyä kalliimpien tuotteiden valmistamiseen. Esim. Applella periaate näkyy siinä, että firmalla ei ole halpoja puhelinmalleja"
        },
        {
          "right": false,
          "text": "Lean pyrkii läpimenoajan (leadtime) optimointiin henkilökohtaisilla bonuksilla"
        },
        {
          "right": false,
          "text": "Vesiputousmallissa suositut, hyvin tarkkaan tehdyt vaatimusmäärittelydokumentit ovat leanin periaatteiden mukaisia"
        },
        {
          "right": false,
          "text": "Vesiputousmallin suosima periaate tehdä sovelluksen testaus erillisenä lopussa tapahtuvana vaiheena on leanin periaatteiden mukainen käytäntö"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "5",
      "id": 130,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean-ideaalin mukainen johtaja hallitsee myös käytännön hands on -työskentelyn"
        },
        {
          "right": true,
          "text": "Tuotekehitykseen sovellettaessa lean pyrkii kiihdyttämään oppimista"
        },
        {
          "right": true,
          "text": "Leanin tuotekehityksen periaatteiden mukaan epävarmat asiat kannattaa selvittää varhaisessa vaiheessa"
        },
        {
          "right": false,
          "text": "Leanin tuotekehityksen 'set based concurrent development'-menetelmän idea on sama kuin iteratiivisessa ohjelmistokehityksessä, tuotetta laajennetaan ja parannellaan vähitellen iteraatio iteraatiolta"
        },
        {
          "right": false,
          "text": "Go see (kenchi genbutsu) -periaateen mukaan työntekijöiden tulee raportoida tekemisistä tarkasti managerille"
        },
        {
          "right": false,
          "text": "Scrum ei ole leanin periaatteiden mukainen, koska se on push-systeemi"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "5",
      "id": 131,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Scrum of scrums on periaate, jonka avulla pyritään hallitsemaan useita kehitystiimejä, jotka työskentelevät saman tuotteen parissa"
        },
        {
          "right": true,
          "text": "SAFe on hyvin tarkkaan dokumentoitu ja runsaasti erilaisia periaatteita ja henkilörooleja sisältävä laajan mittakaavan ketterä menetelmäkehys"
        },
        {
          "right": true,
          "text": "LeSS:iä sovellettaessa oletuksena on, että kehitetään yhtä tuotetta, jolla on yksi product owner. LeSS ei ota kantaa siihen, miten eri tuotteita kehittävät tiimit suhtautuvat toisiinsa"
        },
        {
          "right": false,
          "text": "LeSS lisää Scrumiin joukon kokonaan uudentyyppisiä palavereja sekä henkilörooleja"
        },
        {
          "right": false,
          "text": "LeSS suosittelee jakamaan työtä siten, että esimerkiksi yksi tiimi huolehtii sovelluksen frontendistä, yksi sovelluksen backendista ja yksi sovelluksen tietokannasta"
        },
        {
          "right": false,
          "text": "9 tai enemmän tiimiä sisältävässä LeSS huge -versiossa jokaiselle tiimille on varattu oma product backlog"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "5",
      "id": 132,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ketteriä menetelmiä käytetään nykyään useimpien tutkimusten mukaan yli 50% kaikista ohjelmistoprojekteista"
        },
        {
          "right": true,
          "text": "Tutkimusten mukaan yllättävän monet ketteriä menetelmiä soveltavat eivät kuitenkaan noudata monia ketteryyden perusperiaatteita esimerkiksi lyhyitä iteraatiota"
        },
        {
          "right": true,
          "text": "Erään tutkimuksen mukaan Jatkuva toimittaminen (continuous deployment) on ollut käytössä jopa kolmasosalla vastaajista"
        },
        {
          "right": false,
          "text": "Ketterien menetelmien nousu näyttää olevan takana, esim. Yhdysvaltojen hallituksen alaisissa projekteissa ketteriä menetelmiä ei enää käytetä yhtä paljon kuin esimerkiksi 10 vuotta sitten, kun Scrum-hype oli suurimmillaan"
        },
        {
          "right": false,
          "text": "Tutkimusten mukaan suuret ohjelmistoprojektit onnistuvat suuremmalla todennäköisyydellä kuin pienet projektit"
        },
        {
          "right": false,
          "text": "Tutkimusten mukaan suurin ketteryyden tuoma hyöty on sen kustannustehokkuus"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "6",
      "id": 137,
      "title": "(1) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Smartlyn toimiala on Facebook-mainostus"
        },
        {
          "right": true,
          "text": "Tärkeä motivaatio automaattisille testeille on varmistua siitä, että jo toimineet asiat eivät hajoa kun koodia muokataan"
        },
        {
          "right": true,
          "text": "End to end -testit testaavat järjestelmää kokonaisuudessaan, kurssin käyttämän terminologian <i>järjestelmätestit</i> ovat siis end to end -testejä"
        },
        {
          "right": false,
          "text": "Smartyllä tiimirakene vastaa ohjelmiston arkkitehtuurisia kerroksia, eli esim. sovelluksen käyttöliittymästä on vastuussa oma tiiminsä"
        },
        {
          "right": false,
          "text": "Automatisoidut testit ovat hyvä keino löytää ohjelmistosta kokonaan uudenlaisia bugeja"
        },
        {
          "right": false,
          "text": "Kattava yksikkötestaus on riittävä tapa saavuttaa täysi luottamus sille, että ohjelmisto toimii oikein"
        },
        {
          "right": false,
          "text": "End to end -testeissä kutsutaan myös ulkoisten palveluiden esimerkiksi Facebookin rajapintoja"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "6",
      "id": 138,
      "title": "(2) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "API-testeillä voidaan testata esimerkiksi yksittäistä mikropalvelua kokonaisuudessaan"
        },
        {
          "right": true,
          "text": "Yksikkötestit eivät käytä tietokantaa"
        },
        {
          "right": true,
          "text": "End to end -testit suoritetaan käyttöliittymän läpi"
        },
        {
          "right": true,
          "text": "End to end -testien huono puoli on se, että ne ovat usein riippuvaisia käyttöliittymässä esitettävän datan muodosta"
        },
        {
          "right": false,
          "text": "Integraatiotestit eivät käytä tietokantaa"
        },
        {
          "right": false,
          "text": "Yksikkötestit tekevät usein HTTP-pyyntöjä verkossa oleviin rajapintoihin"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "6",
      "id": 139,
      "title": "(3) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Testipyramidi antaa erään suosituksen sille, kuinka paljon testausta kannattaa kohdentaa eri testauksen tasoille"
        },
        {
          "right": true,
          "text": "Monien startupien tapaan Smartyllä oli tilanne aluksi se, että automatisoituja testejä ei ollut"
        },
        {
          "right": true,
          "text": "Jos koodissa havaitaan bugi, kannattaa bugikorjauksen lisäksi tehdä testit, jotka varmistavat ettei sama bugi palaa koodiin uudelleen"
        },
        {
          "right": false,
          "text": "Kokonaan ilman automaattisia testejä olevan 'legacy'-koodin testauksen automatisointi kannattaa aloittaa yksikkötesteistä"
        },
        {
          "right": false,
          "text": "Startup-yrityksen kannattaa rakentaa kattavat automaattiset testit jo siinä vaiheessa kun ns. 'product market -fit' on vielä löytymättä"
        },
        {
          "right": false,
          "text": "Testipyramidin mukaista jakaumaa eri tason testien määrään suhteen kannattaa noudattaa aina heti ohjelmakomponentin, esim. mikropalvelun toteuttamisen ensimmäisestä päivästä alkaen"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "6",
      "id": 140,
      "title": "(4) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Smartly ei enää käytä ollenkaan end to end -testejä sillä kokemus niistä oli huono, testit rikkoontuivat välillä ilman mitään syytä"
        },
        {
          "right": true,
          "text": "Smartlyllä koodiin tehtävät lisäykset katselmoidaan pull requestien (PR) kautta"
        },
        {
          "right": true,
          "text": "Smartly julkaisee feature togglejen avulla joitain koodiin tulevia muutoksia/toiminnallisuuksia aluksi vain osalle asiakkaista"
        },
        {
          "right": false,
          "text": "Smartlyllä on yhtenäiset testauskäytänteet, tämän takia jokainen tiimi testaa vastuullaan olevaa ohjelmiston osaa samalla tavalla"
        },
        {
          "right": false,
          "text": "Smartlyllä ohjelmiston laadusta vastaa erillinen laadunhallintaan keskittyvä QA-tiimi"
        },
        {
          "right": false,
          "text": "Smartlyllä koodia testataan manuaalisesti ennen kuin se päästetään tuotantokäyttöön"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "6",
      "id": 141,
      "title": "(1) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Saavutettavuus/esteettömyys tarkoittaa sitä, että tuotteen on tarjottava sama kokemus käyttäjän rajoitteista huolimatta"
        },
        {
          "right": true,
          "text": "Käyttökokemussuunnittelun (UX design) on mukautunut ketteryyteen paljon ohjelmistokehitystä hitaammin"
        },
        {
          "right": true,
          "text": "Käyttäjäkeskeinen suunnittelu (User centric design) on iteratiivinen menetelmä käyttökokemussuunnitteluun"
        },
        {
          "right": false,
          "text": "Käyttökokemussuunnittelun (UX design) katsotaan syntyneen 1980-luvulla piilaaksossa Microsoftin tuotekehityslaboratoriossa"
        },
        {
          "right": false,
          "text": "Tarkka, etukäteen tapahtuva suunnittelu on onnistuneen käyttökokemuksen luomisen edellytys"
        },
        {
          "right": false,
          "text": "Käyttäjäkeskeinen suunnittelu (User centric design) määrittelee erään tarkan ohjeiston sille, miten käyttökokemussuunnittelua tulee tehdä"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "6",
      "id": 142,
      "title": "(2) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean UX suosittelee sijoittamaan designerit osaksi ohjelmistokehitystiimejä"
        },
        {
          "right": true,
          "text": "Lean UX pyrkii siihen että työtä edistetään pienissä paloissa ja eritasoisia aikaansaannoksia julkaistaan nopeassa syklissä"
        },
        {
          "right": true,
          "text": "Erehdykset salliva kulttuuri kuuluu Lean UX:ään"
        },
        {
          "right": false,
          "text": "Ketterässä käyttökokemussuunnittelussa (Agile UX) ovat avainasemassa tarkat eli ns. pixel perfect -tasolla tehdyt layout-suunnitelmat"
        },
        {
          "right": false,
          "text": "Lean UX:ssä käyttökokemuksen määrittelee firman johtava suunnittelija, eli ns. UX-ninja"
        },
        {
          "right": false,
          "text": "Lean UX suosittelee että käyttäjätestaus tehdään kontrolloiduissa laboratorio-olosuhteissa"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "6",
      "id": 143,
      "title": "(3) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Design sprintti on menetelmä, jonka avulla käydään lyhyessä ajassa läpi kaikki design-prosessin vaiheet, motivaationa esim. alustavan liiketoimintakonseptin luominen"
        },
        {
          "right": true,
          "text": "Design systeemi määrittelee esimerkiksi yrityksen web-sivuston graafisen ulkoasun"
        },
        {
          "right": true,
          "text": "Design systeemi saattaa tarjota joukon muotoilultaan valmiita käyttöliittymäkomponentteja"
        },
        {
          "right": false,
          "text": "Oikeaoppisessa Lean UX -menetelmässä joka toinen sprintti on Design sprintti ja joka toinen normaali sovelluskehitykseen keskittyvä sprintti"
        },
        {
          "right": false,
          "text": "Design sprintin pituus on aina viikko"
        },
        {
          "right": false,
          "text": "Käytettävyyssuunnittelu on taidetta, tieteellisellä ajattelulla ei ole roolia käytettävyyssuunnittelussa"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "7",
      "id": 148,
      "title": "(1) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Nykyään on tyypillistä, että sovelluskehittäjä joutuu käyttämään useita eri ohjelmointikieliä jopa yhdessä projektissa työskennellessään"
        },
        {
          "right": true,
          "text": "Ei ole olemassa vain yhtä tapaa kouluttautua ohjelmistoalalle"
        },
        {
          "right": false,
          "text": "Ketterän manifestin mukaiset itseorganisoituvat tiimit ovat utopia, niillä ei ole sijaa nykyisessä bisneksessä, tiimien tulee työskennellä tiukan ulkoisen ohjauksen varassa"
        },
        {
          "right": false,
          "text": "Softa-alalla menestyksekkäästi toimimiseen tarvitaan nykyään täysin erilainen mindset, eli mielenlaatu/ajattelutapa kuin 80-luvulla"
        },
        {
          "right": false,
          "text": "Jos osaat hyvin yhden teknologian, pärjäät sen avulla ohjelmistoalalla jopa vuosikymmeniä"
        },
        {
          "right": false,
          "text": "On parasta koostaa ohjelmistotiimi mahdollisimman samankaltaisista ihmisistä, liika erilaisuus ihmisten taustoissa vaikeuttaa asiakkaiden tarpeiden ymmärtämistä"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "7",
      "id": 149,
      "title": "(2) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston uusia versiota kannattaa viedä (eli 'shipata') tuotantoon niin usein kuin mahdollista, jopa yli 10 kertaa päivässä"
        },
        {
          "right": true,
          "text": "Ensimmäisenä mieleen tuleva tekninen ratkaisu kannattaa usein kyseenalaistaa"
        },
        {
          "right": false,
          "text": "Isojen IT-organisaatioiden on huomattavasti helpompi ottaa huomioon asiakkaan tarpeet kuin pienten ketterien tiimien"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjien ei ole tarvetta ymmärtää bisneksen tarpeita tai sovelluksen arkkitehtuuriratkaisuja, riittää että sovelluskehittäjä maksimoi tuotantokäyttöön vietävän koodin määrään"
        },
        {
          "right": false,
          "text": "Sovelluksen laadunhallinta kannattaa tehdä laadunhallintaan varatuissa sprinteissä, joita pidetään noin 4-5 sprintin välein"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "7",
      "id": 150,
      "title": "(3) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Retrospektiiveja ei tulisi jättää pitämättä"
        },
        {
          "right": true,
          "text": "Sprintin aikaisesta työskentelystä noin 10% tulisi kohdistua seuraavien sprinttien aikana toteutettavien storyjen valmisteluun"
        },
        {
          "right": false,
          "text": "Paras sprintin pituus on 4 viikkoa"
        },
        {
          "right": false,
          "text": "Eräs Elisan parhaista käytänteistä ovat ns. tekniset storyt, eli storyt joiden toteuttaminen ei yleensä näy käyttäjälle mitenkään"
        },
        {
          "right": false,
          "text": "Teknistä velkaa ei tule ottaa missään olosuhteissa"
        },
        {
          "right": false,
          "text": "Niin sanotun Nokia-testin voi läpäistä ainoastaan, jos ennen toteutusvaihetta pidetään joukko spesifikaatiosprinttejä, joiden aikana ohjelmisto määritellään tarkasti"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "7",
      "id": 151,
      "title": "(4) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Hyvin toimiva jatkuva integraatio (CI) vaikuttaa parhaimmillaan organisaation suorituskykyyn jopa liiketoiminnan tasolla"
        },
        {
          "right": true,
          "text": "Yli muutaman päivän pituisia feature brancheja ei kannata käyttää"
        },
        {
          "right": true,
          "text": "Jos jatkuvan integraation (CI) 'build' hajoaa, eli koodi ei käänny, tai jokin testi ei mene läpi, tulee ongelma korjata heti"
        },
        {
          "right": true,
          "text": "Sen koodin määrä joka ei ole tuotantokäytössä tulee minimoida"
        },
        {
          "right": false,
          "text": "Jatkuva integraatio (CI) toimii ainoastaan sellaisissa ohjelmistoissa, joita kehittää yksi tai korkeintaan pari tiimiä. Isommassa skaalassa ohjelmistoja kehitettäessä CI:n käyttö olisi liian suuri hidaste"
        },
        {
          "right": false,
          "text": "Jatkuva integraation (CI) soveltaminen onnistuu ainoastaan pilvipalveluina toteutetuille web-sovelluksille"
        },
        {
          "right": false,
          "text": "CI-palvelimen status, eli onko kaikki hyvin vai onko esim. testeissä ongelmia, tulee pitää kehitystiimin sisäisenä asiana"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "7",
      "id": 152,
      "title": "(5) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Suurin hukka ohjelmistokehityksessä on se, että rakennetaan asiakkaan tarpeiden kannalta kokonaan vääränlainen järjestelmä"
        },
        {
          "right": true,
          "text": "Lean-startup-menetelmällä testataan idean tarpeellisuutta/hyödyllisyyttä oikeilla käyttäjillä"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä jokaisella tiimillä voi olla oma Definition of done"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä osan tiimeistä kannattaa erikoistua joihinkin osa-alueisiin, esimerkiksi testaamiseen"
        },
        {
          "right": false,
          "text": "Ohjelmistokehittäjille kannattaa antaa henkilökohtaisia suoriutumistavoitteita jotka vaikuttavat suoraan palkkaukseen, näin myös tiimit saadaan työskentelemään mahdollisimman tehokkaasti"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä eri tiimien jäsenet eivät yleensä keskustele suoraan keskenään, keskustelu hoidetaan tiimien scrum masterien kautta"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "7",
      "id": 153,
      "title": "(1) Mitkä seuraavista Marko Klemetin luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Erään määritelmän mukaan DevOps tarkoittaa sovelluskehittäjien ja järjestelmäylläpitäjien välistä yhteistyötä"
        },
        {
          "right": true,
          "text": "DevOpsiin liittyvät työkalut auttavat keräämään monenlaista informaatiota tuotantoympäristöstä ja täten tekemään sovelluksen toiminnallisuuteen liittyviä kokeiluja"
        },
        {
          "right": true,
          "text": "Sovellus tulisi viedä tuotantoympäristöön heti kehitystyön alkuvaiheessa, jopa jo ensimmäisenä päivänä, ennen kuin sovelluksessa on juurikaan valmiina olevaa toiminnallisuutta"
        },
        {
          "right": true,
          "text": "Eräs pilviympäristöjen hyvistä puolista on se, että ne antavat sovelluskehittäjille mahdollisuuden julkaista koodia suoraan tuotantoympäristöön"
        },
        {
          "right": false,
          "text": "DevOpsia soveltamalla on mahdollista korvata testausautomaatio"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "7",
      "id": 154,
      "title": "(2) Mitkä seuraavista Marko Klemetin luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Design-systeemi dokumentoi yrityksen visuaalisen ilmeen ja saattaa jopa tarjota uudelleenkäytettäviä, visuaalista ilmettä noudattavia käyttöliittymäkomponentteja"
        },
        {
          "right": true,
          "text": "ROBOT-framework on hyväksymistestauksen työkalu, missä testit kirjoitetaan asiakkaan ymmärtämällä kielellä"
        },
        {
          "right": true,
          "text": "GitHub actions ja Jenkins ovat jatkuvaan integraatioon (CI) sopivia palveluita"
        },
        {
          "right": false,
          "text": "Paras käytänne DevOpsin soveltamiseen on muodostaa yritykseen erillinen DevOps-tiimi, joka hoitaa tuotantojärjestelmien ja deployment-pipelinen konfiguroinnin"
        },
        {
          "right": false,
          "text": "Jatkuvan integraation (CI) ja jatkuvan julkaisun (CD) konfiguraatioita ei kannata tallettaa versionhallintaan"
        },
        {
          "right": false,
          "text": "DevOpsin käyttöönotossa tärkeimmässä asemassa on sopivien työkalujen tehokas käyttö"
        }
      ]
    },
    {
      "id": 301,
      "part": "1",
      "courseId": "4",
      "title": "Mitkä seuraavista ovat ohjelmiston elinkaaren vaiheita (lifecycle phases)?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "asiakkaan vaatimusten selvittäminen"
        },
        {
          "right": true,
          "text": "testaus"
        },
        {
          "right": true,
          "text": "ohjelmointi"
        },
        {
          "right": true,
          "text": "ohjelmiston rakenteen suunnittelu"
        },
        {
          "right": true,
          "text": "käytössä jo olevan ohjelmiston laajentaminen"
        },
        {
          "right": false,
          "text": "ohjelmiston dokumentointi"
        },
        {
          "right": false,
          "text": "suorituskyvyn parantaminen"
        },
        {
          "right": false,
          "text": "asiakastapaamiset"
        }
      ]
    },
    {
      "courseId": "4",
      "title": "Mitkä seuraavista vesiputousmallia koskevista väitteistä ovat  'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vesiputousmallia käytettäessä tulee määrittelyn ja suunnittelun tuotokset dokumentoida huolellisesti."
        },
        {
          "right": true,
          "text": "Jos käytetään vesiputousmallia ohjelmoijat eivät tyypillisesti osallistu vaatimusmäärittelyyn"
        },
        {
          "right": false,
          "text": "Yksi ensimmäisistä vesiputousmallin puolestapuhujista oli Winston Royce"
        },
        {
          "right": false,
          "text": "Yhdysvaltojen puolustusministeriö eli Department of Defence ei tänä päivänäkään salli muiden ohjelmistotuotantotapojen kuin vesiputousmallin käyttöä"
        },
        {
          "right": false,
          "text": "Avaruussukkuloiden käyttämä ohjelmisto rakennettiin vesiputousmallilla"
        },
        {
          "right": false,
          "text": "Vesiputousmalli sopii erityisen hyvin pitkäkestoisiin projekteihin sillä niissä on paremmin aikaa suorittaa aluksi perusteellinen vaatimusmäärittely"
        },
        {
          "right": false,
          "text": "Vesiputousmalli sopii erityisen hyvin pitkäkestoisiin projekteihin sillä niissä on paremmin aikaa suorittaa lopuksi kattava testaus"
        }
      ],
      "part": "1",
      "id": 302
    },
    {
      "courseId": "4",
      "title": "Seuraavassa luetellut ovat vesiputousmallin heikkouksia:",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Asiakkaan ei ole helppoa ilmaista sitä miten tilattavan ohjelmiston tulisi toimia"
        },
        {
          "right": true,
          "text": "Jos sovelluksen toteutuksen yksityiskohtia ei ollenkaan huomioida määrittelyn yhteydessä, saatetaan vaatimusmäärittelyyn kirjata asioita joita on aivan liian kallista toteuttaa."
        },
        {
          "right": true,
          "text": "Myöhäisessä vaiheessa havaitut ongelmat saattavat johtaa suuria kustannuksia aiheuttaviin muutoksiin."
        },
        {
          "right": true,
          "text": "Vesiputousmalli ei ota huomioon sovelluksen kehityksen aikana tapahtuvia mahdollisia bisnesympäristön muutoksia"
        },
        {
          "right": false,
          "text": "Vesiputousmalli asettaa liikaa testaamiseen liittyvää vastuuta ohjelmoijille"
        },
        {
          "right": false,
          "text": "Vesiputousmalli ei ota tarpeeksi huomioon kehitystiimin johtajien mielipiteitä"
        }
      ],
      "part": "1",
      "id": 303
    },
    {
      "courseId": "4",
      "title": "Ketterän manifestin ja sen periaatteiden mukaan",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Projektin edistymistä mitataan ensisijaisesti toimivan ohjelmiston etenemisellä"
        },
        {
          "right": true,
          "text": "Muutokseen reagoiminen on tärkeämpää kuin etukäteen laadittujen suunnitelmien noudattaminen"
        },
        {
          "right": true,
          "text": "Asiakkaalle kannattaa toimittaa käyttökelpoisia ohjelmiston versioita niin usein kuin mahdollista"
        },
        {
          "right": false,
          "text": "Dokumentointi ei ole tärkeää"
        },
        {
          "right": false,
          "text": "Yksilön vaikutus ohjelmistoprojektissa kannattaa minimoida"
        },
        {
          "right": false,
          "text": "Kommunikointi kannattaa ensisijaisesti hoitaa pikaviestimien avulla"
        },
        {
          "right": false,
          "text": "Tärkeiden deadlinejen koittaessa kehitystiimin tulee työskennellä normaalia suuremmalla intensiteetillä jotta ketteryys säilytetään"
        }
      ],
      "part": "1",
      "id": 304
    },
    {
      "courseId": "4",
      "title": "Ketterän manifestin periaatteiden mukaan",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sen lisäksi, että ketterässä kehityksessä vaatimukset voivat vaihtua, voi myös tiimi vaihtaa tarpeen mukaan toimintatapojaan"
        },
        {
          "right": true,
          "text": "Ohjelmistokehittäjille kannattaa antaa vapaus ja vastuu päättää omista työtavoista"
        },
        {
          "right": true,
          "text": "On oleellista että ohjelmistokehittäjät käyvät tiivistä interaktiota loppukäyttäjien kanssa"
        },
        {
          "right": true,
          "text": "Kannattaa suosia mahdollisimman yksinkertaisia ratkaisuja"
        },
        {
          "right": false,
          "text": "Ohjelmistoarkkitehdin rooli on keskeinen projektien onnistumisen kannalta"
        },
        {
          "right": false,
          "text": "Ketterässä kehittämisessä ohjelmiston laadulla ei ole kovin suurta merkitystä, pääasia on toteuttaa asiakkaalle mahdollisimman nopeasti uutta toiminnallisuutta"
        },
        {
          "right": false,
          "text": "Ohjelmistosta ei kannata tuottaa uusia versiota liian usein"
        }
      ],
      "part": "1",
      "id": 305
    },
    {
      "courseId": "4",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Product ownerin kannattaa olla hyvin selvillä ohjelmiston käyttäjien tarpeista"
        },
        {
          "right": true,
          "text": "Scrum ei suosittele yli kymmenen hengen tiimejä"
        },
        {
          "right": true,
          "text": "Scrumissa on mahdollista ja jopa suositeltavaa vaihtaa tarpeen mukaan kehitystiimin toimintatapoja"
        },
        {
          "right": false,
          "text": "Sprintin pituuden saa valita täysin vapaasti"
        },
        {
          "right": false,
          "text": "Scrumin tehokas soveltaminen on suoraviivaista sillä sen 'pelisäännöt' määrittelevä Scrum guide on vaan noin 15 sivua pitkä."
        },
        {
          "right": false,
          "text": "Scrum antaa tarkan ohjeistuksen sille miten sovelluskehittäjän tulee toimia"
        }
      ],
      "part": "1",
      "id": 306
    },
    {
      "courseId": "4",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Product owner määrää sen mitä ja missä järjestyksessä toiminnallisuutta toteutetaan sovellukseen"
        },
        {
          "right": true,
          "text": "Jos joku tiimin ulkopuolinen pyytää sprintin aikana kehitystiimiä toteuttamaan välittömästi jonkin uuden ja briljantin idean, tulee scrum masterin puuttua asiaan"
        },
        {
          "right": true,
          "text": "Scrum master auttaa byrokraattisten ongelmien (esim. kehitystiimillä ei ole käytössä sopivaa palvelinympäristöä) ratkaisemisessa"
        },
        {
          "right": false,
          "text": "Scrum master antaa työmääräarviot sovellukseen toteutettaville toiminnallisuuksille"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjät eivät saa lisätä uusia vaatimuksia product backlogille ilman product ownerin lupaa"
        },
        {
          "right": false,
          "text": "Scrum master päättää minkä asian parissa kukin kehitystiimin jäsen sprintin aikana työskentelee"
        },
        {
          "right": false,
          "text": "Product owner työskentelee scrum masterin alaisuudessa"
        }
      ],
      "part": "1",
      "id": 307
    },
    {
      "courseId": "4",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kehittäjätiimissä tulisi olla osaamista myös sovelluksen testaamiseen"
        },
        {
          "right": true,
          "text": "Scrum suosittelee että tiimi määrittelee yhteisen laatustandardin, joka määrittelee mitä kaikkea toiminnallisuuden toteuttaminen valmiiksi asti pitää sisällään"
        },
        {
          "right": false,
          "text": "Lähellä deadlineja myös puutteellisesti toteutetut käyttäjävaatimukset voidaan hyväksyä osaksi sprintissä julkaistavaa ohjelmistoversiota"
        },
        {
          "right": false,
          "text": "Scrum master määrittelee kehitystiimin työskentelytavat"
        },
        {
          "right": false,
          "text": "Kehitystiimi saa itse valita mitä käyttäjän vaatimuksia se kussakin sprintissä toteuttaa"
        },
        {
          "right": false,
          "text": "Yhden sprintin aikana toteutetut vaatimukset testataan yleensä vasta seuraavassa sprintissä"
        },
        {
          "right": false,
          "text": "Scrum suosittelee, että järjestelmäylläpitäjät eivät työskentele osana Scrum-tiimejä"
        }
      ],
      "part": "1",
      "id": 308
    },
    {
      "courseId": "4",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sprintin suunnittelussa päätetään mitä seuraavan sprintin aikana on tarkoitus toteuttaa"
        },
        {
          "right": true,
          "text": "Daily scrum -palavereissa on tarkoitus tuoda esiin seikkoja, jotka mahdollisesti hidastavat kehitystyötä"
        },
        {
          "right": true,
          "text": "Sprintin katselmointien (sprint review) yhteydessä saatetaan product backlogille lisätä uusia vaatimuksia"
        },
        {
          "right": false,
          "text": "Product owner ei osallistu sprintin suunnitteluun. Sille ei ole tarvetta, sillä kehittäjätiimi työskentelee itseorganisoituvasti"
        },
        {
          "right": false,
          "text": "Termit sprint backlog ja product backlog tarkottavat käytännössä samaa"
        },
        {
          "right": false,
          "text": "Asiakkaat voivat antaa palautetta sovelluksesta Daily scrum -palaverissa"
        },
        {
          "right": false,
          "text": "Sprintin katselmoinnissa (sprint review) jokainen sovelluskehittäjä raportoi omista sprintin aikaisista tekemisistään scrum masterille"
        }
      ],
      "part": "1",
      "id": 309
    },
    {
      "courseId": "4",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Retrospektiivin tarkoituksena on optimoida sovelluskehittäjien työskentelytapaa"
        },
        {
          "right": true,
          "text": "Scrum ei ota kantaa siihen miten sovellus testataan"
        },
        {
          "right": true,
          "text": "Inspect-and-adapt -periaatteen takia product backlog saatetaan joutua priorisoimaan uudelleen"
        },
    
        {
          "right": false,
          "text": "Retrospektiivissä priorisoidaan product backlog tarpeen vaatiessa uudelleen"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjien ei kannata paljastaa sprintin alussa esiin tulevia vaikeuksia. Koska tiimit ovat itseorganisoituja, ei ole mitään tarvetta kertoa ongelmista ulkopuolisille liian aikaisin, sillä ongelmat ratkeavat yleensä ajan kanssa"
        },
        {
          "right": false,
          "text": "ScrumBut sopii erityisesti suurien ohjelmistoprojektien hallitsemiseen"
        }
    
      ],
      "part": "1",
      "id": 310
    },
    {
      "courseId": "4",
      "part": "2",
      "id": 311,
      "title": "Mitkä seuraavista vaatimusmäärittelyä koskevista väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vaatimusmäärittelyn aikana selvitetään mitä toiminnallisuutta kehitteillä olevaan ohjelmistoon halutaan"
        },
        {
          "right": true,
          "text": "Vaatimusmäärittelyn aikana selvitetään minkälaisessa toimintaympäristössä kehitettävän sovelluksen on tarkoitus toimia"
        },
        {
          "right": true,
          "text": "Lainsäädännölliset rajoitukset, kuten GDPR tulee huomioida sovelluksen vaatimusmäärittelyn aikana"
        },
        {
          "right": false,
          "text": "Eräs verkkokaupan laatuvaatimus (quality attribute) voisi olla 'Asiakas voi lisätä tuotteen ostoskoriin'"
        },
        {
          "right": false,
          "text": "Eräs verkkokaupan toiminnallinen (functional requirement) vaatimus voisi olla 'Verkkokauppan on toimittava kaikilla moderneilla web-selaimella'"
        },
        {
          "right": false,
          "text": "Vaatimusten validoinnilla tarkoitetaan niiden dokumentoimista kirjallisessa muodossa, esim. ohjelmistotiimin Wikisivulla"
        }
      ]
    }, 
    {
      "courseId": "4",
      "part": "2",
      "id": 312,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "MVP:n (minimal viable product) avulla voidaan tutkia ideoiden, esim. ohjelmiston potentiaalisten uusien ominaisuuksien, käyttökelpoisuutta"
        },
        {
          "right": true,
          "text": "Lean-startup-menetelmän tarkoituksena on oppia käyttäjien mieltymyksiä seuraamalla miten he sovellusta käyttävät"
        },
        {
          "right": false,
          "text": "A/B-testauksen avulla voidaan varmistua että järjestelmä toimii oikein poikkeuksellisissakin tilanteissa"
        },
        {
          "right": false,
          "text": "Vesiputousmallin hyvä puoli on se, että vaatimusmäärittelyä voidaan tarkentaa koko ohjelmistokehityksen ajan"
        },
        {
          "right": false,
          "text": "Eräs ketterien menetelmien ongelmista on se, että asiakas ei osaa ilmaista vaatimuksia riittävän hyvin ohjelmistokehitysprojektien alussa"
        },
        {
          "right": false,
          "text": "Lean startup -menetelmä sopii epämääräisyytensä takia oikeastaan vaan startup-yrityksille"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "2",
      "id": 313,
      "title": "Mitkä seuraavista user storyja koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "User storylle kannattaa kirjata hyväksymäkriteerit, eli esim. joukko testejä joiden avulla voidaan todeta storyn olevan toteutettu halutulla tavalla"
        },
        {
          "right": true,
          "text": "Ennen user storyn kuvaaman toiminnallisuuden toteuttamista on oleellista kommunikoida riittävästi product ownerin tai asiakkaan edustajan kanssa"
        },
        {
          "right": true,
          "text": "'Opiskelijan tulee pystyä tarkastelemaan seuraavan periodin opetustarjontaa' on kohtuullisen hyvä muotoilu user storylle"
        },
        {
          "right": false,
          "text": "User storyyn kirjataan tarkasti kaikki loppukäyttäjän sille asettamat vaatimukset"
        },
        {
          "right": false,
          "text": "'Opiskelijoiden tiedot talletetaan tietokantaan' on hyvä muotoilu user storylle"
        },
        {
          "right": false,
          "text": "Mike Cohn ja Ron Jeffries ovat erimielisiä siitä, mitä user storyn määritelmä pitää sisällään"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "2",
      "id": 314,
      "title": "Mitkä seuraavista user storyja koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": false,
          "text": "User storyn tekstuaalinen kuvaus on aina kirjattava muodossa 'As a _user_, I want _functionality_ so that _business value_'"
        },
        {
          "right": false,
          "text": "Kaikki product backlogille asti päätyvät user storyt ovat projektin kannalta suunilleen yhtä tärkeitä saada toteutettua"
        },
        {
          "right": false,
          "text": "User storyjen on aina noudatettava INVEST-kriteerejä"
        },
        {
          "right": false,
          "text": "Jos user story lisätään product backlogille, sen sisältöä ei saa enää muuttaa"
        },
        {
          "right": false,
          "text": "Suuren teknisen riskin sisältävän toiminnallisuuden kuvaamat user storyt kannattaa toteuttaa vasta ihan projektin lopussa, näin niissä epäonnistuminen ei laske liian aikaisessa vaiheessa sovelluskehittäjien mielialaa"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "2",
      "id": 315,
      "title": "Mitkä seuraavista user storyjen estimointia koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Suhteellisessa estimoinnissa verrataan user storyjen työmäärää muiden user storyjen vaatimaan työmäärään"
        },
        {
          "right": true,
          "text": "Työmääräarvioissa tulee huomioida definition of done eli projektissa sovittu yleinen laatutaso"
        },
        {
          "right": true,
          "text": "Työmääräarviot auttavat asiakasta user storyjen priorisoinnissa"
        },
        {
          "right": false,
          "text": "On kehitetty menetelmiä (esim. planning poker), joiden avulla ohjelmiston tekemiseen vaadittava työmäärä voidaan arvioida kohtuullisen tarkasti jo ennen projektin käynnistymistä"
        },
        {
          "right": false,
          "text": "Ketterien menetelmien parhaiden käytänteiden mukaista on antaa product ownerin ja scrum masterin hoitaa työmääräarviointi"
        },
        {
          "right": false,
          "text": "Työmääräarvioita ei tule muuttaa kesken projektin, sillä ne ovat lupaus asiakkaalle siitä milloin sovellus tulee valmistumaan"
        },
        {
          "right": false,
          "text": "Cone of uncertainity kuvaa sitä, että mitä kokeneempi sovelluskehittäjä on, sitä parempia työmääräarvioita hän pystyy tekemään"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "2",
      "id": 316,
      "title": "Mitkä seuraavista hyvää product backlogia koskevista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "User storyjen prioriteetti voi muuttua ajan kuluessa"
        },
        {
          "right": true,
          "text": "Sprinttiin toteutettavaksi valittavien user storyjen tulee olla riittävän pieniä"
        },
        {
          "right": true,
          "text": "Backlogille lisätään tarpeen mukaan uusia user storyja"
        },
        {
          "right": false,
          "text": "Backlogin sisältöä saa muuttaa ainoastaan sprintin suunnittelukokouksissa"
        },
        {
          "right": false,
          "text": "Jokaisen backlogille lisätyn user storyn täytyy aina sisältää tarkat hyväksymäkriteerit"
        },
        {
          "right": false,
          "text": "Jokainen backlogilla oleva user story täytyy toteuttaa, muuten projekti tuomitaan epäonnistuneeksi"
        },
        {
          "right": false,
          "text": "Kun user story on toteutettu valmiiksi, sanotaan että story on ready"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "2",
      "id": 317,
      "title": "Mitkä seuraavista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Tuotteen tai julkaisun burndown-kaavion avulla pystytään visualisoimaan jäljellä olevaa tekemättömän työn määrää"
        },
        {
          "right": true,
          "text": "User story mapping -tekniikka ryhmittelee user storyt toiminnallisiin loogisiin kokonaisuuksiin"
        },
        {
          "right": false,
          "text": "Tiimin velositeetilla tarkoitetaan sitä kuinka monta riviä koodia tiimi pystyy keskimäärin tuottamaan yhden sprintin aikana"
        },
        {
          "right": false,
          "text": "Velositeetin perusteella voidaan helposti vertailla mikä firman ohjelmistokehitystiimeistä on suorituskyvyltään paras"
        },
        {
          "right": false,
          "text": "Tiimin velositeettiin lasketaan jokainen sprintin aikana tehty koodirivi"
        },
        {
          "right": false,
          "text": "NoEstimates-liike on sitä mieltä että user storyjen estimointia ei tarvita ja siitä ei ole mitään hyötyä"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "2",
      "id": 318,
      "title": "Mitkä seuraavista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ei ole hyvä ottaa sprinttiin toteutettavaksi sellaista user storya jonka vaatimasta työmäärästä ei ole kellään minkäänlaista käsitystä"
        },
        {
          "right": true,
          "text": "Product owner pystyy priorisoinnin avulla vaikuttamaan siihen, mitä user storyja sprinttiin valitaan"
        },
        {
          "right": true,
          "text": "Velositeetin avulla voidaan arvioida kuinka paljon työtä yhteen sprinttiin kannattaa ottaa"
        },
        {
          "right": false,
          "text": "Sprintin tavoitteella tarkoitetaan sprinttiin valittuja user storyja"
        },
        {
          "right": false,
          "text": "Product owner määrää kuinka monta user storya kehitystiimi ottaa tiettyyn sprinttiin toteutettavaksi"
        },
        {
          "right": false,
          "text": "Jos user story on liian suuri toteutettavaksi yhdessä sprintissä, se kannattaa jakaa kahtia siten, että toinen keskittyy pelkään käyttöliittymään ja toinen bisneslogiikkaan ja tietokantaan"
        },
        {
          "right": false,
          "text": "Spike-ratkaisuilla saadaan aina nopeutettua sovelluskehitystä"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "2",
      "id": 319,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sprintin suunnittelun yhteydessä joudutaan miettimään myös sovelluksen toteutustason asioita"
        },
        {
          "right": true,
          "text": "Taskboardiksi organisoitu sprint backlog visualisoi kunkin tehtävän eli taskin statuksen"
        },
        {
          "right": false,
          "text": "Sprint backlogille laitettavat taskit tulee aina kirjoittaa asiakkaan ymmärtämällä kielellä"
        },
        {
          "right": false,
          "text": "Product owner määrää mitä sarakkeita sprintin backlogina toimivalla taskboardilla on"
        },
        {
          "right": false,
          "text": "Sprintin burndown-käyrän avulla on mahdollista seurata kuinka paljon työtunteja kehittäjillä on vielä jäljellä kyseisessä sprintissä"
        },
        {
          "right": false,
          "text": "Jos taskien työmäärä on arvioitu tunteina, tulee taskiin käytetty työaika päivän päätteeksi aina vähentää työmääräarviosta"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "2",
      "id": 320,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "WIP-rajoitteiden avulla voidaan yrittää pienentää riskiä sille, että sprintin aikana ehditään toteuttamaan useita user storyja ainoastaan osittain"
        },
        {
          "right": true,
          "text": "Retrospektiivi on hyvä hetki tarkastella ja modifioida sprintin taskboardia, esim. lisätä siihen WIP-rajoitteita"
        },
        {
          "right": true,
          "text": "On itseasiassa hiukan kiistanalaista kannattaako sprint backlogilla oleville taskeille antaa työmääräarvioita"
        },
        {
          "right": false,
          "text": "ScrumBan-menetelmässä noudatetaan aina 2 viikon pituisia sprinttejä"
        },
        {
          "right": false,
          "text": "ScrumBan-menetelmässä on tyypillistä, että jokainen sovelluskehittäjä työskentelee yhtä aikaa usean eri user storyn parissa"
        },
        {
          "right": false,
          "text": "Backlog grooming tehdään aina kahden sprintin välissä"
        }
      ]
    },
    
    
    {
      "courseId": "4",
      "part": "3",
      "id": 331,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vesiputousmallissa asiakas validoi vaatimukset lukemalla vaatimusmäärittelyn tuloksena olevaa dokumentaatiota"
        },
        {
          "right": true,
          "text": "Staattisen analyysin avulla voidaan tarkastella automatisoidusti noudattaako koodi määriteltyjä tyyliseikkoja, esim. oikeaoppista sisennystä"
        },
        {
          "right": true,
          "text": "Pariohjelmoinnin on todettu vähentävän koodiin jäävien bugien määrää"
        },
        {
          "right": false,
          "text": "Koodin katselmoinnissa testataan kaatuuko sovellus sattumanvaraisilla syötteillä"
        },
        {
          "right": false,
          "text": "Ohjelmiston verifioinnilla tarkoitetaan sen varmistamista, että ollaan ylipäätään tekemässä ohjelmistoa, joka on käyttäjän tarpeisiin sopiva"
        },
        {
          "right": false,
          "text": "Ketterät menetelmät ja vesiputousmalli poikkeavat monin paikoin, mutta vaatimusten validointi tapahtuu molemmissa suunilleen samalla tavalla"
        },
        {
          "right": false,
          "text": "XP:n koodin yhteisomistajuuden periaate tarkoittaa sitä, että koodi julkaistaan Open source -lisenssillä kaikkien vapaaseen käyttöön"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "3",
      "id": 332,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston ulkoisella laadulla tarkoitetaan sitä, onko ohjelmisto sopiva käyttötarkoitukseensa, eli toimiiko se niin kuin käyttäjä haluaa ja olettaa"
        },
        {
          "right": true,
          "text": "Järjestelmätestauksessa sovelluksen toimintaa tutkitaan usein saman rajapinnan kautta, miten loppukäyttäjä sovellusta käyttää"
        },
        {
          "right": true,
          "text": "Testitapauksia mietittäessä kannattaa valita sellaisia testisyötteitä, jotka toimivat järjestelmän kannalta erilaisella tavalla, eli mitkä eivät kuulu samaan ekvivalenssiluokkaan"
        },
        {
          "right": false,
          "text": "Käyttäjän hyväksymistestauksessa verrataan sovellusta toimintaa vaatimusmäärittelyyn"
        },
        {
          "right": false,
          "text": "Black box -testauksen suorittavat aina sovelluskehittäjät"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "3",
      "id": 333,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Yksikkötestaus on useimmiten ns. developer-testausta, eli sovelluskehittäjien vastuulla"
        },
        {
          "right": true,
          "text": "Huono sisäinen laatu saattaa vaikeuttaa sovelluksen jatkokehittämistä"
        },
        {
          "right": true,
          "text": "Haarautumakattavuutta mittaamalla voidaan löytää ehtolauseita, joiden kaikkia haaroja ei ole testattu"
        },
        {
          "right": true,
          "text": "Mutaatiotestauksen ideana on varmistaa, että testit huomaavat sen jos koodiin tulee bugeja"
        },
        {
          "right": false,
          "text": "Lasilaatikkotestauksella testataan sovelluksen tarjoamaa käyttökokemusta, eli se kohdistuu lähinnä käyttöliittymän testaamiseen"
        },
        {
          "right": false,
          "text": "Jos koodin rivikattavuus on 100%, voidaan olla lähes varmoja, että koodi toimii oikein"
        },
        {
          "right": false,
          "text": "Yksikkötestaus suoritetaan useimmiten ohjelman tilaajaorganisaation toimesta"
        },
        {
          "right": false,
          "text": "Yksikkötestaamista kutsutaan usein End to End -testaamiseksi"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "3",
      "id": 334,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Integraatiotestauksessa pyritään varmistamaan sovelluksen suurempien, useimmista luokista tai moduuleista koostuvien kokonaisuuksien toiminta"
        },
        {
          "right": true,
          "text": "Regressiotestaus pyrkii varmistamaan, että ohjelmiston jo aiemmin toimineet osat eivät hajoa uusien muutosten yhteydessä"
        },
        {
          "right": true,
          "text": "Regressiotestejä on mahdollista tehdä Pythonin unittest-kirjastolla"
        },
        {
          "right": false,
          "text": "Eräs ketterän kehityksen hyvistä puolia on se, että regressiotestaukselle ei käytännössä ole mitään tarvetta"
        },
        {
          "right": false,
          "text": "Ketterässä kehityksessä koodin integraatiotestauksen suorittaa kehittäjäorganisaation QA-tiimi"
        },
        {
          "right": false,
          "text": "Ketterä kehitys ja vesiputousmalli ovat monin paikoin hyvin erilaisia menetelmiä. Koodin integrointi ja integraatiotestaus tapahtuu kuitenkin molemmissa samalla tavalla"
        },
        {
          "right": false,
          "text": "Regressiotestaus tapahtuu lähes aina manuaalisesti"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "3",
      "id": 335,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Oikeaoppista TDD:tä sovellettaessa kirjoitetaan käytännössä aina yksi testi joka ei mene läpi ja sen jälkeen mahdollisimman yksinkertainen koodi, joka läpäisee testin"
        },
        {
          "right": true,
          "text": "Oikeaoppista TDD:tä sovellettaessa koodin sisäistä rakennetta parannellaan jos huomataan sen rapistuneen, tällöin testien halutaan edelleen menevän läpi"
        },
        {
          "right": true,
          "text": "Mock-olioita käytetään testauksessa varmistamaan, että testattava olio tai metodi kommunikoi riippuvuuksiensa kanssa oikein"
        },
        {
          "right": false,
          "text": "TDD:n ikävä puoli on se, että koodista saattaa tulla sen soveltamisen seurauksena ylläpidettävyydeltään huonoa"
        },
        {
          "right": false,
          "text": "TDD soveltuu erityisen hyvin ns. legacy-järjestelmien, eli vanhojen ja ylläpidettävyyden kannalta hankalien ohjelmistojen laajentamisen välineeksi"
        },
        {
          "right": false,
          "text": "Oikeaoppista TDD:tä käytettäessä ohjelmoitavat luokat ja metodit tulee aina suunnitella erittäin tarkasti ennen ohjelmoinnin aloittamista"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "3",
      "id": 336,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Integraatiohelvetti viittaa siihen, että vasta ohjelmintivaiheen lopussa tapahtuva luokkien ja komponenttien integrointi aiheuttaa useimmiten suuria ongelmia, riippumatta siitä miten huolellisesti ohjelmisto on suunniteltu"
        },
        {
          "right": true,
          "text": "Jatkuva integraatio pyrkii tuomaan koodin komponenteissa olevat yhteensopivuusongelmat esille niin nopeasti kuin mahdollista"
        },
        {
          "right": true,
          "text": "On oleellista jatkuvan integraation suorittamisen kannalta, että Python-projektissa tiedosto pyproject.toml on lisätty versionhallintaan"
        },
        {
          "right": false,
          "text": "Smoke testiksi kutsutaan testiä, missä järjestelmä yritetään saada kaatumaan tai 'savuamaan' kuormittamalla sitä äärimmäisen suurella operaatiomäärällä"
        },
        {
          "right": false,
          "text": "Jatkuvan integraation noudattaminen on helppoa, riittää kun joku konfiguroi tiimille  esim GitHub Actionin"
        },
        {
          "right": false,
          "text": "Jos jatkuvan integraation palvelin huomaa koodissa jonkin ongelman, riittää että ongelma korjataan seuraavan sprintin alkuun mennessä"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "3",
      "id": 337,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Jatkuva toimittaminen (continuous deployment) vaatii erittäin suurta automaation astetta testauksen ja sovelluksen tuotantoon viemisen suhteen"
        },
        {
          "right": true,
          "text": "Jatkuvaa toimitusvalmius (continuous delivery) automatisoi ohjelmiston laadunhallinnan, mutta jättää ihmisen ratkaistavaksi missä vaiheessa uusia versiota julkaistaan loppukäyttäjille"
        },
        {
          "right": true,
          "text": "Staging-ympäristön on konfuguraatioiltaan syytä olla mahdollisimman lähellä sovelluksen tuotantoympäristöä"
        },
        {
          "right": false,
          "text": "Build pipelinen käyttö nopeuttaa ohjelmakoodin kääntämistä rinnakkaistamalla käännöksen vaiheet useille eri koneille"
        },
        {
          "right": false,
          "text": "Jatkuva toimittaminen (continuous deployment) sopii ainoastaan hyvin pienille yrityksille, esimerkiksi alkuvaiheessa oleville start upeille"
        },
        {
          "right": false,
          "text": "Staging-ympäristö ja CI-palvelin tarkoittavat samaa asiaa"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "3",
      "id": 338,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Tutkiva testaus kannattaa kohdistaa sprintin aikana toteutettuihin uusiin toimintoihin"
        },
        {
          "right": true,
          "text": "Kokenut testaaja voi löytää tutkivaa testaamista käyttäen virheitä, jotka jäävät helposti automatisoitujen testien ulottumattomiin"
        },
        {
          "right": false,
          "text": "Tutkiva testaaminen sopii erityisen hyvin regressiotestaukseen"
        },
        {
          "right": false,
          "text": "Jos ohjelmistoprojektissa tehdään paljon tutkivaa testaamista, ei yksikkö- ja integraatiotestausta tarvitse tehdä"
        },
        {
          "right": false,
          "text": "Tutkiva testaaminen perustuu testitapausten huolelliseen etukäteissuunnitteluun"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "4",
      "id": 341,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Canary releaseissa osa todellisista loppukäyttäjistä ohjataan käyttämään järjestelmän uutta versiota"
        },
        {
          "right": true,
          "text": "Feature toggle on eräs tekniikka canary releasejen toteuttamiseen"
        },
        {
          "right": true,
          "text": "Canary releaseja käytettäessä sovelluksen toimintaa on monitoroitava tarkasti"
        },
        {
          "right": true,
          "text": "Feature togglen avulla koodissa olevia keskeneräisiä toiminnallisuuksia voidaan piilottaa loppukäyttäjiltä"
        },
        {
          "right": false,
          "text": "Käytettäessä canary releaseja, sovelluskehittäjät testaavat sovelluksen toimivuutta ns. staging-palvelimella"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "4",
      "id": 342,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Käytettäessä feature brancheja uusi toiminnallisuus, esim. user story toteutetaan ensin omassa versionhallinnan haarassa, ja yhdistetään kehityksen päähaaraan vasta kun se on valmiina"
        },
        {
          "right": true,
          "text": "Trunk based development ei suosi feature branchien käyttöä, kaikki koodi pyritään integroimaan välittömästi pääkehityshaaraan"
        },
        {
          "right": true,
          "text": "DevOps-toimintamallia sovellettaessa kehittäjät ja järjestelmäylläpitäjät toimivat tiiviissä yhteistyössä"
        },
        {
          "right": true,
          "text": "Infrastructure as Code tarkottaa suurinpiirtein sitä, että sovelluksien käyttämiä palvelinympäristöjä hallinnoidaan koodin avulla käsiteltävillä konfiguraatiotiedostoilla, joita voidaan esim. tallettaa versionhallintaan normaalin ohjelmakoodin tapaan"
        },
        {
          "right": false,
          "text": "Trunk based development on kiinnostava idea, mutta se sopii lähinnä pienten startup-yritysten käyttöön"
        },
        {
          "right": false,
          "text": "Trunk based development -kehitysmallia on mahdotonta soveltaa, jos sovellukseen on toteutettava niin isoja toiminnallisuuksia, että niiden tekemiseen menee kauemmin kuin päivä"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "4",
      "id": 343,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston arkkitehtuuri määrittelee sen rakenteen suuret linjat, eli minkälaisista rakennekomponenteista ohjelmisto koostuu"
        },
        {
          "right": true,
          "text": "Arkkitehtuuri ohjaa sitä miten sovellusta tulee jatkokehittää"
        },
        {
          "right": false,
          "text": "Ohjelmiston toimintaympäristön ja toteutusteknologioiden ei tule koskaan antaa vaikuttaa ohjelmiston arkkitehtuuriin"
        },
        {
          "right": false,
          "text": "Arkkitehtuurityyli määrää sen, mitä luokkia ja metodeja ohjelmistossa on"
        },
        {
          "right": false,
          "text": "Ohjelmiston ei-toiminnallisilla vaatimuksilla ei ole vaikutusta sen arkkitehtuuriin"
        },
        {
          "right": false,
          "text": "Sovelluksen arkkitehtuuri on pysyvä, ts. alussa valittua arkkitehtuuria ei koskaan muuteta."
        }
      ]
    },
    {
      "courseId": "4",
      "part": "4",
      "id": 344,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kerrosarkkitehtuuri tähtää siihen, että tietyn kerroksen koodiin tehtävät muutokset aiheuttaisivat mahdollisimman vähän muutoksia sovelluksen muihin osiin"
        },
        {
          "right": true,
          "text": "Kerrosarkkitehtuuria sovellettaessa käyttöliittymästä huolehtiva koodi on eristetty esimerkiksi sovelluslogiikaasta huolehtivasta koodista"
        },
        {
          "right": true,
          "text": "Mikropalveluarkkitehtuuri mahdollistaa sovelluksen toteuttamisen useita eri ohjelmointikieliä käyttäen"
        },
        {
          "right": false,
          "text": "Mikropalveluarkkitehtuuria sovellettaessa jokainen user story toteutetaan omana mikropalveluna"
        },
        {
          "right": false,
          "text": "Kerrosarkkitehtuurissa eri kerroksilla oleva koodi keskustelee ainoastaan verkon välityksellä, eli esimerkiksi käyttöliittymästä ei koskaan kutsuta suoraan sovelluslogiikkakerroksen metodeja"
        },
        {
          "right": false,
          "text": "Mikropalveluarkkitehtuurin suurimpia etuja on niiden helppo testaaminen ja debuggaaminen"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "4",
      "id": 345,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Inkrementaalinen arkkitehtuuri tarkoittaa sitä, että ohjelman lopullinen arkkitehtuuri muodostuu projektin edetessä"
        },
        {
          "right": true,
          "text": "Inkrementaalista arkkitehtuuria sovellettaessa esimerkiksi sovelluksen kerrosrakenne toteutetaan ainakin jossain muodossa jo varhaisessa vaiheessa projektia, jopa ensimmäisessä sprintissä"
        },
        {
          "right": true,
          "text": "Ketteriä menetelmiä sovellettaessa tunnustetaan se tosiasia, että vaatimusten tapaan saattaa myös arkkitehtuuria joutua mukauttamaan projektin aikana"
        },
        {
          "right": false,
          "text": "Jos kehitystiimi rakentaa arkkitehtuurin inkrementaalisesti, ei arkkitehtuuria dokumentoida millään tavalla"
        },
        {
          "right": false,
          "text": "Walking skeleton tarkoittaa koodia, joka tullaan heittämään pois kun ohjelman ominaisuudet valmistuvat"
        },
        {
          "right": false,
          "text": "Inkrementaalinen suunnittelu ja arkkitehtuuri takaavat sen, että ohjelmistosta tulee rakenteeltaan laadukas"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "4",
      "id": 346,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kapseloinnilla tarkoitetaan toteutustason yksityiskohtien piilottamista"
        },
        {
          "right": true,
          "text": "Metoditason koheesio pyrkii siihen, että yksittäinen metodi keskittyy ainoastaan yhteen asiaan kerrallaan. Jos metodi tekee liian monia asioita, sen koheesio paranee jos metodi jaetaan useammaksi metodiksi"
        },
        {
          "right": true,
          "text": "Mikropalveluissa yksittäisen palvelun koheesion taso on korkea ja ne kapseloivat sisäiset toimintaperiaatteensa muilta palveluilta"
        },
        {
          "right": true,
          "text": "Luokkatason koheesio ja single responsibility -periaate tarkoittavat samaa asiaa"
        },
        {
          "right": false,
          "text": "Ohjelmiston sisäisellä laadulla tarkoitetaan sitä, että koodin käyttämät tietorakenteet ja algoritmit tarjoavat optimaalisen nopean toiminnallisuuden kuhunkin käyttötarkoitukseen"
        },
        {
          "right": false,
          "text": "Single responsibility -periaate ei ole relevantti käytettäessä muita ohjelmointiparadigmoja kuin olio-ohjelmointia"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "4",
      "id": 347,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Code smell eli koodihaju on merkki siitä, että koodin sisäisessä laadussa on todennäköisesti ongelmia"
        },
        {
          "right": true,
          "text": "Tekninen velka on metafora sille, että koodin sisäinen rakenne on heikkoa"
        },
        {
          "right": false,
          "text": "Nykyisten parhaiden käytänteiden mukaan koodi tulee kommentoida huolellisesti, esim. jokaisesta koodissa olevasta muuttujasta tulee selittää mikä tietoa muuttuja tallettaa"
        },
        {
          "right": false,
          "text": "Refaktoroinnilla muutetaan luokkien metodeja siten, että niiden toiminnallisuus vastaa paremmin asiakkaiden tarpeita"
        },
        {
          "right": false,
          "text": "Refaktorointia ei kannata suorittaa jokaisessa sprintissä, se laskisi liikaa kehitystiimin velositeettia"
        },
        {
          "right": false,
          "text": "Teknistä velkaa tulee välttää kaikissa olosuhteissa"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "5",
      "id": 351,
      "title": "Mitkä seuraavista ovat leanin mukaan hukkaa (muda)?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Välivarastointi"
        },
        {
          "right": true,
          "text": "Ylituotanto"
        },
        {
          "right": true,
          "text": "Odotus"
        },
        {
          "right": true,
          "text": "Tuotteessa olevat viat"
        },
        {
          "right": false,
          "text": "Taukojen pitäminen"
        },
        {
          "right": false,
          "text": "Koulutus"
        },
        {
          "right": false,
          "text": "Toimintojen ulkoistaminen"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "5",
      "id": 352,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kaizen tarkoittaa työskentelytapojen jatkuvaan parantamisen kannustavaa asennetta"
        },
        {
          "right": true,
          "text": "Jatkuva parantaminen pyrkii etsimään ongelmien perimmäisen syyn (root cause) ja eliminoimaan sen"
        },
        {
          "right": true,
          "text": "Pull- tai JIT-periaatteilla tarkoitetaan sitä, että tuotetta tai sen tarvitsemia komponentteja valmistetaan vasta tilauksesta, eli ei varalta etukäteen"
        },
        {
          "right": true,
          "text": "Kanban on eräs työkalu pull- tai JIT-periaatteen toteuttamiseen"
        },
        {
          "right": false,
          "text": "Lean pyrkii maksimoimaan tuotantolaitteiden käyttöasteen"
        },
        {
          "right": false,
          "text": "Kaizen ei kosketa yrityksen rivityöntekijöitä, keskitason johto hoitaa kaizeniin liittyvät asiat"
        },
        {
          "right": false,
          "text": "Läpimenoaika (leadtime) tarkoittaa sitä, miten nopeasti jatkuvassa parannuksessa saadaan eliminoitua hukkaa aiheuttavat tekijät"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "5",
      "id": 353,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean suosii periaatetta, jossa päätökset tehdään mahdollisimman myöhäisessä vaiheessa, mutta ei kuitenkaan liian myöhään"
        },
        {
          "right": true,
          "text": "Osassa 2 mainitun 'hyvän backlogin' kriteerejä noudattava backlog on leanin periaatteiden mukainen"
        },
        {
          "right": false,
          "text": "Build quality in -periaatteen mukaan kannattaa keskittyä kalliimpien tuotteiden valmistamiseen. Esim. Applella periaate näkyy siinä, että firmalla ei ole halpoja puhelinmalleja"
        },
        {
          "right": false,
          "text": "Lean pyrkii läpimenoajan (leadtime) optimointiin henkilökohtaisilla bonuksilla"
        },
        {
          "right": false,
          "text": "Vesiputousmallissa suositut, hyvin tarkkaan tehdyt vaatimusmäärittelydokumentit ovat leanin periaatteiden mukaisia"
        },
        {
          "right": false,
          "text": "Vesiputousmallin suosima periaate tehdä sovelluksen testaus erillisenä lopussa tapahtuvana vaiheena on leanin periaatteiden mukainen käytäntö"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "5",
      "id": 354,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean-ideaalin mukainen johtaja hallitsee myös käytännön hands on -työskentelyn"
        },
        {
          "right": true,
          "text": "Tuotekehitykseen sovellettaessa lean pyrkii kiihdyttämään oppimista"
        },
        {
          "right": true,
          "text": "Leanin tuotekehityksen periaatteiden mukaan epävarmat asiat kannattaa selvittää varhaisessa vaiheessa"
        },
        {
          "right": false,
          "text": "Leanin tuotekehityksen 'set based concurrent development'-menetelmän idea on sama kuin iteratiivisessa ohjelmistokehityksessä, tuotetta laajennetaan ja parannellaan vähitellen iteraatio iteraatiolta"
        },
        {
          "right": false,
          "text": "Go see (kenchi genbutsu) -periaateen mukaan työntekijöiden tulee raportoida tekemisistä tarkasti managerille"
        },
        {
          "right": false,
          "text": "Scrum ei ole leanin periaatteiden mukainen, koska se on push-systeemi"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "5",
      "id": 355,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Scrum of scrums on periaate, jonka avulla pyritään hallitsemaan useita kehitystiimejä, jotka työskentelevät saman tuotteen parissa"
        },
        {
          "right": true,
          "text": "SAFe on hyvin tarkkaan dokumentoitu ja runsaasti erilaisia periaatteita ja henkilörooleja sisältävä laajan mittakaavan ketterä menetelmäkehys"
        },
        {
          "right": true,
          "text": "LeSS:iä sovellettaessa oletuksena on, että kehitetään yhtä tuotetta, jolla on yksi product owner. LeSS ei ota kantaa siihen, miten eri tuotteita kehittävät tiimit suhtautuvat toisiinsa"
        },
        {
          "right": false,
          "text": "LeSS lisää Scrumiin joukon kokonaan uudentyyppisiä palavereja sekä henkilörooleja"
        },
        {
          "right": false,
          "text": "LeSS suosittelee jakamaan työtä siten, että esimerkiksi yksi tiimi huolehtii sovelluksen frontendistä, yksi sovelluksen backendista ja yksi sovelluksen tietokannasta"
        },
        {
          "right": false,
          "text": "9 tai enemmän tiimiä sisältävässä LeSS huge -versiossa jokaiselle tiimille on varattu oma product backlog"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "5",
      "id": 356,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ketteriä menetelmiä käytetään nykyään useimpien tutkimusten mukaan yli 50% kaikista ohjelmistoprojekteista"
        },
        {
          "right": true,
          "text": "Tutkimusten mukaan yllättävän monet ketteriä menetelmiä soveltavat eivät kuitenkaan noudata monia ketteryyden perusperiaatteita esimerkiksi lyhyitä iteraatiota"
        },
        {
          "right": true,
          "text": "Erään tutkimuksen mukaan Jatkuva toimittaminen (continuous deployment) on ollut käytössä jopa kolmasosalla vastaajista"
        },
        {
          "right": false,
          "text": "Ketterien menetelmien nousu näyttää olevan takana, esim. Yhdysvaltojen hallituksen alaisissa projekteissa ketteriä menetelmiä ei enää käytetä yhtä paljon kuin esimerkiksi 10 vuotta sitten, kun Scrum-hype oli suurimmillaan"
        },
        {
          "right": false,
          "text": "Tutkimusten mukaan suuret ohjelmistoprojektit onnistuvat suuremmalla todennäköisyydellä kuin pienet projektit"
        },
        {
          "right": false,
          "text": "Tutkimusten mukaan suurin ketteryyden tuoma hyöty on sen kustannustehokkuus"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "6",
      "id": 361,
      "title": "(1) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Smartlyn toimiala on Facebook-mainostus"
        },
        {
          "right": true,
          "text": "Tärkeä motivaatio automaattisille testeille on varmistua siitä, että jo toimineet asiat eivät hajoa kun koodia muokataan"
        },
        {
          "right": true,
          "text": "End to end -testit testaavat järjestelmää kokonaisuudessaan, kurssin käyttämän terminologian <i>järjestelmätestit</i> ovat siis end to end -testejä"
        },
        {
          "right": false,
          "text": "Smartyllä tiimirakene vastaa ohjelmiston arkkitehtuurisia kerroksia, eli esim. sovelluksen käyttöliittymästä on vastuussa oma tiiminsä"
        },
        {
          "right": false,
          "text": "Automatisoidut testit ovat hyvä keino löytää ohjelmistosta kokonaan uudenlaisia bugeja"
        },
        {
          "right": false,
          "text": "Kattava yksikkötestaus on riittävä tapa saavuttaa täysi luottamus sille, että ohjelmisto toimii oikein"
        },
        {
          "right": false,
          "text": "End to end -testeissä kutsutaan myös ulkoisten palveluiden esimerkiksi Facebookin rajapintoja"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "6",
      "id": 362,
      "title": "(2) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "API-testeillä voidaan testata esimerkiksi yksittäistä mikropalvelua kokonaisuudessaan"
        },
        {
          "right": true,
          "text": "Yksikkötestit eivät käytä tietokantaa"
        },
        {
          "right": true,
          "text": "End to end -testit suoritetaan käyttöliittymän läpi"
        },
        {
          "right": true,
          "text": "End to end -testien huono puoli on se, että ne ovat usein riippuvaisia käyttöliittymässä esitettävän datan muodosta"
        },
        {
          "right": false,
          "text": "Integraatiotestit eivät käytä tietokantaa"
        },
        {
          "right": false,
          "text": "Yksikkötestit tekevät usein HTTP-pyyntöjä verkossa oleviin rajapintoihin"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "6",
      "id": 363,
      "title": "(3) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Testipyramidi antaa erään suosituksen sille, kuinka paljon testausta kannattaa kohdentaa eri testauksen tasoille"
        },
        {
          "right": true,
          "text": "Monien startupien tapaan Smartyllä oli tilanne aluksi se, että automatisoituja testejä ei ollut"
        },
        {
          "right": true,
          "text": "Jos koodissa havaitaan bugi, kannattaa bugikorjauksen lisäksi tehdä testit, jotka varmistavat ettei sama bugi palaa koodiin uudelleen"
        },
        {
          "right": false,
          "text": "Kokonaan ilman automaattisia testejä olevan 'legacy'-koodin testauksen automatisointi kannattaa aloittaa yksikkötesteistä"
        },
        {
          "right": false,
          "text": "Startup-yrityksen kannattaa rakentaa kattavat automaattiset testit jo siinä vaiheessa kun ns. 'product market -fit' on vielä löytymättä"
        },
        {
          "right": false,
          "text": "Testipyramidin mukaista jakaumaa eri tason testien määrään suhteen kannattaa noudattaa aina heti ohjelmakomponentin, esim. mikropalvelun toteuttamisen ensimmäisestä päivästä alkaen"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "6",
      "id": 364,
      "title": "(4) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Smartly ei enää käytä ollenkaan end to end -testejä sillä kokemus niistä oli huono, testit rikkoontuivat välillä ilman mitään syytä"
        },
        {
          "right": true,
          "text": "Smartlyllä koodiin tehtävät lisäykset katselmoidaan pull requestien (PR) kautta"
        },
        {
          "right": true,
          "text": "Smartly julkaisee feature togglejen avulla joitain koodiin tulevia muutoksia/toiminnallisuuksia aluksi vain osalle asiakkaista"
        },
        {
          "right": false,
          "text": "Smartlyllä on yhtenäiset testauskäytänteet, tämän takia jokainen tiimi testaa vastuullaan olevaa ohjelmiston osaa samalla tavalla"
        },
        {
          "right": false,
          "text": "Smartlyllä ohjelmiston laadusta vastaa erillinen laadunhallintaan keskittyvä QA-tiimi"
        },
        {
          "right": false,
          "text": "Smartlyllä koodia testataan manuaalisesti ennen kuin se päästetään tuotantokäyttöön"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "6",
      "id": 365,
      "title": "(1) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Saavutettavuus/esteettömyys tarkoittaa sitä, että tuotteen on tarjottava sama kokemus käyttäjän rajoitteista huolimatta"
        },
        {
          "right": true,
          "text": "Käyttökokemussuunnittelun (UX design) on mukautunut ketteryyteen paljon ohjelmistokehitystä hitaammin"
        },
        {
          "right": true,
          "text": "Käyttäjäkeskeinen suunnittelu (User centric design) on iteratiivinen menetelmä käyttökokemussuunnitteluun"
        },
        {
          "right": false,
          "text": "Käyttökokemussuunnittelun (UX design) katsotaan syntyneen 1980-luvulla piilaaksossa Microsoftin tuotekehityslaboratoriossa"
        },
        {
          "right": false,
          "text": "Tarkka, etukäteen tapahtuva suunnittelu on onnistuneen käyttökokemuksen luomisen edellytys"
        },
        {
          "right": false,
          "text": "Käyttäjäkeskeinen suunnittelu (User centric design) määrittelee erään tarkan ohjeiston sille, miten käyttökokemussuunnittelua tulee tehdä"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "6",
      "id": 366,
      "title": "(2) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean UX suosittelee sijoittamaan designerit osaksi ohjelmistokehitystiimejä"
        },
        {
          "right": true,
          "text": "Lean UX pyrkii siihen että työtä edistetään pienissä paloissa ja eritasoisia aikaansaannoksia julkaistaan nopeassa syklissä"
        },
        {
          "right": true,
          "text": "Erehdykset salliva kulttuuri kuuluu Lean UX:ään"
        },
        {
          "right": false,
          "text": "Ketterässä käyttökokemussuunnittelussa (Agile UX) ovat avainasemassa tarkat eli ns. pixel perfect -tasolla tehdyt layout-suunnitelmat"
        },
        {
          "right": false,
          "text": "Lean UX:ssä käyttökokemuksen määrittelee firman johtava suunnittelija, eli ns. UX-ninja"
        },
        {
          "right": false,
          "text": "Lean UX suosittelee että käyttäjätestaus tehdään kontrolloiduissa laboratorio-olosuhteissa"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "6",
      "id": 367,
      "title": "(3) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Design sprintti on menetelmä, jonka avulla käydään lyhyessä ajassa läpi kaikki design-prosessin vaiheet, motivaationa esim. alustavan liiketoimintakonseptin luominen"
        },
        {
          "right": true,
          "text": "Design systeemi määrittelee esimerkiksi yrityksen web-sivuston graafisen ulkoasun"
        },
        {
          "right": true,
          "text": "Design systeemi saattaa tarjota joukon muotoilultaan valmiita käyttöliittymäkomponentteja"
        },
        {
          "right": false,
          "text": "Oikeaoppisessa Lean UX -menetelmässä joka toinen sprintti on Design sprintti ja joka toinen normaali sovelluskehitykseen keskittyvä sprintti"
        },
        {
          "right": false,
          "text": "Design sprintin pituus on aina viikko"
        },
        {
          "right": false,
          "text": "Käytettävyyssuunnittelu on taidetta, tieteellisellä ajattelulla ei ole roolia käytettävyyssuunnittelussa"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "7",
      "id": 371,
      "title": "(1) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Nykyään on tyypillistä, että sovelluskehittäjä joutuu käyttämään useita eri ohjelmointikieliä jopa yhdessä projektissa työskennellessään"
        },
        {
          "right": true,
          "text": "Ei ole olemassa vain yhtä tapaa kouluttautua ohjelmistoalalle"
        },
        {
          "right": false,
          "text": "Ketterän manifestin mukaiset itseorganisoituvat tiimit ovat utopia, niillä ei ole sijaa nykyisessä bisneksessä, tiimien tulee työskennellä tiukan ulkoisen ohjauksen varassa"
        },
        {
          "right": false,
          "text": "Softa-alalla menestyksekkäästi toimimiseen tarvitaan nykyään täysin erilainen mindset, eli mielenlaatu/ajattelutapa kuin 80-luvulla"
        },
        {
          "right": false,
          "text": "Jos osaat hyvin yhden teknologian, pärjäät sen avulla ohjelmistoalalla jopa vuosikymmeniä"
        },
        {
          "right": false,
          "text": "On parasta koostaa ohjelmistotiimi mahdollisimman samankaltaisista ihmisistä, liika erilaisuus ihmisten taustoissa vaikeuttaa asiakkaiden tarpeiden ymmärtämistä"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "7",
      "id": 372,
      "title": "(2) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston uusia versiota kannattaa viedä (eli 'shipata') tuotantoon niin usein kuin mahdollista, jopa yli 10 kertaa päivässä"
        },
        {
          "right": true,
          "text": "Ensimmäisenä mieleen tuleva tekninen ratkaisu kannattaa usein kyseenalaistaa"
        },
        {
          "right": false,
          "text": "Isojen IT-organisaatioiden on huomattavasti helpompi ottaa huomioon asiakkaan tarpeet kuin pienten ketterien tiimien"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjien ei ole tarvetta ymmärtää bisneksen tarpeita tai sovelluksen arkkitehtuuriratkaisuja, riittää että sovelluskehittäjä maksimoi tuotantokäyttöön vietävän koodin määrään"
        },
        {
          "right": false,
          "text": "Sovelluksen laadunhallinta kannattaa tehdä laadunhallintaan varatuissa sprinteissä, joita pidetään noin 4-5 sprintin välein"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "7",
      "id": 373,
      "title": "(3) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Retrospektiiveja ei tulisi jättää pitämättä"
        },
        {
          "right": true,
          "text": "Sprintin aikaisesta työskentelystä noin 10% tulisi kohdistua seuraavien sprinttien aikana toteutettavien storyjen valmisteluun"
        },
        {
          "right": false,
          "text": "Paras sprintin pituus on 4 viikkoa"
        },
        {
          "right": false,
          "text": "Eräs Elisan parhaista käytänteistä ovat ns. tekniset storyt, eli storyt joiden toteuttaminen ei yleensä näy käyttäjälle mitenkään"
        },
        {
          "right": false,
          "text": "Teknistä velkaa ei tule ottaa missään olosuhteissa"
        },
        {
          "right": false,
          "text": "Niin sanotun Nokia-testin voi läpäistä ainoastaan, jos ennen toteutusvaihetta pidetään joukko spesifikaatiosprinttejä, joiden aikana ohjelmisto määritellään tarkasti"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "7",
      "id": 374,
      "title": "(4) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Hyvin toimiva jatkuva integraatio (CI) vaikuttaa parhaimmillaan organisaation suorituskykyyn jopa liiketoiminnan tasolla"
        },
        {
          "right": true,
          "text": "Yli muutaman päivän pituisia feature brancheja ei kannata käyttää"
        },
        {
          "right": true,
          "text": "Jos jatkuvan integraation (CI) 'build' hajoaa, eli koodi ei käänny, tai jokin testi ei mene läpi, tulee ongelma korjata heti"
        },
        {
          "right": true,
          "text": "Sen koodin määrä joka ei ole tuotantokäytössä tulee minimoida"
        },
        {
          "right": false,
          "text": "Jatkuva integraatio (CI) toimii ainoastaan sellaisissa ohjelmistoissa, joita kehittää yksi tai korkeintaan pari tiimiä. Isommassa skaalassa ohjelmistoja kehitettäessä CI:n käyttö olisi liian suuri hidaste"
        },
        {
          "right": false,
          "text": "Jatkuva integraation (CI) soveltaminen onnistuu ainoastaan pilvipalveluina toteutetuille web-sovelluksille"
        },
        {
          "right": false,
          "text": "CI-palvelimen status, eli onko kaikki hyvin vai onko esim. testeissä ongelmia, tulee pitää kehitystiimin sisäisenä asiana"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "7",
      "id": 379,
      "title": "(5) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Suurin hukka ohjelmistokehityksessä on se, että rakennetaan asiakkaan tarpeiden kannalta kokonaan vääränlainen järjestelmä"
        },
        {
          "right": true,
          "text": "Lean-startup-menetelmällä testataan idean tarpeellisuutta/hyödyllisyyttä oikeilla käyttäjillä"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä jokaisella tiimillä voi olla oma Definition of done"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä osan tiimeistä kannattaa erikoistua joihinkin osa-alueisiin, esimerkiksi testaamiseen"
        },
        {
          "right": false,
          "text": "Ohjelmistokehittäjille kannattaa antaa henkilökohtaisia suoriutumistavoitteita jotka vaikuttavat suoraan palkkaukseen, näin myös tiimit saadaan työskentelemään mahdollisimman tehokkaasti"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä eri tiimien jäsenet eivät yleensä keskustele suoraan keskenään, keskustelu hoidetaan tiimien scrum masterien kautta"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "7",
      "id": 375,
      "title": "(1) Mitkä seuraavista Marko Klemetin luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Erään määritelmän mukaan DevOps tarkoittaa sovelluskehittäjien ja järjestelmäylläpitäjien välistä yhteistyötä"
        },
        {
          "right": true,
          "text": "DevOpsiin liittyvät työkalut auttavat keräämään monenlaista informaatiota tuotantoympäristöstä ja täten tekemään sovelluksen toiminnallisuuteen liittyviä kokeiluja"
        },
        {
          "right": true,
          "text": "Sovellus tulisi viedä tuotantoympäristöön heti kehitystyön alkuvaiheessa, jopa jo ensimmäisenä päivänä, ennen kuin sovelluksessa on juurikaan valmiina olevaa toiminnallisuutta"
        },
        {
          "right": true,
          "text": "Eräs pilviympäristöjen hyvistä puolista on se, että ne antavat sovelluskehittäjille mahdollisuuden julkaista koodia suoraan tuotantoympäristöön"
        },
        {
          "right": false,
          "text": "DevOpsia soveltamalla on mahdollista korvata testausautomaatio"
        }
      ]
    },
    {
      "courseId": "4",
      "part": "7",
      "id": 376,
      "title": "(2) Mitkä seuraavista Marko Klemetin luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Design-systeemi dokumentoi yrityksen visuaalisen ilmeen ja saattaa jopa tarjota uudelleenkäytettäviä, visuaalista ilmettä noudattavia käyttöliittymäkomponentteja"
        },
        {
          "right": true,
          "text": "ROBOT-framework on hyväksymistestauksen työkalu, missä testit kirjoitetaan asiakkaan ymmärtämällä kielellä"
        },
        {
          "right": true,
          "text": "GitHub actions ja Jenkins ovat jatkuvaan integraatioon (CI) sopivia palveluita"
        },
        {
          "right": false,
          "text": "Paras käytänne DevOpsin soveltamiseen on muodostaa yritykseen erillinen DevOps-tiimi, joka hoitaa tuotantojärjestelmien ja deployment-pipelinen konfiguroinnin"
        },
        {
          "right": false,
          "text": "Jatkuvan integraation (CI) ja jatkuvan julkaisun (CD) konfiguraatioita ei kannata tallettaa versionhallintaan"
        },
        {
          "right": false,
          "text": "DevOpsin käyttöönotossa tärkeimmässä asemassa on sopivien työkalujen tehokas käyttö"
        }
      ]
    },

    {
      "id": 1301,
      "part": "1",
      "courseId": "5",
      "title": "Mitkä seuraavista ovat ohjelmiston elinkaaren vaiheita (lifecycle phases)?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "asiakkaan vaatimusten selvittäminen"
        },
        {
          "right": true,
          "text": "testaus"
        },
        {
          "right": true,
          "text": "ohjelmointi"
        },
        {
          "right": true,
          "text": "ohjelmiston rakenteen suunnittelu"
        },
        {
          "right": true,
          "text": "käytössä jo olevan ohjelmiston laajentaminen"
        },
        {
          "right": false,
          "text": "ohjelmiston dokumentointi"
        },
        {
          "right": false,
          "text": "suorituskyvyn parantaminen"
        },
        {
          "right": false,
          "text": "asiakastapaamiset"
        }
      ]
    },
    {
      "courseId": "5",
      "title": "Mitkä seuraavista vesiputousmallia koskevista väitteistä ovat  'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vesiputousmallia käytettäessä tulee määrittelyn ja suunnittelun tuotokset dokumentoida huolellisesti."
        },
        {
          "right": true,
          "text": "Jos käytetään vesiputousmallia ohjelmoijat eivät tyypillisesti osallistu vaatimusmäärittelyyn"
        },
        {
          "right": false,
          "text": "Yksi ensimmäisistä vesiputousmallin puolestapuhujista oli Winston Royce"
        },
        {
          "right": false,
          "text": "Yhdysvaltojen puolustusministeriö eli Department of Defence ei tänä päivänäkään salli muiden ohjelmistotuotantotapojen kuin vesiputousmallin käyttöä"
        },
        {
          "right": false,
          "text": "Avaruussukkuloiden käyttämä ohjelmisto rakennettiin vesiputousmallilla"
        },
        {
          "right": false,
          "text": "Vesiputousmalli sopii erityisen hyvin pitkäkestoisiin projekteihin sillä niissä on paremmin aikaa suorittaa aluksi perusteellinen vaatimusmäärittely"
        },
        {
          "right": false,
          "text": "Vesiputousmalli sopii erityisen hyvin pitkäkestoisiin projekteihin sillä niissä on paremmin aikaa suorittaa lopuksi kattava testaus"
        }
      ],
      "part": "1",
      "id": 1302
    },
    {
      "courseId": "5",
      "title": "Seuraavassa luetellut ovat vesiputousmallin heikkouksia:",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Asiakkaan ei ole helppoa ilmaista sitä miten tilattavan ohjelmiston tulisi toimia"
        },
        {
          "right": true,
          "text": "Jos sovelluksen toteutuksen yksityiskohtia ei ollenkaan huomioida määrittelyn yhteydessä, saatetaan vaatimusmäärittelyyn kirjata asioita joita on aivan liian kallista toteuttaa."
        },
        {
          "right": true,
          "text": "Myöhäisessä vaiheessa havaitut ongelmat saattavat johtaa suuria kustannuksia aiheuttaviin muutoksiin."
        },
        {
          "right": true,
          "text": "Vesiputousmalli ei ota huomioon sovelluksen kehityksen aikana tapahtuvia mahdollisia bisnesympäristön muutoksia"
        },
        {
          "right": false,
          "text": "Vesiputousmalli asettaa liikaa testaamiseen liittyvää vastuuta ohjelmoijille"
        },
        {
          "right": false,
          "text": "Vesiputousmalli ei ota tarpeeksi huomioon kehitystiimin johtajien mielipiteitä"
        }
      ],
      "part": "1",
      "id": 1303
    },
    {
      "courseId": "5",
      "title": "Ketterän manifestin ja sen periaatteiden mukaan",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Projektin edistymistä mitataan ensisijaisesti toimivan ohjelmiston etenemisellä"
        },
        {
          "right": true,
          "text": "Muutokseen reagoiminen on tärkeämpää kuin etukäteen laadittujen suunnitelmien noudattaminen"
        },
        {
          "right": true,
          "text": "Asiakkaalle kannattaa toimittaa käyttökelpoisia ohjelmiston versioita niin usein kuin mahdollista"
        },
        {
          "right": false,
          "text": "Dokumentointi ei ole tärkeää"
        },
        {
          "right": false,
          "text": "Yksilön vaikutus ohjelmistoprojektissa kannattaa minimoida"
        },
        {
          "right": false,
          "text": "Kommunikointi kannattaa ensisijaisesti hoitaa pikaviestimien avulla"
        },
        {
          "right": false,
          "text": "Tärkeiden deadlinejen koittaessa kehitystiimin tulee työskennellä normaalia suuremmalla intensiteetillä jotta ketteryys säilytetään"
        }
      ],
      "part": "1",
      "id": 1304
    },
    {
      "courseId": "5",
      "title": "Ketterän manifestin periaatteiden mukaan",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sen lisäksi, että ketterässä kehityksessä vaatimukset voivat vaihtua, voi myös tiimi vaihtaa tarpeen mukaan toimintatapojaan"
        },
        {
          "right": true,
          "text": "Ohjelmistokehittäjille kannattaa antaa vapaus ja vastuu päättää omista työtavoista"
        },
        {
          "right": true,
          "text": "On oleellista että ohjelmistokehittäjät käyvät tiivistä interaktiota loppukäyttäjien kanssa"
        },
        {
          "right": true,
          "text": "Kannattaa suosia mahdollisimman yksinkertaisia ratkaisuja"
        },
        {
          "right": false,
          "text": "Ohjelmistoarkkitehdin rooli on keskeinen projektien onnistumisen kannalta"
        },
        {
          "right": false,
          "text": "Ketterässä kehittämisessä ohjelmiston laadulla ei ole kovin suurta merkitystä, pääasia on toteuttaa asiakkaalle mahdollisimman nopeasti uutta toiminnallisuutta"
        },
        {
          "right": false,
          "text": "Ohjelmistosta ei kannata tuottaa uusia versiota liian usein"
        }
      ],
      "part": "1",
      "id": 1305
    },
    {
      "courseId": "5",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Product ownerin kannattaa olla hyvin selvillä ohjelmiston käyttäjien tarpeista"
        },
        {
          "right": true,
          "text": "Scrum ei suosittele yli kymmenen hengen tiimejä"
        },
        {
          "right": true,
          "text": "Scrumissa on mahdollista ja jopa suositeltavaa vaihtaa tarpeen mukaan kehitystiimin toimintatapoja"
        },
        {
          "right": false,
          "text": "Sprintin pituuden saa valita täysin vapaasti"
        },
        {
          "right": false,
          "text": "Scrumin tehokas soveltaminen on suoraviivaista sillä sen 'pelisäännöt' määrittelevä Scrum guide on vaan noin 15 sivua pitkä."
        },
        {
          "right": false,
          "text": "Scrum antaa tarkan ohjeistuksen sille miten sovelluskehittäjän tulee toimia"
        }
      ],
      "part": "1",
      "id": 1306
    },
    {
      "courseId": "5",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Product owner määrää sen mitä ja missä järjestyksessä toiminnallisuutta toteutetaan sovellukseen"
        },
        {
          "right": true,
          "text": "Jos joku tiimin ulkopuolinen pyytää sprintin aikana kehitystiimiä toteuttamaan välittömästi jonkin uuden ja briljantin idean, tulee scrum masterin puuttua asiaan"
        },
        {
          "right": true,
          "text": "Scrum master auttaa byrokraattisten ongelmien (esim. kehitystiimillä ei ole käytössä sopivaa palvelinympäristöä) ratkaisemisessa"
        },
        {
          "right": false,
          "text": "Scrum master antaa työmääräarviot sovellukseen toteutettaville toiminnallisuuksille"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjät eivät saa lisätä uusia vaatimuksia product backlogille ilman product ownerin lupaa"
        },
        {
          "right": false,
          "text": "Scrum master päättää minkä asian parissa kukin kehitystiimin jäsen sprintin aikana työskentelee"
        },
        {
          "right": false,
          "text": "Product owner työskentelee scrum masterin alaisuudessa"
        }
      ],
      "part": "1",
      "id": 1307
    },
    {
      "courseId": "5",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kehittäjätiimissä tulisi olla osaamista myös sovelluksen testaamiseen"
        },
        {
          "right": true,
          "text": "Scrum suosittelee että tiimi määrittelee yhteisen laatustandardin, joka määrittelee mitä kaikkea toiminnallisuuden toteuttaminen valmiiksi asti pitää sisällään"
        },
        {
          "right": false,
          "text": "Lähellä deadlineja myös puutteellisesti toteutetut käyttäjävaatimukset voidaan hyväksyä osaksi sprintissä julkaistavaa ohjelmistoversiota"
        },
        {
          "right": false,
          "text": "Scrum master määrittelee kehitystiimin työskentelytavat"
        },
        {
          "right": false,
          "text": "Kehitystiimi saa itse valita mitä käyttäjän vaatimuksia se kussakin sprintissä toteuttaa"
        },
        {
          "right": false,
          "text": "Yhden sprintin aikana toteutetut vaatimukset testataan yleensä vasta seuraavassa sprintissä"
        },
        {
          "right": false,
          "text": "Scrum suosittelee, että järjestelmäylläpitäjät eivät työskentele osana Scrum-tiimejä"
        }
      ],
      "part": "1",
      "id": 1308
    },
    {
      "courseId": "5",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sprintin suunnittelussa päätetään mitä seuraavan sprintin aikana on tarkoitus toteuttaa"
        },
        {
          "right": true,
          "text": "Daily scrum -palavereissa on tarkoitus tuoda esiin seikkoja, jotka mahdollisesti hidastavat kehitystyötä"
        },
        {
          "right": true,
          "text": "Sprintin katselmointien (sprint review) yhteydessä saatetaan product backlogille lisätä uusia vaatimuksia"
        },
        {
          "right": false,
          "text": "Product owner ei osallistu sprintin suunnitteluun. Sille ei ole tarvetta, sillä kehittäjätiimi työskentelee itseorganisoituvasti"
        },
        {
          "right": false,
          "text": "Termit sprint backlog ja product backlog tarkottavat käytännössä samaa"
        },
        {
          "right": false,
          "text": "Asiakkaat voivat antaa palautetta sovelluksesta Daily scrum -palaverissa"
        },
        {
          "right": false,
          "text": "Sprintin katselmoinnissa (sprint review) jokainen sovelluskehittäjä raportoi omista sprintin aikaisista tekemisistään scrum masterille"
        }
      ],
      "part": "1",
      "id": 1309
    },
    {
      "courseId": "5",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Retrospektiivin tarkoituksena on optimoida sovelluskehittäjien työskentelytapaa"
        },
        {
          "right": true,
          "text": "Scrum ei ota kantaa siihen miten sovellus testataan"
        },
        {
          "right": true,
          "text": "Inspect-and-adapt -periaatteen takia product backlog saatetaan joutua priorisoimaan uudelleen"
        },
    
        {
          "right": false,
          "text": "Retrospektiivissä priorisoidaan product backlog tarpeen vaatiessa uudelleen"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjien ei kannata paljastaa sprintin alussa esiin tulevia vaikeuksia. Koska tiimit ovat itseorganisoituja, ei ole mitään tarvetta kertoa ongelmista ulkopuolisille liian aikaisin, sillä ongelmat ratkeavat yleensä ajan kanssa"
        },
        {
          "right": false,
          "text": "ScrumBut sopii erityisesti suurien ohjelmistoprojektien hallitsemiseen"
        }
    
      ],
      "part": "1",
      "id": 1310
    },
    {
      "courseId": "5",
      "part": "2",
      "id": 1311,
      "title": "Mitkä seuraavista vaatimusmäärittelyä koskevista väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vaatimusmäärittelyn aikana selvitetään mitä toiminnallisuutta kehitteillä olevaan ohjelmistoon halutaan"
        },
        {
          "right": true,
          "text": "Vaatimusmäärittelyn aikana selvitetään minkälaisessa toimintaympäristössä kehitettävän sovelluksen on tarkoitus toimia"
        },
        {
          "right": true,
          "text": "Lainsäädännölliset rajoitukset, kuten GDPR tulee huomioida sovelluksen vaatimusmäärittelyn aikana"
        },
        {
          "right": false,
          "text": "Eräs verkkokaupan laatuvaatimus (quality attribute) voisi olla 'Asiakas voi lisätä tuotteen ostoskoriin'"
        },
        {
          "right": false,
          "text": "Eräs verkkokaupan toiminnallinen (functional requirement) vaatimus voisi olla 'Verkkokauppan on toimittava kaikilla moderneilla web-selaimella'"
        },
        {
          "right": false,
          "text": "Vaatimusten validoinnilla tarkoitetaan niiden dokumentoimista kirjallisessa muodossa, esim. ohjelmistotiimin Wikisivulla"
        }
      ]
    }, 
    {
      "courseId": "5",
      "part": "2",
      "id": 1312,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "MVP:n (minimal viable product) avulla voidaan tutkia ideoiden, esim. ohjelmiston potentiaalisten uusien ominaisuuksien, käyttökelpoisuutta"
        },
        {
          "right": true,
          "text": "Lean-startup-menetelmän tarkoituksena on oppia käyttäjien mieltymyksiä seuraamalla miten he sovellusta käyttävät"
        },
        {
          "right": false,
          "text": "A/B-testauksen avulla voidaan varmistua että järjestelmä toimii oikein poikkeuksellisissakin tilanteissa"
        },
        {
          "right": false,
          "text": "Vesiputousmallin hyvä puoli on se, että vaatimusmäärittelyä voidaan tarkentaa koko ohjelmistokehityksen ajan"
        },
        {
          "right": false,
          "text": "Eräs ketterien menetelmien ongelmista on se, että asiakas ei osaa ilmaista vaatimuksia riittävän hyvin ohjelmistokehitysprojektien alussa"
        },
        {
          "right": false,
          "text": "Lean startup -menetelmä sopii epämääräisyytensä takia oikeastaan vaan startup-yrityksille"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "2",
      "id": 1313,
      "title": "Mitkä seuraavista user storyja koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "User storylle kannattaa kirjata hyväksymäkriteerit, eli esim. joukko testejä joiden avulla voidaan todeta storyn olevan toteutettu halutulla tavalla"
        },
        {
          "right": true,
          "text": "Ennen user storyn kuvaaman toiminnallisuuden toteuttamista on oleellista kommunikoida riittävästi product ownerin tai asiakkaan edustajan kanssa"
        },
        {
          "right": true,
          "text": "'Opiskelijan tulee pystyä tarkastelemaan seuraavan periodin opetustarjontaa' on kohtuullisen hyvä muotoilu user storylle"
        },
        {
          "right": false,
          "text": "User storyyn kirjataan tarkasti kaikki loppukäyttäjän sille asettamat vaatimukset"
        },
        {
          "right": false,
          "text": "'Opiskelijoiden tiedot talletetaan tietokantaan' on hyvä muotoilu user storylle"
        },
        {
          "right": false,
          "text": "Mike Cohn ja Ron Jeffries ovat erimielisiä siitä, mitä user storyn määritelmä pitää sisällään"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "2",
      "id": 1314,
      "title": "Mitkä seuraavista user storyja koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": false,
          "text": "User storyn tekstuaalinen kuvaus on aina kirjattava muodossa 'As a _user_, I want _functionality_ so that _business value_'"
        },
        {
          "right": false,
          "text": "Kaikki product backlogille asti päätyvät user storyt ovat projektin kannalta suunilleen yhtä tärkeitä saada toteutettua"
        },
        {
          "right": false,
          "text": "User storyjen on aina noudatettava INVEST-kriteerejä"
        },
        {
          "right": false,
          "text": "Jos user story lisätään product backlogille, sen sisältöä ei saa enää muuttaa"
        },
        {
          "right": false,
          "text": "Suuren teknisen riskin sisältävän toiminnallisuuden kuvaamat user storyt kannattaa toteuttaa vasta ihan projektin lopussa, näin niissä epäonnistuminen ei laske liian aikaisessa vaiheessa sovelluskehittäjien mielialaa"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "2",
      "id": 1315,
      "title": "Mitkä seuraavista user storyjen estimointia koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Suhteellisessa estimoinnissa verrataan user storyjen työmäärää muiden user storyjen vaatimaan työmäärään"
        },
        {
          "right": true,
          "text": "Työmääräarvioissa tulee huomioida definition of done eli projektissa sovittu yleinen laatutaso"
        },
        {
          "right": true,
          "text": "Työmääräarviot auttavat asiakasta user storyjen priorisoinnissa"
        },
        {
          "right": false,
          "text": "On kehitetty menetelmiä (esim. planning poker), joiden avulla ohjelmiston tekemiseen vaadittava työmäärä voidaan arvioida kohtuullisen tarkasti jo ennen projektin käynnistymistä"
        },
        {
          "right": false,
          "text": "Ketterien menetelmien parhaiden käytänteiden mukaista on antaa product ownerin ja scrum masterin hoitaa työmääräarviointi"
        },
        {
          "right": false,
          "text": "Työmääräarvioita ei tule muuttaa kesken projektin, sillä ne ovat lupaus asiakkaalle siitä milloin sovellus tulee valmistumaan"
        },
        {
          "right": false,
          "text": "Cone of uncertainity kuvaa sitä, että mitä kokeneempi sovelluskehittäjä on, sitä parempia työmääräarvioita hän pystyy tekemään"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "2",
      "id": 1316,
      "title": "Mitkä seuraavista hyvää product backlogia koskevista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "User storyjen prioriteetti voi muuttua ajan kuluessa"
        },
        {
          "right": true,
          "text": "Sprinttiin toteutettavaksi valittavien user storyjen tulee olla riittävän pieniä"
        },
        {
          "right": true,
          "text": "Backlogille lisätään tarpeen mukaan uusia user storyja"
        },
        {
          "right": false,
          "text": "Backlogin sisältöä saa muuttaa ainoastaan sprintin suunnittelukokouksissa"
        },
        {
          "right": false,
          "text": "Jokaisen backlogille lisätyn user storyn täytyy aina sisältää tarkat hyväksymäkriteerit"
        },
        {
          "right": false,
          "text": "Jokainen backlogilla oleva user story täytyy toteuttaa, muuten projekti tuomitaan epäonnistuneeksi"
        },
        {
          "right": false,
          "text": "Kun user story on toteutettu valmiiksi, sanotaan että story on ready"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "2",
      "id": 1317,
      "title": "Mitkä seuraavista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Tuotteen tai julkaisun burndown-kaavion avulla pystytään visualisoimaan jäljellä olevaa tekemättömän työn määrää"
        },
        {
          "right": true,
          "text": "User story mapping -tekniikka ryhmittelee user storyt toiminnallisiin loogisiin kokonaisuuksiin"
        },
        {
          "right": false,
          "text": "Tiimin velositeetilla tarkoitetaan sitä kuinka monta riviä koodia tiimi pystyy keskimäärin tuottamaan yhden sprintin aikana"
        },
        {
          "right": false,
          "text": "Velositeetin perusteella voidaan helposti vertailla mikä firman ohjelmistokehitystiimeistä on suorituskyvyltään paras"
        },
        {
          "right": false,
          "text": "Tiimin velositeettiin lasketaan jokainen sprintin aikana tehty koodirivi"
        },
        {
          "right": false,
          "text": "NoEstimates-liike on sitä mieltä että user storyjen estimointia ei tarvita ja siitä ei ole mitään hyötyä"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "2",
      "id": 1318,
      "title": "Mitkä seuraavista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ei ole hyvä ottaa sprinttiin toteutettavaksi sellaista user storya jonka vaatimasta työmäärästä ei ole kellään minkäänlaista käsitystä"
        },
        {
          "right": true,
          "text": "Product owner pystyy priorisoinnin avulla vaikuttamaan siihen, mitä user storyja sprinttiin valitaan"
        },
        {
          "right": true,
          "text": "Velositeetin avulla voidaan arvioida kuinka paljon työtä yhteen sprinttiin kannattaa ottaa"
        },
        {
          "right": false,
          "text": "Sprintin tavoitteella tarkoitetaan sprinttiin valittuja user storyja"
        },
        {
          "right": false,
          "text": "Product owner määrää kuinka monta user storya kehitystiimi ottaa tiettyyn sprinttiin toteutettavaksi"
        },
        {
          "right": false,
          "text": "Jos user story on liian suuri toteutettavaksi yhdessä sprintissä, se kannattaa jakaa kahtia siten, että toinen keskittyy pelkään käyttöliittymään ja toinen bisneslogiikkaan ja tietokantaan"
        },
        {
          "right": false,
          "text": "Spike-ratkaisuilla saadaan aina nopeutettua sovelluskehitystä"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "2",
      "id": 1319,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sprintin suunnittelun yhteydessä joudutaan miettimään myös sovelluksen toteutustason asioita"
        },
        {
          "right": true,
          "text": "Taskboardiksi organisoitu sprint backlog visualisoi kunkin tehtävän eli taskin statuksen"
        },
        {
          "right": false,
          "text": "Sprint backlogille laitettavat taskit tulee aina kirjoittaa asiakkaan ymmärtämällä kielellä"
        },
        {
          "right": false,
          "text": "Product owner määrää mitä sarakkeita sprintin backlogina toimivalla taskboardilla on"
        },
        {
          "right": false,
          "text": "Sprintin burndown-käyrän avulla on mahdollista seurata kuinka paljon työtunteja kehittäjillä on vielä jäljellä kyseisessä sprintissä"
        },
        {
          "right": false,
          "text": "Jos taskien työmäärä on arvioitu tunteina, tulee taskiin käytetty työaika päivän päätteeksi aina vähentää työmääräarviosta"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "2",
      "id": 1320,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "WIP-rajoitteiden avulla voidaan yrittää pienentää riskiä sille, että sprintin aikana ehditään toteuttamaan useita user storyja ainoastaan osittain"
        },
        {
          "right": true,
          "text": "Retrospektiivi on hyvä hetki tarkastella ja modifioida sprintin taskboardia, esim. lisätä siihen WIP-rajoitteita"
        },
        {
          "right": true,
          "text": "On itseasiassa hiukan kiistanalaista kannattaako sprint backlogilla oleville taskeille antaa työmääräarvioita"
        },
        {
          "right": false,
          "text": "ScrumBan-menetelmässä noudatetaan aina 2 viikon pituisia sprinttejä"
        },
        {
          "right": false,
          "text": "ScrumBan-menetelmässä on tyypillistä, että jokainen sovelluskehittäjä työskentelee yhtä aikaa usean eri user storyn parissa"
        },
        {
          "right": false,
          "text": "Backlog grooming tehdään aina kahden sprintin välissä"
        }
      ]
    },
    
    
    {
      "courseId": "5",
      "part": "3",
      "id": 1331,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vesiputousmallissa asiakas validoi vaatimukset lukemalla vaatimusmäärittelyn tuloksena olevaa dokumentaatiota"
        },
        {
          "right": true,
          "text": "Staattisen analyysin avulla voidaan tarkastella automatisoidusti noudattaako koodi määriteltyjä tyyliseikkoja, esim. oikeaoppista sisennystä"
        },
        {
          "right": true,
          "text": "Pariohjelmoinnin on todettu vähentävän koodiin jäävien bugien määrää"
        },
        {
          "right": false,
          "text": "Koodin katselmoinnissa testataan kaatuuko sovellus sattumanvaraisilla syötteillä"
        },
        {
          "right": false,
          "text": "Ohjelmiston verifioinnilla tarkoitetaan sen varmistamista, että ollaan ylipäätään tekemässä ohjelmistoa, joka on käyttäjän tarpeisiin sopiva"
        },
        {
          "right": false,
          "text": "Ketterät menetelmät ja vesiputousmalli poikkeavat monin paikoin, mutta vaatimusten validointi tapahtuu molemmissa suunilleen samalla tavalla"
        },
        {
          "right": false,
          "text": "XP:n koodin yhteisomistajuuden periaate tarkoittaa sitä, että koodi julkaistaan Open source -lisenssillä kaikkien vapaaseen käyttöön"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "3",
      "id": 1332,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston ulkoisella laadulla tarkoitetaan sitä, onko ohjelmisto sopiva käyttötarkoitukseensa, eli toimiiko se niin kuin käyttäjä haluaa ja olettaa"
        },
        {
          "right": true,
          "text": "Järjestelmätestauksessa sovelluksen toimintaa tutkitaan usein saman rajapinnan kautta, miten loppukäyttäjä sovellusta käyttää"
        },
        {
          "right": true,
          "text": "Testitapauksia mietittäessä kannattaa valita sellaisia testisyötteitä, jotka toimivat järjestelmän kannalta erilaisella tavalla, eli mitkä eivät kuulu samaan ekvivalenssiluokkaan"
        },
        {
          "right": false,
          "text": "Käyttäjän hyväksymistestauksessa verrataan sovellusta toimintaa vaatimusmäärittelyyn"
        },
        {
          "right": false,
          "text": "Black box -testauksen suorittavat aina sovelluskehittäjät"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "3",
      "id": 1333,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Yksikkötestaus on useimmiten ns. developer-testausta, eli sovelluskehittäjien vastuulla"
        },
        {
          "right": true,
          "text": "Huono sisäinen laatu saattaa vaikeuttaa sovelluksen jatkokehittämistä"
        },
        {
          "right": true,
          "text": "Haarautumakattavuutta mittaamalla voidaan löytää ehtolauseita, joiden kaikkia haaroja ei ole testattu"
        },
        {
          "right": true,
          "text": "Mutaatiotestauksen ideana on varmistaa, että testit huomaavat sen jos koodiin tulee bugeja"
        },
        {
          "right": false,
          "text": "Lasilaatikkotestauksella testataan sovelluksen tarjoamaa käyttökokemusta, eli se kohdistuu lähinnä käyttöliittymän testaamiseen"
        },
        {
          "right": false,
          "text": "Jos koodin rivikattavuus on 100%, voidaan olla lähes varmoja, että koodi toimii oikein"
        },
        {
          "right": false,
          "text": "Yksikkötestaus suoritetaan useimmiten ohjelman tilaajaorganisaation toimesta"
        },
        {
          "right": false,
          "text": "Yksikkötestaamista kutsutaan usein End to End -testaamiseksi"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "3",
      "id": 1334,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Integraatiotestauksessa pyritään varmistamaan sovelluksen suurempien, useimmista luokista tai moduuleista koostuvien kokonaisuuksien toiminta"
        },
        {
          "right": true,
          "text": "Regressiotestaus pyrkii varmistamaan, että ohjelmiston jo aiemmin toimineet osat eivät hajoa uusien muutosten yhteydessä"
        },
        {
          "right": true,
          "text": "Regressiotestejä on mahdollista tehdä Pythonin unittest-kirjastolla"
        },
        {
          "right": false,
          "text": "Eräs ketterän kehityksen hyvistä puolia on se, että regressiotestaukselle ei käytännössä ole mitään tarvetta"
        },
        {
          "right": false,
          "text": "Ketterässä kehityksessä koodin integraatiotestauksen suorittaa kehittäjäorganisaation QA-tiimi"
        },
        {
          "right": false,
          "text": "Ketterä kehitys ja vesiputousmalli ovat monin paikoin hyvin erilaisia menetelmiä. Koodin integrointi ja integraatiotestaus tapahtuu kuitenkin molemmissa samalla tavalla"
        },
        {
          "right": false,
          "text": "Regressiotestaus tapahtuu lähes aina manuaalisesti"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "3",
      "id": 1335,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Oikeaoppista TDD:tä sovellettaessa kirjoitetaan käytännössä aina yksi testi joka ei mene läpi ja sen jälkeen mahdollisimman yksinkertainen koodi, joka läpäisee testin"
        },
        {
          "right": true,
          "text": "Oikeaoppista TDD:tä sovellettaessa koodin sisäistä rakennetta parannellaan jos huomataan sen rapistuneen, tällöin testien halutaan edelleen menevän läpi"
        },
        {
          "right": true,
          "text": "Mock-olioita käytetään testauksessa varmistamaan, että testattava olio tai metodi kommunikoi riippuvuuksiensa kanssa oikein"
        },
        {
          "right": false,
          "text": "TDD:n ikävä puoli on se, että koodista saattaa tulla sen soveltamisen seurauksena ylläpidettävyydeltään huonoa"
        },
        {
          "right": false,
          "text": "TDD soveltuu erityisen hyvin ns. legacy-järjestelmien, eli vanhojen ja ylläpidettävyyden kannalta hankalien ohjelmistojen laajentamisen välineeksi"
        },
        {
          "right": false,
          "text": "Oikeaoppista TDD:tä käytettäessä ohjelmoitavat luokat ja metodit tulee aina suunnitella erittäin tarkasti ennen ohjelmoinnin aloittamista"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "3",
      "id": 1336,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Integraatiohelvetti viittaa siihen, että vasta ohjelmintivaiheen lopussa tapahtuva luokkien ja komponenttien integrointi aiheuttaa useimmiten suuria ongelmia, riippumatta siitä miten huolellisesti ohjelmisto on suunniteltu"
        },
        {
          "right": true,
          "text": "Jatkuva integraatio pyrkii tuomaan koodin komponenteissa olevat yhteensopivuusongelmat esille niin nopeasti kuin mahdollista"
        },
        {
          "right": true,
          "text": "On oleellista jatkuvan integraation suorittamisen kannalta, että Python-projektissa tiedosto pyproject.toml on lisätty versionhallintaan"
        },
        {
          "right": false,
          "text": "Smoke testiksi kutsutaan testiä, missä järjestelmä yritetään saada kaatumaan tai 'savuamaan' kuormittamalla sitä äärimmäisen suurella operaatiomäärällä"
        },
        {
          "right": false,
          "text": "Jatkuvan integraation noudattaminen on helppoa, riittää kun joku konfiguroi tiimille  esim GitHub Actionin"
        },
        {
          "right": false,
          "text": "Jos jatkuvan integraation palvelin huomaa koodissa jonkin ongelman, riittää että ongelma korjataan seuraavan sprintin alkuun mennessä"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "3",
      "id": 1337,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Jatkuva toimittaminen (continuous deployment) vaatii erittäin suurta automaation astetta testauksen ja sovelluksen tuotantoon viemisen suhteen"
        },
        {
          "right": true,
          "text": "Jatkuvaa toimitusvalmius (continuous delivery) automatisoi ohjelmiston laadunhallinnan, mutta jättää ihmisen ratkaistavaksi missä vaiheessa uusia versiota julkaistaan loppukäyttäjille"
        },
        {
          "right": true,
          "text": "Staging-ympäristön on konfuguraatioiltaan syytä olla mahdollisimman lähellä sovelluksen tuotantoympäristöä"
        },
        {
          "right": false,
          "text": "Build pipelinen käyttö nopeuttaa ohjelmakoodin kääntämistä rinnakkaistamalla käännöksen vaiheet useille eri koneille"
        },
        {
          "right": false,
          "text": "Jatkuva toimittaminen (continuous deployment) sopii ainoastaan hyvin pienille yrityksille, esimerkiksi alkuvaiheessa oleville start upeille"
        },
        {
          "right": false,
          "text": "Staging-ympäristö ja CI-palvelin tarkoittavat samaa asiaa"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "3",
      "id": 1338,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Tutkiva testaus kannattaa kohdistaa sprintin aikana toteutettuihin uusiin toimintoihin"
        },
        {
          "right": true,
          "text": "Kokenut testaaja voi löytää tutkivaa testaamista käyttäen virheitä, jotka jäävät helposti automatisoitujen testien ulottumattomiin"
        },
        {
          "right": false,
          "text": "Tutkiva testaaminen sopii erityisen hyvin regressiotestaukseen"
        },
        {
          "right": false,
          "text": "Jos ohjelmistoprojektissa tehdään paljon tutkivaa testaamista, ei yksikkö- ja integraatiotestausta tarvitse tehdä"
        },
        {
          "right": false,
          "text": "Tutkiva testaaminen perustuu testitapausten huolelliseen etukäteissuunnitteluun"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "4",
      "id": 1341,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Canary releaseissa osa todellisista loppukäyttäjistä ohjataan käyttämään järjestelmän uutta versiota"
        },
        {
          "right": true,
          "text": "Feature toggle on eräs tekniikka canary releasejen toteuttamiseen"
        },
        {
          "right": true,
          "text": "Canary releaseja käytettäessä sovelluksen toimintaa on monitoroitava tarkasti"
        },
        {
          "right": true,
          "text": "Feature togglen avulla koodissa olevia keskeneräisiä toiminnallisuuksia voidaan piilottaa loppukäyttäjiltä"
        },
        {
          "right": false,
          "text": "Käytettäessä canary releaseja, sovelluskehittäjät testaavat sovelluksen toimivuutta ns. staging-palvelimella"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "4",
      "id": 1342,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Käytettäessä feature brancheja uusi toiminnallisuus, esim. user story toteutetaan ensin omassa versionhallinnan haarassa, ja yhdistetään kehityksen päähaaraan vasta kun se on valmiina"
        },
        {
          "right": true,
          "text": "Trunk based development ei suosi feature branchien käyttöä, kaikki koodi pyritään integroimaan välittömästi pääkehityshaaraan"
        },
        {
          "right": true,
          "text": "DevOps-toimintamallia sovellettaessa kehittäjät ja järjestelmäylläpitäjät toimivat tiiviissä yhteistyössä"
        },
        {
          "right": true,
          "text": "Infrastructure as Code tarkottaa suurinpiirtein sitä, että sovelluksien käyttämiä palvelinympäristöjä hallinnoidaan koodin avulla käsiteltävillä konfiguraatiotiedostoilla, joita voidaan esim. tallettaa versionhallintaan normaalin ohjelmakoodin tapaan"
        },
        {
          "right": false,
          "text": "Trunk based development on kiinnostava idea, mutta se sopii lähinnä pienten startup-yritysten käyttöön"
        },
        {
          "right": false,
          "text": "Trunk based development -kehitysmallia on mahdotonta soveltaa, jos sovellukseen on toteutettava niin isoja toiminnallisuuksia, että niiden tekemiseen menee kauemmin kuin päivä"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "4",
      "id": 1343,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston arkkitehtuuri määrittelee sen rakenteen suuret linjat, eli minkälaisista rakennekomponenteista ohjelmisto koostuu"
        },
        {
          "right": true,
          "text": "Arkkitehtuuri ohjaa sitä miten sovellusta tulee jatkokehittää"
        },
        {
          "right": false,
          "text": "Ohjelmiston toimintaympäristön ja toteutusteknologioiden ei tule koskaan antaa vaikuttaa ohjelmiston arkkitehtuuriin"
        },
        {
          "right": false,
          "text": "Arkkitehtuurityyli määrää sen, mitä luokkia ja metodeja ohjelmistossa on"
        },
        {
          "right": false,
          "text": "Ohjelmiston ei-toiminnallisilla vaatimuksilla ei ole vaikutusta sen arkkitehtuuriin"
        },
        {
          "right": false,
          "text": "Sovelluksen arkkitehtuuri on pysyvä, ts. alussa valittua arkkitehtuuria ei koskaan muuteta."
        }
      ]
    },
    {
      "courseId": "5",
      "part": "4",
      "id": 1344,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kerrosarkkitehtuuri tähtää siihen, että tietyn kerroksen koodiin tehtävät muutokset aiheuttaisivat mahdollisimman vähän muutoksia sovelluksen muihin osiin"
        },
        {
          "right": true,
          "text": "Kerrosarkkitehtuuria sovellettaessa käyttöliittymästä huolehtiva koodi on eristetty esimerkiksi sovelluslogiikaasta huolehtivasta koodista"
        },
        {
          "right": true,
          "text": "Mikropalveluarkkitehtuuri mahdollistaa sovelluksen toteuttamisen useita eri ohjelmointikieliä käyttäen"
        },
        {
          "right": false,
          "text": "Mikropalveluarkkitehtuuria sovellettaessa jokainen user story toteutetaan omana mikropalveluna"
        },
        {
          "right": false,
          "text": "Kerrosarkkitehtuurissa eri kerroksilla oleva koodi keskustelee ainoastaan verkon välityksellä, eli esimerkiksi käyttöliittymästä ei koskaan kutsuta suoraan sovelluslogiikkakerroksen metodeja"
        },
        {
          "right": false,
          "text": "Mikropalveluarkkitehtuurin suurimpia etuja on niiden helppo testaaminen ja debuggaaminen"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "4",
      "id": 1345,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Inkrementaalinen arkkitehtuuri tarkoittaa sitä, että ohjelman lopullinen arkkitehtuuri muodostuu projektin edetessä"
        },
        {
          "right": true,
          "text": "Inkrementaalista arkkitehtuuria sovellettaessa esimerkiksi sovelluksen kerrosrakenne toteutetaan ainakin jossain muodossa jo varhaisessa vaiheessa projektia, jopa ensimmäisessä sprintissä"
        },
        {
          "right": true,
          "text": "Ketteriä menetelmiä sovellettaessa tunnustetaan se tosiasia, että vaatimusten tapaan saattaa myös arkkitehtuuria joutua mukauttamaan projektin aikana"
        },
        {
          "right": false,
          "text": "Jos kehitystiimi rakentaa arkkitehtuurin inkrementaalisesti, ei arkkitehtuuria dokumentoida millään tavalla"
        },
        {
          "right": false,
          "text": "Walking skeleton tarkoittaa koodia, joka tullaan heittämään pois kun ohjelman ominaisuudet valmistuvat"
        },
        {
          "right": false,
          "text": "Inkrementaalinen suunnittelu ja arkkitehtuuri takaavat sen, että ohjelmistosta tulee rakenteeltaan laadukas"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "4",
      "id": 1346,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kapseloinnilla tarkoitetaan toteutustason yksityiskohtien piilottamista"
        },
        {
          "right": true,
          "text": "Metoditason koheesio pyrkii siihen, että yksittäinen metodi keskittyy ainoastaan yhteen asiaan kerrallaan. Jos metodi tekee liian monia asioita, sen koheesio paranee jos metodi jaetaan useammaksi metodiksi"
        },
        {
          "right": true,
          "text": "Mikropalveluissa yksittäisen palvelun koheesion taso on korkea ja ne kapseloivat sisäiset toimintaperiaatteensa muilta palveluilta"
        },
        {
          "right": true,
          "text": "Luokkatason koheesio ja single responsibility -periaate tarkoittavat samaa asiaa"
        },
        {
          "right": false,
          "text": "Ohjelmiston sisäisellä laadulla tarkoitetaan sitä, että koodin käyttämät tietorakenteet ja algoritmit tarjoavat optimaalisen nopean toiminnallisuuden kuhunkin käyttötarkoitukseen"
        },
        {
          "right": false,
          "text": "Single responsibility -periaate ei ole relevantti käytettäessä muita ohjelmointiparadigmoja kuin olio-ohjelmointia"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "4",
      "id": 1347,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Code smell eli koodihaju on merkki siitä, että koodin sisäisessä laadussa on todennäköisesti ongelmia"
        },
        {
          "right": true,
          "text": "Tekninen velka on metafora sille, että koodin sisäinen rakenne on heikkoa"
        },
        {
          "right": false,
          "text": "Nykyisten parhaiden käytänteiden mukaan koodi tulee kommentoida huolellisesti, esim. jokaisesta koodissa olevasta muuttujasta tulee selittää mikä tietoa muuttuja tallettaa"
        },
        {
          "right": false,
          "text": "Refaktoroinnilla muutetaan luokkien metodeja siten, että niiden toiminnallisuus vastaa paremmin asiakkaiden tarpeita"
        },
        {
          "right": false,
          "text": "Refaktorointia ei kannata suorittaa jokaisessa sprintissä, se laskisi liikaa kehitystiimin velositeettia"
        },
        {
          "right": false,
          "text": "Teknistä velkaa tulee välttää kaikissa olosuhteissa"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "5",
      "id": 1351,
      "title": "Mitkä seuraavista ovat leanin mukaan hukkaa (muda)?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Välivarastointi"
        },
        {
          "right": true,
          "text": "Ylituotanto"
        },
        {
          "right": true,
          "text": "Odotus"
        },
        {
          "right": true,
          "text": "Tuotteessa olevat viat"
        },
        {
          "right": false,
          "text": "Taukojen pitäminen"
        },
        {
          "right": false,
          "text": "Koulutus"
        },
        {
          "right": false,
          "text": "Toimintojen ulkoistaminen"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "5",
      "id": 1352,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kaizen tarkoittaa työskentelytapojen jatkuvaan parantamisen kannustavaa asennetta"
        },
        {
          "right": true,
          "text": "Jatkuva parantaminen pyrkii etsimään ongelmien perimmäisen syyn (root cause) ja eliminoimaan sen"
        },
        {
          "right": true,
          "text": "Pull- tai JIT-periaatteilla tarkoitetaan sitä, että tuotetta tai sen tarvitsemia komponentteja valmistetaan vasta tilauksesta, eli ei varalta etukäteen"
        },
        {
          "right": true,
          "text": "Kanban on eräs työkalu pull- tai JIT-periaatteen toteuttamiseen"
        },
        {
          "right": false,
          "text": "Lean pyrkii maksimoimaan tuotantolaitteiden käyttöasteen"
        },
        {
          "right": false,
          "text": "Kaizen ei kosketa yrityksen rivityöntekijöitä, keskitason johto hoitaa kaizeniin liittyvät asiat"
        },
        {
          "right": false,
          "text": "Läpimenoaika (leadtime) tarkoittaa sitä, miten nopeasti jatkuvassa parannuksessa saadaan eliminoitua hukkaa aiheuttavat tekijät"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "5",
      "id": 1353,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean suosii periaatetta, jossa päätökset tehdään mahdollisimman myöhäisessä vaiheessa, mutta ei kuitenkaan liian myöhään"
        },
        {
          "right": true,
          "text": "Osassa 2 mainitun 'hyvän backlogin' kriteerejä noudattava backlog on leanin periaatteiden mukainen"
        },
        {
          "right": false,
          "text": "Build quality in -periaatteen mukaan kannattaa keskittyä kalliimpien tuotteiden valmistamiseen. Esim. Applella periaate näkyy siinä, että firmalla ei ole halpoja puhelinmalleja"
        },
        {
          "right": false,
          "text": "Lean pyrkii läpimenoajan (leadtime) optimointiin henkilökohtaisilla bonuksilla"
        },
        {
          "right": false,
          "text": "Vesiputousmallissa suositut, hyvin tarkkaan tehdyt vaatimusmäärittelydokumentit ovat leanin periaatteiden mukaisia"
        },
        {
          "right": false,
          "text": "Vesiputousmallin suosima periaate tehdä sovelluksen testaus erillisenä lopussa tapahtuvana vaiheena on leanin periaatteiden mukainen käytäntö"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "5",
      "id": 1354,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean-ideaalin mukainen johtaja hallitsee myös käytännön hands on -työskentelyn"
        },
        {
          "right": true,
          "text": "Tuotekehitykseen sovellettaessa lean pyrkii kiihdyttämään oppimista"
        },
        {
          "right": true,
          "text": "Leanin tuotekehityksen periaatteiden mukaan epävarmat asiat kannattaa selvittää varhaisessa vaiheessa"
        },
        {
          "right": false,
          "text": "Leanin tuotekehityksen 'set based concurrent development'-menetelmän idea on sama kuin iteratiivisessa ohjelmistokehityksessä, tuotetta laajennetaan ja parannellaan vähitellen iteraatio iteraatiolta"
        },
        {
          "right": false,
          "text": "Go see (kenchi genbutsu) -periaateen mukaan työntekijöiden tulee raportoida tekemisistä tarkasti managerille"
        },
        {
          "right": false,
          "text": "Scrum ei ole leanin periaatteiden mukainen, koska se on push-systeemi"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "5",
      "id": 1355,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Scrum of scrums on periaate, jonka avulla pyritään hallitsemaan useita kehitystiimejä, jotka työskentelevät saman tuotteen parissa"
        },
        {
          "right": true,
          "text": "SAFe on hyvin tarkkaan dokumentoitu ja runsaasti erilaisia periaatteita ja henkilörooleja sisältävä laajan mittakaavan ketterä menetelmäkehys"
        },
        {
          "right": true,
          "text": "LeSS:iä sovellettaessa oletuksena on, että kehitetään yhtä tuotetta, jolla on yksi product owner. LeSS ei ota kantaa siihen, miten eri tuotteita kehittävät tiimit suhtautuvat toisiinsa"
        },
        {
          "right": false,
          "text": "LeSS lisää Scrumiin joukon kokonaan uudentyyppisiä palavereja sekä henkilörooleja"
        },
        {
          "right": false,
          "text": "LeSS suosittelee jakamaan työtä siten, että esimerkiksi yksi tiimi huolehtii sovelluksen frontendistä, yksi sovelluksen backendista ja yksi sovelluksen tietokannasta"
        },
        {
          "right": false,
          "text": "9 tai enemmän tiimiä sisältävässä LeSS huge -versiossa jokaiselle tiimille on varattu oma product backlog"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "5",
      "id": 1356,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ketteriä menetelmiä käytetään nykyään useimpien tutkimusten mukaan yli 50% kaikista ohjelmistoprojekteista"
        },
        {
          "right": true,
          "text": "Tutkimusten mukaan yllättävän monet ketteriä menetelmiä soveltavat eivät kuitenkaan noudata monia ketteryyden perusperiaatteita esimerkiksi lyhyitä iteraatiota"
        },
        {
          "right": true,
          "text": "Erään tutkimuksen mukaan Jatkuva toimittaminen (continuous deployment) on ollut käytössä jopa kolmasosalla vastaajista"
        },
        {
          "right": false,
          "text": "Ketterien menetelmien nousu näyttää olevan takana, esim. Yhdysvaltojen hallituksen alaisissa projekteissa ketteriä menetelmiä ei enää käytetä yhtä paljon kuin esimerkiksi 10 vuotta sitten, kun Scrum-hype oli suurimmillaan"
        },
        {
          "right": false,
          "text": "Tutkimusten mukaan suuret ohjelmistoprojektit onnistuvat suuremmalla todennäköisyydellä kuin pienet projektit"
        },
        {
          "right": false,
          "text": "Tutkimusten mukaan suurin ketteryyden tuoma hyöty on sen kustannustehokkuus"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "6",
      "id": 1361,
      "title": "(1) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Smartlyn toimiala on Facebook-mainostus"
        },
        {
          "right": true,
          "text": "Tärkeä motivaatio automaattisille testeille on varmistua siitä, että jo toimineet asiat eivät hajoa kun koodia muokataan"
        },
        {
          "right": true,
          "text": "End to end -testit testaavat järjestelmää kokonaisuudessaan, kurssin käyttämän terminologian <i>järjestelmätestit</i> ovat siis end to end -testejä"
        },
        {
          "right": false,
          "text": "Smartyllä tiimirakene vastaa ohjelmiston arkkitehtuurisia kerroksia, eli esim. sovelluksen käyttöliittymästä on vastuussa oma tiiminsä"
        },
        {
          "right": false,
          "text": "Automatisoidut testit ovat hyvä keino löytää ohjelmistosta kokonaan uudenlaisia bugeja"
        },
        {
          "right": false,
          "text": "Kattava yksikkötestaus on riittävä tapa saavuttaa täysi luottamus sille, että ohjelmisto toimii oikein"
        },
        {
          "right": false,
          "text": "End to end -testeissä kutsutaan myös ulkoisten palveluiden esimerkiksi Facebookin rajapintoja"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "6",
      "id": 1362,
      "title": "(2) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "API-testeillä voidaan testata esimerkiksi yksittäistä mikropalvelua kokonaisuudessaan"
        },
        {
          "right": true,
          "text": "Yksikkötestit eivät käytä tietokantaa"
        },
        {
          "right": true,
          "text": "End to end -testit suoritetaan käyttöliittymän läpi"
        },
        {
          "right": true,
          "text": "End to end -testien huono puoli on se, että ne ovat usein riippuvaisia käyttöliittymässä esitettävän datan muodosta"
        },
        {
          "right": false,
          "text": "Integraatiotestit eivät käytä tietokantaa"
        },
        {
          "right": false,
          "text": "Yksikkötestit tekevät usein HTTP-pyyntöjä verkossa oleviin rajapintoihin"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "6",
      "id": 1363,
      "title": "(3) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Testipyramidi antaa erään suosituksen sille, kuinka paljon testausta kannattaa kohdentaa eri testauksen tasoille"
        },
        {
          "right": true,
          "text": "Monien startupien tapaan Smartyllä oli tilanne aluksi se, että automatisoituja testejä ei ollut"
        },
        {
          "right": true,
          "text": "Jos koodissa havaitaan bugi, kannattaa bugikorjauksen lisäksi tehdä testit, jotka varmistavat ettei sama bugi palaa koodiin uudelleen"
        },
        {
          "right": false,
          "text": "Kokonaan ilman automaattisia testejä olevan 'legacy'-koodin testauksen automatisointi kannattaa aloittaa yksikkötesteistä"
        },
        {
          "right": false,
          "text": "Startup-yrityksen kannattaa rakentaa kattavat automaattiset testit jo siinä vaiheessa kun ns. 'product market -fit' on vielä löytymättä"
        },
        {
          "right": false,
          "text": "Testipyramidin mukaista jakaumaa eri tason testien määrään suhteen kannattaa noudattaa aina heti ohjelmakomponentin, esim. mikropalvelun toteuttamisen ensimmäisestä päivästä alkaen"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "6",
      "id": 1364,
      "title": "(4) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Smartly ei enää käytä ollenkaan end to end -testejä sillä kokemus niistä oli huono, testit rikkoontuivat välillä ilman mitään syytä"
        },
        {
          "right": true,
          "text": "Smartlyllä koodiin tehtävät lisäykset katselmoidaan pull requestien (PR) kautta"
        },
        {
          "right": true,
          "text": "Smartly julkaisee feature togglejen avulla joitain koodiin tulevia muutoksia/toiminnallisuuksia aluksi vain osalle asiakkaista"
        },
        {
          "right": false,
          "text": "Smartlyllä on yhtenäiset testauskäytänteet, tämän takia jokainen tiimi testaa vastuullaan olevaa ohjelmiston osaa samalla tavalla"
        },
        {
          "right": false,
          "text": "Smartlyllä ohjelmiston laadusta vastaa erillinen laadunhallintaan keskittyvä QA-tiimi"
        },
        {
          "right": false,
          "text": "Smartlyllä koodia testataan manuaalisesti ennen kuin se päästetään tuotantokäyttöön"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "6",
      "id": 1365,
      "title": "(1) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Saavutettavuus/esteettömyys tarkoittaa sitä, että tuotteen on tarjottava sama kokemus käyttäjän rajoitteista huolimatta"
        },
        {
          "right": true,
          "text": "Käyttökokemussuunnittelun (UX design) on mukautunut ketteryyteen paljon ohjelmistokehitystä hitaammin"
        },
        {
          "right": true,
          "text": "Käyttäjäkeskeinen suunnittelu (User centric design) on iteratiivinen menetelmä käyttökokemussuunnitteluun"
        },
        {
          "right": false,
          "text": "Käyttökokemussuunnittelun (UX design) katsotaan syntyneen 1980-luvulla piilaaksossa Microsoftin tuotekehityslaboratoriossa"
        },
        {
          "right": false,
          "text": "Tarkka, etukäteen tapahtuva suunnittelu on onnistuneen käyttökokemuksen luomisen edellytys"
        },
        {
          "right": false,
          "text": "Käyttäjäkeskeinen suunnittelu (User centric design) määrittelee erään tarkan ohjeiston sille, miten käyttökokemussuunnittelua tulee tehdä"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "6",
      "id": 1366,
      "title": "(2) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean UX suosittelee sijoittamaan designerit osaksi ohjelmistokehitystiimejä"
        },
        {
          "right": true,
          "text": "Lean UX pyrkii siihen että työtä edistetään pienissä paloissa ja eritasoisia aikaansaannoksia julkaistaan nopeassa syklissä"
        },
        {
          "right": true,
          "text": "Erehdykset salliva kulttuuri kuuluu Lean UX:ään"
        },
        {
          "right": false,
          "text": "Ketterässä käyttökokemussuunnittelussa (Agile UX) ovat avainasemassa tarkat eli ns. pixel perfect -tasolla tehdyt layout-suunnitelmat"
        },
        {
          "right": false,
          "text": "Lean UX:ssä käyttökokemuksen määrittelee firman johtava suunnittelija, eli ns. UX-ninja"
        },
        {
          "right": false,
          "text": "Lean UX suosittelee että käyttäjätestaus tehdään kontrolloiduissa laboratorio-olosuhteissa"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "6",
      "id": 1367,
      "title": "(3) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Design sprintti on menetelmä, jonka avulla käydään lyhyessä ajassa läpi kaikki design-prosessin vaiheet, motivaationa esim. alustavan liiketoimintakonseptin luominen"
        },
        {
          "right": true,
          "text": "Design systeemi määrittelee esimerkiksi yrityksen web-sivuston graafisen ulkoasun"
        },
        {
          "right": true,
          "text": "Design systeemi saattaa tarjota joukon muotoilultaan valmiita käyttöliittymäkomponentteja"
        },
        {
          "right": false,
          "text": "Oikeaoppisessa Lean UX -menetelmässä joka toinen sprintti on Design sprintti ja joka toinen normaali sovelluskehitykseen keskittyvä sprintti"
        },
        {
          "right": false,
          "text": "Design sprintin pituus on aina viikko"
        },
        {
          "right": false,
          "text": "Käytettävyyssuunnittelu on taidetta, tieteellisellä ajattelulla ei ole roolia käytettävyyssuunnittelussa"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "7",
      "id": 1371,
      "title": "(1) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Nykyään on tyypillistä, että sovelluskehittäjä joutuu käyttämään useita eri ohjelmointikieliä jopa yhdessä projektissa työskennellessään"
        },
        {
          "right": true,
          "text": "Ei ole olemassa vain yhtä tapaa kouluttautua ohjelmistoalalle"
        },
        {
          "right": false,
          "text": "Ketterän manifestin mukaiset itseorganisoituvat tiimit ovat utopia, niillä ei ole sijaa nykyisessä bisneksessä, tiimien tulee työskennellä tiukan ulkoisen ohjauksen varassa"
        },
        {
          "right": false,
          "text": "Softa-alalla menestyksekkäästi toimimiseen tarvitaan nykyään täysin erilainen mindset, eli mielenlaatu/ajattelutapa kuin 80-luvulla"
        },
        {
          "right": false,
          "text": "Jos osaat hyvin yhden teknologian, pärjäät sen avulla ohjelmistoalalla jopa vuosikymmeniä"
        },
        {
          "right": false,
          "text": "On parasta koostaa ohjelmistotiimi mahdollisimman samankaltaisista ihmisistä, liika erilaisuus ihmisten taustoissa vaikeuttaa asiakkaiden tarpeiden ymmärtämistä"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "7",
      "id": 1372,
      "title": "(2) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston uusia versiota kannattaa viedä (eli 'shipata') tuotantoon niin usein kuin mahdollista, jopa yli 10 kertaa päivässä"
        },
        {
          "right": true,
          "text": "Ensimmäisenä mieleen tuleva tekninen ratkaisu kannattaa usein kyseenalaistaa"
        },
        {
          "right": false,
          "text": "Isojen IT-organisaatioiden on huomattavasti helpompi ottaa huomioon asiakkaan tarpeet kuin pienten ketterien tiimien"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjien ei ole tarvetta ymmärtää bisneksen tarpeita tai sovelluksen arkkitehtuuriratkaisuja, riittää että sovelluskehittäjä maksimoi tuotantokäyttöön vietävän koodin määrään"
        },
        {
          "right": false,
          "text": "Sovelluksen laadunhallinta kannattaa tehdä laadunhallintaan varatuissa sprinteissä, joita pidetään noin 4-5 sprintin välein"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "7",
      "id": 1373,
      "title": "(3) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Retrospektiiveja ei tulisi jättää pitämättä"
        },
        {
          "right": true,
          "text": "Sprintin aikaisesta työskentelystä noin 10% tulisi kohdistua seuraavien sprinttien aikana toteutettavien storyjen valmisteluun"
        },
        {
          "right": false,
          "text": "Paras sprintin pituus on 4 viikkoa"
        },
        {
          "right": false,
          "text": "Eräs Elisan parhaista käytänteistä ovat ns. tekniset storyt, eli storyt joiden toteuttaminen ei yleensä näy käyttäjälle mitenkään"
        },
        {
          "right": false,
          "text": "Teknistä velkaa ei tule ottaa missään olosuhteissa"
        },
        {
          "right": false,
          "text": "Niin sanotun Nokia-testin voi läpäistä ainoastaan, jos ennen toteutusvaihetta pidetään joukko spesifikaatiosprinttejä, joiden aikana ohjelmisto määritellään tarkasti"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "7",
      "id": 1374,
      "title": "(4) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Hyvin toimiva jatkuva integraatio (CI) vaikuttaa parhaimmillaan organisaation suorituskykyyn jopa liiketoiminnan tasolla"
        },
        {
          "right": true,
          "text": "Yli muutaman päivän pituisia feature brancheja ei kannata käyttää"
        },
        {
          "right": true,
          "text": "Jos jatkuvan integraation (CI) 'build' hajoaa, eli koodi ei käänny, tai jokin testi ei mene läpi, tulee ongelma korjata heti"
        },
        {
          "right": true,
          "text": "Sen koodin määrä joka ei ole tuotantokäytössä tulee minimoida"
        },
        {
          "right": false,
          "text": "Jatkuva integraatio (CI) toimii ainoastaan sellaisissa ohjelmistoissa, joita kehittää yksi tai korkeintaan pari tiimiä. Isommassa skaalassa ohjelmistoja kehitettäessä CI:n käyttö olisi liian suuri hidaste"
        },
        {
          "right": false,
          "text": "Jatkuva integraation (CI) soveltaminen onnistuu ainoastaan pilvipalveluina toteutetuille web-sovelluksille"
        },
        {
          "right": false,
          "text": "CI-palvelimen status, eli onko kaikki hyvin vai onko esim. testeissä ongelmia, tulee pitää kehitystiimin sisäisenä asiana"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "7",
      "id": 1379,
      "title": "(5) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Suurin hukka ohjelmistokehityksessä on se, että rakennetaan asiakkaan tarpeiden kannalta kokonaan vääränlainen järjestelmä"
        },
        {
          "right": true,
          "text": "Lean-startup-menetelmällä testataan idean tarpeellisuutta/hyödyllisyyttä oikeilla käyttäjillä"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä jokaisella tiimillä voi olla oma Definition of done"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä osan tiimeistä kannattaa erikoistua joihinkin osa-alueisiin, esimerkiksi testaamiseen"
        },
        {
          "right": false,
          "text": "Ohjelmistokehittäjille kannattaa antaa henkilökohtaisia suoriutumistavoitteita jotka vaikuttavat suoraan palkkaukseen, näin myös tiimit saadaan työskentelemään mahdollisimman tehokkaasti"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä eri tiimien jäsenet eivät yleensä keskustele suoraan keskenään, keskustelu hoidetaan tiimien scrum masterien kautta"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "7",
      "id": 1375,
      "title": "(1) Mitkä seuraavista Marko Klemetin luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Erään määritelmän mukaan DevOps tarkoittaa sovelluskehittäjien ja järjestelmäylläpitäjien välistä yhteistyötä"
        },
        {
          "right": true,
          "text": "DevOpsiin liittyvät työkalut auttavat keräämään monenlaista informaatiota tuotantoympäristöstä ja täten tekemään sovelluksen toiminnallisuuteen liittyviä kokeiluja"
        },
        {
          "right": true,
          "text": "Sovellus tulisi viedä tuotantoympäristöön heti kehitystyön alkuvaiheessa, jopa jo ensimmäisenä päivänä, ennen kuin sovelluksessa on juurikaan valmiina olevaa toiminnallisuutta"
        },
        {
          "right": true,
          "text": "Eräs pilviympäristöjen hyvistä puolista on se, että ne antavat sovelluskehittäjille mahdollisuuden julkaista koodia suoraan tuotantoympäristöön"
        },
        {
          "right": false,
          "text": "DevOpsia soveltamalla on mahdollista korvata testausautomaatio"
        }
      ]
    },
    {
      "courseId": "5",
      "part": "7",
      "id": 1376,
      "title": "(2) Mitkä seuraavista Marko Klemetin luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Design-systeemi dokumentoi yrityksen visuaalisen ilmeen ja saattaa jopa tarjota uudelleenkäytettäviä, visuaalista ilmettä noudattavia käyttöliittymäkomponentteja"
        },
        {
          "right": true,
          "text": "ROBOT-framework on hyväksymistestauksen työkalu, missä testit kirjoitetaan asiakkaan ymmärtämällä kielellä"
        },
        {
          "right": true,
          "text": "GitHub actions ja Jenkins ovat jatkuvaan integraatioon (CI) sopivia palveluita"
        },
        {
          "right": false,
          "text": "Paras käytänne DevOpsin soveltamiseen on muodostaa yritykseen erillinen DevOps-tiimi, joka hoitaa tuotantojärjestelmien ja deployment-pipelinen konfiguroinnin"
        },
        {
          "right": false,
          "text": "Jatkuvan integraation (CI) ja jatkuvan julkaisun (CD) konfiguraatioita ei kannata tallettaa versionhallintaan"
        },
        {
          "right": false,
          "text": "DevOpsin käyttöönotossa tärkeimmässä asemassa on sopivien työkalujen tehokas käyttö"
        }
      ]
    },

    {
      "id": 401,
      "part": "1",
      "courseId": "6",
      "title": "Mitkä seuraavista ovat ohjelmiston elinkaaren vaiheita (lifecycle phases)?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "asiakkaan vaatimusten selvittäminen"
        },
        {
          "right": true,
          "text": "testaus"
        },
        {
          "right": true,
          "text": "ohjelmointi"
        },
        {
          "right": true,
          "text": "ohjelmiston rakenteen suunnittelu"
        },
        {
          "right": true,
          "text": "käytössä jo olevan ohjelmiston laajentaminen"
        },
        {
          "right": false,
          "text": "ohjelmiston dokumentointi"
        },
        {
          "right": false,
          "text": "suorituskyvyn parantaminen"
        },
        {
          "right": false,
          "text": "asiakastapaamiset"
        }
      ]
    },
    {
      "courseId": "6",
      "title": "Mitkä seuraavista vesiputousmallia koskevista väitteistä ovat  'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vesiputousmallia käytettäessä tulee määrittelyn ja suunnittelun tuotokset dokumentoida huolellisesti."
        },
        {
          "right": true,
          "text": "Jos käytetään vesiputousmallia ohjelmoijat eivät tyypillisesti osallistu vaatimusmäärittelyyn"
        },
        {
          "right": false,
          "text": "Yksi ensimmäisistä vesiputousmallin puolestapuhujista oli Winston Royce"
        },
        {
          "right": false,
          "text": "Yhdysvaltojen puolustusministeriö eli Department of Defence ei tänä päivänäkään salli muiden ohjelmistotuotantotapojen kuin vesiputousmallin käyttöä"
        },
        {
          "right": false,
          "text": "Avaruussukkuloiden käyttämä ohjelmisto rakennettiin vesiputousmallilla"
        },
        {
          "right": false,
          "text": "Vesiputousmalli sopii erityisen hyvin pitkäkestoisiin projekteihin sillä niissä on paremmin aikaa suorittaa aluksi perusteellinen vaatimusmäärittely"
        },
        {
          "right": false,
          "text": "Vesiputousmalli sopii erityisen hyvin pitkäkestoisiin projekteihin sillä niissä on paremmin aikaa suorittaa lopuksi kattava testaus"
        }
      ],
      "part": "1",
      "id": 402
    },
    {
      "courseId": "6",
      "title": "Seuraavassa luetellut ovat vesiputousmallin heikkouksia:",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Asiakkaan ei ole helppoa ilmaista sitä miten tilattavan ohjelmiston tulisi toimia"
        },
        {
          "right": true,
          "text": "Jos sovelluksen toteutuksen yksityiskohtia ei ollenkaan huomioida määrittelyn yhteydessä, saatetaan vaatimusmäärittelyyn kirjata asioita joita on aivan liian kallista toteuttaa."
        },
        {
          "right": true,
          "text": "Myöhäisessä vaiheessa havaitut ongelmat saattavat johtaa suuria kustannuksia aiheuttaviin muutoksiin."
        },
        {
          "right": true,
          "text": "Vesiputousmalli ei ota huomioon sovelluksen kehityksen aikana tapahtuvia mahdollisia bisnesympäristön muutoksia"
        },
        {
          "right": false,
          "text": "Vesiputousmalli asettaa liikaa testaamiseen liittyvää vastuuta ohjelmoijille"
        },
        {
          "right": false,
          "text": "Vesiputousmalli ei ota tarpeeksi huomioon kehitystiimin johtajien mielipiteitä"
        }
      ],
      "part": "1",
      "id": 403
    },
    {
      "courseId": "6",
      "title": "Ketterän manifestin ja sen periaatteiden mukaan",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Projektin edistymistä mitataan ensisijaisesti toimivan ohjelmiston etenemisellä"
        },
        {
          "right": true,
          "text": "Muutokseen reagoiminen on tärkeämpää kuin etukäteen laadittujen suunnitelmien noudattaminen"
        },
        {
          "right": true,
          "text": "Asiakkaalle kannattaa toimittaa käyttökelpoisia ohjelmiston versioita niin usein kuin mahdollista"
        },
        {
          "right": false,
          "text": "Dokumentointi ei ole tärkeää"
        },
        {
          "right": false,
          "text": "Yksilön vaikutus ohjelmistoprojektissa kannattaa minimoida"
        },
        {
          "right": false,
          "text": "Kommunikointi kannattaa ensisijaisesti hoitaa pikaviestimien avulla"
        },
        {
          "right": false,
          "text": "Tärkeiden deadlinejen koittaessa kehitystiimin tulee työskennellä normaalia suuremmalla intensiteetillä jotta ketteryys säilytetään"
        }
      ],
      "part": "1",
      "id": 404
    },
    {
      "courseId": "6",
      "title": "Ketterän manifestin periaatteiden mukaan",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sen lisäksi, että ketterässä kehityksessä vaatimukset voivat vaihtua, voi myös tiimi vaihtaa tarpeen mukaan toimintatapojaan"
        },
        {
          "right": true,
          "text": "Ohjelmistokehittäjille kannattaa antaa vapaus ja vastuu päättää omista työtavoista"
        },
        {
          "right": true,
          "text": "On oleellista että ohjelmistokehittäjät käyvät tiivistä interaktiota loppukäyttäjien kanssa"
        },
        {
          "right": true,
          "text": "Kannattaa suosia mahdollisimman yksinkertaisia ratkaisuja"
        },
        {
          "right": false,
          "text": "Ohjelmistoarkkitehdin rooli on keskeinen projektien onnistumisen kannalta"
        },
        {
          "right": false,
          "text": "Ketterässä kehittämisessä ohjelmiston laadulla ei ole kovin suurta merkitystä, pääasia on toteuttaa asiakkaalle mahdollisimman nopeasti uutta toiminnallisuutta"
        },
        {
          "right": false,
          "text": "Ohjelmistosta ei kannata tuottaa uusia versiota liian usein"
        }
      ],
      "part": "1",
      "id": 405
    },
    {
      "courseId": "6",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Product ownerin kannattaa olla hyvin selvillä ohjelmiston käyttäjien tarpeista"
        },
        {
          "right": true,
          "text": "Scrum ei suosittele yli kymmenen hengen tiimejä"
        },
        {
          "right": true,
          "text": "Scrumissa on mahdollista ja jopa suositeltavaa vaihtaa tarpeen mukaan kehitystiimin toimintatapoja"
        },
        {
          "right": false,
          "text": "Sprintin pituuden saa valita täysin vapaasti"
        },
        {
          "right": false,
          "text": "Scrumin tehokas soveltaminen on suoraviivaista sillä sen 'pelisäännöt' määrittelevä Scrum guide on vaan noin 15 sivua pitkä."
        },
        {
          "right": false,
          "text": "Scrum antaa tarkan ohjeistuksen sille miten sovelluskehittäjän tulee toimia"
        }
      ],
      "part": "1",
      "id": 406
    },
    {
      "courseId": "6",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Product owner määrää sen mitä ja missä järjestyksessä toiminnallisuutta toteutetaan sovellukseen"
        },
        {
          "right": true,
          "text": "Jos joku tiimin ulkopuolinen pyytää sprintin aikana kehitystiimiä toteuttamaan välittömästi jonkin uuden ja briljantin idean, tulee scrum masterin puuttua asiaan"
        },
        {
          "right": true,
          "text": "Scrum master auttaa byrokraattisten ongelmien (esim. kehitystiimillä ei ole käytössä sopivaa palvelinympäristöä) ratkaisemisessa"
        },
        {
          "right": false,
          "text": "Scrum master antaa työmääräarviot sovellukseen toteutettaville toiminnallisuuksille"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjät eivät saa lisätä uusia vaatimuksia product backlogille ilman product ownerin lupaa"
        },
        {
          "right": false,
          "text": "Scrum master päättää minkä asian parissa kukin kehitystiimin jäsen sprintin aikana työskentelee"
        },
        {
          "right": false,
          "text": "Product owner työskentelee scrum masterin alaisuudessa"
        }
      ],
      "part": "1",
      "id": 407
    },
    {
      "courseId": "6",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kehittäjätiimissä tulisi olla osaamista myös sovelluksen testaamiseen"
        },
        {
          "right": true,
          "text": "Scrum suosittelee että tiimi määrittelee yhteisen laatustandardin, joka määrittelee mitä kaikkea toiminnallisuuden toteuttaminen valmiiksi asti pitää sisällään"
        },
        {
          "right": false,
          "text": "Lähellä deadlineja myös puutteellisesti toteutetut käyttäjävaatimukset voidaan hyväksyä osaksi sprintissä julkaistavaa ohjelmistoversiota"
        },
        {
          "right": false,
          "text": "Scrum master määrittelee kehitystiimin työskentelytavat"
        },
        {
          "right": false,
          "text": "Kehitystiimi saa itse valita mitä käyttäjän vaatimuksia se kussakin sprintissä toteuttaa"
        },
        {
          "right": false,
          "text": "Yhden sprintin aikana toteutetut vaatimukset testataan yleensä vasta seuraavassa sprintissä"
        },
        {
          "right": false,
          "text": "Scrum suosittelee, että järjestelmäylläpitäjät eivät työskentele osana Scrum-tiimejä"
        }
      ],
      "part": "1",
      "id": 408
    },
    {
      "courseId": "6",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sprintin suunnittelussa päätetään mitä seuraavan sprintin aikana on tarkoitus toteuttaa"
        },
        {
          "right": true,
          "text": "Daily scrum -palavereissa on tarkoitus tuoda esiin seikkoja, jotka mahdollisesti hidastavat kehitystyötä"
        },
        {
          "right": true,
          "text": "Sprintin katselmointien (sprint review) yhteydessä saatetaan product backlogille lisätä uusia vaatimuksia"
        },
        {
          "right": false,
          "text": "Product owner ei osallistu sprintin suunnitteluun. Sille ei ole tarvetta, sillä kehittäjätiimi työskentelee itseorganisoituvasti"
        },
        {
          "right": false,
          "text": "Termit sprint backlog ja product backlog tarkottavat käytännössä samaa"
        },
        {
          "right": false,
          "text": "Asiakkaat voivat antaa palautetta sovelluksesta Daily scrum -palaverissa"
        },
        {
          "right": false,
          "text": "Sprintin katselmoinnissa (sprint review) jokainen sovelluskehittäjä raportoi omista sprintin aikaisista tekemisistään scrum masterille"
        }
      ],
      "part": "1",
      "id": 409
    },
    {
      "courseId": "6",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Retrospektiivin tarkoituksena on optimoida sovelluskehittäjien työskentelytapaa"
        },
        {
          "right": true,
          "text": "Scrum ei ota kantaa siihen miten sovellus testataan"
        },
        {
          "right": true,
          "text": "Inspect-and-adapt -periaatteen takia product backlog saatetaan joutua priorisoimaan uudelleen"
        },
    
        {
          "right": false,
          "text": "Retrospektiivissä priorisoidaan product backlog tarpeen vaatiessa uudelleen"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjien ei kannata paljastaa sprintin alussa esiin tulevia vaikeuksia. Koska tiimit ovat itseorganisoituja, ei ole mitään tarvetta kertoa ongelmista ulkopuolisille liian aikaisin, sillä ongelmat ratkeavat yleensä ajan kanssa"
        },
        {
          "right": false,
          "text": "ScrumBut sopii erityisesti suurien ohjelmistoprojektien hallitsemiseen"
        }
    
      ],
      "part": "1",
      "id": 410
    },
    {
      "courseId": "6",
      "part": "2",
      "id": 411,
      "title": "Mitkä seuraavista vaatimusmäärittelyä koskevista väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vaatimusmäärittelyn aikana selvitetään mitä toiminnallisuutta kehitteillä olevaan ohjelmistoon halutaan"
        },
        {
          "right": true,
          "text": "Vaatimusmäärittelyn aikana selvitetään minkälaisessa toimintaympäristössä kehitettävän sovelluksen on tarkoitus toimia"
        },
        {
          "right": true,
          "text": "Lainsäädännölliset rajoitukset, kuten GDPR tulee huomioida sovelluksen vaatimusmäärittelyn aikana"
        },
        {
          "right": false,
          "text": "Eräs verkkokaupan laatuvaatimus (quality attribute) voisi olla 'Asiakas voi lisätä tuotteen ostoskoriin'"
        },
        {
          "right": false,
          "text": "Eräs verkkokaupan toiminnallinen (functional requirement) vaatimus voisi olla 'Verkkokauppan on toimittava kaikilla moderneilla web-selaimella'"
        },
        {
          "right": false,
          "text": "Vaatimusten validoinnilla tarkoitetaan niiden dokumentoimista kirjallisessa muodossa, esim. ohjelmistotiimin Wikisivulla"
        }
      ]
    }, 
    {
      "courseId": "6",
      "part": "2",
      "id": 412,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "MVP:n (minimal viable product) avulla voidaan tutkia ideoiden, esim. ohjelmiston potentiaalisten uusien ominaisuuksien, käyttökelpoisuutta"
        },
        {
          "right": true,
          "text": "Lean-startup-menetelmän tarkoituksena on oppia käyttäjien mieltymyksiä seuraamalla miten he sovellusta käyttävät"
        },
        {
          "right": false,
          "text": "A/B-testauksen avulla voidaan varmistua että järjestelmä toimii oikein poikkeuksellisissakin tilanteissa"
        },
        {
          "right": false,
          "text": "Vesiputousmallin hyvä puoli on se, että vaatimusmäärittelyä voidaan tarkentaa koko ohjelmistokehityksen ajan"
        },
        {
          "right": false,
          "text": "Eräs ketterien menetelmien ongelmista on se, että asiakas ei osaa ilmaista vaatimuksia riittävän hyvin ohjelmistokehitysprojektien alussa"
        },
        {
          "right": false,
          "text": "Lean startup -menetelmä sopii epämääräisyytensä takia oikeastaan vaan startup-yrityksille"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "2",
      "id": 413,
      "title": "Mitkä seuraavista user storyja koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "User storylle kannattaa kirjata hyväksymäkriteerit, eli esim. joukko testejä joiden avulla voidaan todeta storyn olevan toteutettu halutulla tavalla"
        },
        {
          "right": true,
          "text": "Ennen user storyn kuvaaman toiminnallisuuden toteuttamista on oleellista kommunikoida riittävästi product ownerin tai asiakkaan edustajan kanssa"
        },
        {
          "right": true,
          "text": "'Opiskelijan tulee pystyä tarkastelemaan seuraavan periodin opetustarjontaa' on kohtuullisen hyvä muotoilu user storylle"
        },
        {
          "right": false,
          "text": "User storyyn kirjataan tarkasti kaikki loppukäyttäjän sille asettamat vaatimukset"
        },
        {
          "right": false,
          "text": "'Opiskelijoiden tiedot talletetaan tietokantaan' on hyvä muotoilu user storylle"
        },
        {
          "right": false,
          "text": "Mike Cohn ja Ron Jeffries ovat erimielisiä siitä, mitä user storyn määritelmä pitää sisällään"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "2",
      "id": 414,
      "title": "Mitkä seuraavista user storyja koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": false,
          "text": "User storyn tekstuaalinen kuvaus on aina kirjattava muodossa 'As a _user_, I want _functionality_ so that _business value_'"
        },
        {
          "right": false,
          "text": "Kaikki product backlogille asti päätyvät user storyt ovat projektin kannalta suunilleen yhtä tärkeitä saada toteutettua"
        },
        {
          "right": false,
          "text": "User storyjen on aina noudatettava INVEST-kriteerejä"
        },
        {
          "right": false,
          "text": "Jos user story lisätään product backlogille, sen sisältöä ei saa enää muuttaa"
        },
        {
          "right": false,
          "text": "Suuren teknisen riskin sisältävän toiminnallisuuden kuvaamat user storyt kannattaa toteuttaa vasta ihan projektin lopussa, näin niissä epäonnistuminen ei laske liian aikaisessa vaiheessa sovelluskehittäjien mielialaa"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "2",
      "id": 415,
      "title": "Mitkä seuraavista user storyjen estimointia koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Suhteellisessa estimoinnissa verrataan user storyjen työmäärää muiden user storyjen vaatimaan työmäärään"
        },
        {
          "right": true,
          "text": "Työmääräarvioissa tulee huomioida definition of done eli projektissa sovittu yleinen laatutaso"
        },
        {
          "right": true,
          "text": "Työmääräarviot auttavat asiakasta user storyjen priorisoinnissa"
        },
        {
          "right": false,
          "text": "On kehitetty menetelmiä (esim. planning poker), joiden avulla ohjelmiston tekemiseen vaadittava työmäärä voidaan arvioida kohtuullisen tarkasti jo ennen projektin käynnistymistä"
        },
        {
          "right": false,
          "text": "Ketterien menetelmien parhaiden käytänteiden mukaista on antaa product ownerin ja scrum masterin hoitaa työmääräarviointi"
        },
        {
          "right": false,
          "text": "Työmääräarvioita ei tule muuttaa kesken projektin, sillä ne ovat lupaus asiakkaalle siitä milloin sovellus tulee valmistumaan"
        },
        {
          "right": false,
          "text": "Cone of uncertainity kuvaa sitä, että mitä kokeneempi sovelluskehittäjä on, sitä parempia työmääräarvioita hän pystyy tekemään"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "2",
      "id": 416,
      "title": "Mitkä seuraavista hyvää product backlogia koskevista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "User storyjen prioriteetti voi muuttua ajan kuluessa"
        },
        {
          "right": true,
          "text": "Sprinttiin toteutettavaksi valittavien user storyjen tulee olla riittävän pieniä"
        },
        {
          "right": true,
          "text": "Backlogille lisätään tarpeen mukaan uusia user storyja"
        },
        {
          "right": false,
          "text": "Backlogin sisältöä saa muuttaa ainoastaan sprintin suunnittelukokouksissa"
        },
        {
          "right": false,
          "text": "Jokaisen backlogille lisätyn user storyn täytyy aina sisältää tarkat hyväksymäkriteerit"
        },
        {
          "right": false,
          "text": "Jokainen backlogilla oleva user story täytyy toteuttaa, muuten projekti tuomitaan epäonnistuneeksi"
        },
        {
          "right": false,
          "text": "Kun user story on toteutettu valmiiksi, sanotaan että story on ready"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "2",
      "id": 417,
      "title": "Mitkä seuraavista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Tuotteen tai julkaisun burndown-kaavion avulla pystytään visualisoimaan jäljellä olevaa tekemättömän työn määrää"
        },
        {
          "right": true,
          "text": "User story mapping -tekniikka ryhmittelee user storyt toiminnallisiin loogisiin kokonaisuuksiin"
        },
        {
          "right": false,
          "text": "Tiimin velositeetilla tarkoitetaan sitä kuinka monta riviä koodia tiimi pystyy keskimäärin tuottamaan yhden sprintin aikana"
        },
        {
          "right": false,
          "text": "Velositeetin perusteella voidaan helposti vertailla mikä firman ohjelmistokehitystiimeistä on suorituskyvyltään paras"
        },
        {
          "right": false,
          "text": "Tiimin velositeettiin lasketaan jokainen sprintin aikana tehty koodirivi"
        },
        {
          "right": false,
          "text": "NoEstimates-liike on sitä mieltä että user storyjen estimointia ei tarvita ja siitä ei ole mitään hyötyä"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "2",
      "id": 418,
      "title": "Mitkä seuraavista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ei ole hyvä ottaa sprinttiin toteutettavaksi sellaista user storya jonka vaatimasta työmäärästä ei ole kellään minkäänlaista käsitystä"
        },
        {
          "right": true,
          "text": "Product owner pystyy priorisoinnin avulla vaikuttamaan siihen, mitä user storyja sprinttiin valitaan"
        },
        {
          "right": true,
          "text": "Velositeetin avulla voidaan arvioida kuinka paljon työtä yhteen sprinttiin kannattaa ottaa"
        },
        {
          "right": false,
          "text": "Sprintin tavoitteella tarkoitetaan sprinttiin valittuja user storyja"
        },
        {
          "right": false,
          "text": "Product owner määrää kuinka monta user storya kehitystiimi ottaa tiettyyn sprinttiin toteutettavaksi"
        },
        {
          "right": false,
          "text": "Jos user story on liian suuri toteutettavaksi yhdessä sprintissä, se kannattaa jakaa kahtia siten, että toinen keskittyy pelkään käyttöliittymään ja toinen bisneslogiikkaan ja tietokantaan"
        },
        {
          "right": false,
          "text": "Spike-ratkaisuilla saadaan aina nopeutettua sovelluskehitystä"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "2",
      "id": 419,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sprintin suunnittelun yhteydessä joudutaan miettimään myös sovelluksen toteutustason asioita"
        },
        {
          "right": true,
          "text": "Taskboardiksi organisoitu sprint backlog visualisoi kunkin tehtävän eli taskin statuksen"
        },
        {
          "right": false,
          "text": "Sprint backlogille laitettavat taskit tulee aina kirjoittaa asiakkaan ymmärtämällä kielellä"
        },
        {
          "right": false,
          "text": "Product owner määrää mitä sarakkeita sprintin backlogina toimivalla taskboardilla on"
        },
        {
          "right": false,
          "text": "Sprintin burndown-käyrän avulla on mahdollista seurata kuinka paljon työtunteja kehittäjillä on vielä jäljellä kyseisessä sprintissä"
        },
        {
          "right": false,
          "text": "Jos taskien työmäärä on arvioitu tunteina, tulee taskiin käytetty työaika päivän päätteeksi aina vähentää työmääräarviosta"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "2",
      "id": 420,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "WIP-rajoitteiden avulla voidaan yrittää pienentää riskiä sille, että sprintin aikana ehditään toteuttamaan useita user storyja ainoastaan osittain"
        },
        {
          "right": true,
          "text": "Retrospektiivi on hyvä hetki tarkastella ja modifioida sprintin taskboardia, esim. lisätä siihen WIP-rajoitteita"
        },
        {
          "right": true,
          "text": "On itseasiassa hiukan kiistanalaista kannattaako sprint backlogilla oleville taskeille antaa työmääräarvioita"
        },
        {
          "right": false,
          "text": "ScrumBan-menetelmässä noudatetaan aina 2 viikon pituisia sprinttejä"
        },
        {
          "right": false,
          "text": "ScrumBan-menetelmässä on tyypillistä, että jokainen sovelluskehittäjä työskentelee yhtä aikaa usean eri user storyn parissa"
        },
        {
          "right": false,
          "text": "Backlog grooming tehdään aina kahden sprintin välissä"
        }
      ]
    },
    
    
    {
      "courseId": "6",
      "part": "3",
      "id": 431,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vesiputousmallissa asiakas validoi vaatimukset lukemalla vaatimusmäärittelyn tuloksena olevaa dokumentaatiota"
        },
        {
          "right": true,
          "text": "Staattisen analyysin avulla voidaan tarkastella automatisoidusti noudattaako koodi määriteltyjä tyyliseikkoja, esim. oikeaoppista sisennystä"
        },
        {
          "right": true,
          "text": "Pariohjelmoinnin on todettu vähentävän koodiin jäävien bugien määrää"
        },
        {
          "right": false,
          "text": "Koodin katselmoinnissa testataan kaatuuko sovellus sattumanvaraisilla syötteillä"
        },
        {
          "right": false,
          "text": "Ohjelmiston verifioinnilla tarkoitetaan sen varmistamista, että ollaan ylipäätään tekemässä ohjelmistoa, joka on käyttäjän tarpeisiin sopiva"
        },
        {
          "right": false,
          "text": "Ketterät menetelmät ja vesiputousmalli poikkeavat monin paikoin, mutta vaatimusten validointi tapahtuu molemmissa suunilleen samalla tavalla"
        },
        {
          "right": false,
          "text": "XP:n koodin yhteisomistajuuden periaate tarkoittaa sitä, että koodi julkaistaan Open source -lisenssillä kaikkien vapaaseen käyttöön"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "3",
      "id": 432,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston ulkoisella laadulla tarkoitetaan sitä, onko ohjelmisto sopiva käyttötarkoitukseensa, eli toimiiko se niin kuin käyttäjä haluaa ja olettaa"
        },
        {
          "right": true,
          "text": "Järjestelmätestauksessa sovelluksen toimintaa tutkitaan usein saman rajapinnan kautta, miten loppukäyttäjä sovellusta käyttää"
        },
        {
          "right": true,
          "text": "Testitapauksia mietittäessä kannattaa valita sellaisia testisyötteitä, jotka toimivat järjestelmän kannalta erilaisella tavalla, eli mitkä eivät kuulu samaan ekvivalenssiluokkaan"
        },
        {
          "right": false,
          "text": "Käyttäjän hyväksymistestauksessa verrataan sovellusta toimintaa vaatimusmäärittelyyn"
        },
        {
          "right": false,
          "text": "Black box -testauksen suorittavat aina sovelluskehittäjät"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "3",
      "id": 433,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Yksikkötestaus on useimmiten ns. developer-testausta, eli sovelluskehittäjien vastuulla"
        },
        {
          "right": true,
          "text": "Huono sisäinen laatu saattaa vaikeuttaa sovelluksen jatkokehittämistä"
        },
        {
          "right": true,
          "text": "Haarautumakattavuutta mittaamalla voidaan löytää ehtolauseita, joiden kaikkia haaroja ei ole testattu"
        },
        {
          "right": true,
          "text": "Mutaatiotestauksen ideana on varmistaa, että testit huomaavat sen jos koodiin tulee bugeja"
        },
        {
          "right": false,
          "text": "Lasilaatikkotestauksella testataan sovelluksen tarjoamaa käyttökokemusta, eli se kohdistuu lähinnä käyttöliittymän testaamiseen"
        },
        {
          "right": false,
          "text": "Jos koodin rivikattavuus on 100%, voidaan olla lähes varmoja, että koodi toimii oikein"
        },
        {
          "right": false,
          "text": "Yksikkötestaus suoritetaan useimmiten ohjelman tilaajaorganisaation toimesta"
        },
        {
          "right": false,
          "text": "Yksikkötestaamista kutsutaan usein End to End -testaamiseksi"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "3",
      "id": 434,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Integraatiotestauksessa pyritään varmistamaan sovelluksen suurempien, useimmista luokista tai moduuleista koostuvien kokonaisuuksien toiminta"
        },
        {
          "right": true,
          "text": "Regressiotestaus pyrkii varmistamaan, että ohjelmiston jo aiemmin toimineet osat eivät hajoa uusien muutosten yhteydessä"
        },
        {
          "right": true,
          "text": "Regressiotestejä on mahdollista tehdä Pythonin unittest-kirjastolla"
        },
        {
          "right": false,
          "text": "Eräs ketterän kehityksen hyvistä puolia on se, että regressiotestaukselle ei käytännössä ole mitään tarvetta"
        },
        {
          "right": false,
          "text": "Ketterässä kehityksessä koodin integraatiotestauksen suorittaa kehittäjäorganisaation QA-tiimi"
        },
        {
          "right": false,
          "text": "Ketterä kehitys ja vesiputousmalli ovat monin paikoin hyvin erilaisia menetelmiä. Koodin integrointi ja integraatiotestaus tapahtuu kuitenkin molemmissa samalla tavalla"
        },
        {
          "right": false,
          "text": "Regressiotestaus tapahtuu lähes aina manuaalisesti"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "3",
      "id": 435,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Oikeaoppista TDD:tä sovellettaessa kirjoitetaan käytännössä aina yksi testi joka ei mene läpi ja sen jälkeen mahdollisimman yksinkertainen koodi, joka läpäisee testin"
        },
        {
          "right": true,
          "text": "Oikeaoppista TDD:tä sovellettaessa koodin sisäistä rakennetta parannellaan jos huomataan sen rapistuneen, tällöin testien halutaan edelleen menevän läpi"
        },
        {
          "right": true,
          "text": "Mock-olioita käytetään testauksessa varmistamaan, että testattava olio tai metodi kommunikoi riippuvuuksiensa kanssa oikein"
        },
        {
          "right": false,
          "text": "TDD:n ikävä puoli on se, että koodista saattaa tulla sen soveltamisen seurauksena ylläpidettävyydeltään huonoa"
        },
        {
          "right": false,
          "text": "TDD soveltuu erityisen hyvin ns. legacy-järjestelmien, eli vanhojen ja ylläpidettävyyden kannalta hankalien ohjelmistojen laajentamisen välineeksi"
        },
        {
          "right": false,
          "text": "Oikeaoppista TDD:tä käytettäessä ohjelmoitavat luokat ja metodit tulee aina suunnitella erittäin tarkasti ennen ohjelmoinnin aloittamista"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "3",
      "id": 436,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Integraatiohelvetti viittaa siihen, että vasta ohjelmintivaiheen lopussa tapahtuva luokkien ja komponenttien integrointi aiheuttaa useimmiten suuria ongelmia, riippumatta siitä miten huolellisesti ohjelmisto on suunniteltu"
        },
        {
          "right": true,
          "text": "Jatkuva integraatio pyrkii tuomaan koodin komponenteissa olevat yhteensopivuusongelmat esille niin nopeasti kuin mahdollista"
        },
        {
          "right": true,
          "text": "On oleellista jatkuvan integraation suorittamisen kannalta, että Python-projektissa tiedosto pyproject.toml on lisätty versionhallintaan"
        },
        {
          "right": false,
          "text": "Smoke testiksi kutsutaan testiä, missä järjestelmä yritetään saada kaatumaan tai 'savuamaan' kuormittamalla sitä äärimmäisen suurella operaatiomäärällä"
        },
        {
          "right": false,
          "text": "Jatkuvan integraation noudattaminen on helppoa, riittää kun joku konfiguroi tiimille  esim GitHub Actionin"
        },
        {
          "right": false,
          "text": "Jos jatkuvan integraation palvelin huomaa koodissa jonkin ongelman, riittää että ongelma korjataan seuraavan sprintin alkuun mennessä"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "3",
      "id": 437,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Jatkuva toimittaminen (continuous deployment) vaatii erittäin suurta automaation astetta testauksen ja sovelluksen tuotantoon viemisen suhteen"
        },
        {
          "right": true,
          "text": "Jatkuvaa toimitusvalmius (continuous delivery) automatisoi ohjelmiston laadunhallinnan, mutta jättää ihmisen ratkaistavaksi missä vaiheessa uusia versiota julkaistaan loppukäyttäjille"
        },
        {
          "right": true,
          "text": "Staging-ympäristön on konfuguraatioiltaan syytä olla mahdollisimman lähellä sovelluksen tuotantoympäristöä"
        },
        {
          "right": false,
          "text": "Build pipelinen käyttö nopeuttaa ohjelmakoodin kääntämistä rinnakkaistamalla käännöksen vaiheet useille eri koneille"
        },
        {
          "right": false,
          "text": "Jatkuva toimittaminen (continuous deployment) sopii ainoastaan hyvin pienille yrityksille, esimerkiksi alkuvaiheessa oleville start upeille"
        },
        {
          "right": false,
          "text": "Staging-ympäristö ja CI-palvelin tarkoittavat samaa asiaa"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "3",
      "id": 438,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Tutkiva testaus kannattaa kohdistaa sprintin aikana toteutettuihin uusiin toimintoihin"
        },
        {
          "right": true,
          "text": "Kokenut testaaja voi löytää tutkivaa testaamista käyttäen virheitä, jotka jäävät helposti automatisoitujen testien ulottumattomiin"
        },
        {
          "right": false,
          "text": "Tutkiva testaaminen sopii erityisen hyvin regressiotestaukseen"
        },
        {
          "right": false,
          "text": "Jos ohjelmistoprojektissa tehdään paljon tutkivaa testaamista, ei yksikkö- ja integraatiotestausta tarvitse tehdä"
        },
        {
          "right": false,
          "text": "Tutkiva testaaminen perustuu testitapausten huolelliseen etukäteissuunnitteluun"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "4",
      "id": 441,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Canary releaseissa osa todellisista loppukäyttäjistä ohjataan käyttämään järjestelmän uutta versiota"
        },
        {
          "right": true,
          "text": "Feature toggle on eräs tekniikka canary releasejen toteuttamiseen"
        },
        {
          "right": true,
          "text": "Canary releaseja käytettäessä sovelluksen toimintaa on monitoroitava tarkasti"
        },
        {
          "right": true,
          "text": "Feature togglen avulla koodissa olevia keskeneräisiä toiminnallisuuksia voidaan piilottaa loppukäyttäjiltä"
        },
        {
          "right": false,
          "text": "Käytettäessä canary releaseja, sovelluskehittäjät testaavat sovelluksen toimivuutta ns. staging-palvelimella"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "4",
      "id": 442,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Käytettäessä feature brancheja uusi toiminnallisuus, esim. user story toteutetaan ensin omassa versionhallinnan haarassa, ja yhdistetään kehityksen päähaaraan vasta kun se on valmiina"
        },
        {
          "right": true,
          "text": "Trunk based development ei suosi feature branchien käyttöä, kaikki koodi pyritään integroimaan välittömästi pääkehityshaaraan"
        },
        {
          "right": true,
          "text": "DevOps-toimintamallia sovellettaessa kehittäjät ja järjestelmäylläpitäjät toimivat tiiviissä yhteistyössä"
        },
        {
          "right": true,
          "text": "Infrastructure as Code tarkottaa suurinpiirtein sitä, että sovelluksien käyttämiä palvelinympäristöjä hallinnoidaan koodin avulla käsiteltävillä konfiguraatiotiedostoilla, joita voidaan esim. tallettaa versionhallintaan normaalin ohjelmakoodin tapaan"
        },
        {
          "right": false,
          "text": "Trunk based development on kiinnostava idea, mutta se sopii lähinnä pienten startup-yritysten käyttöön"
        },
        {
          "right": false,
          "text": "Trunk based development -kehitysmallia on mahdotonta soveltaa, jos sovellukseen on toteutettava niin isoja toiminnallisuuksia, että niiden tekemiseen menee kauemmin kuin päivä"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "4",
      "id": 443,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston arkkitehtuuri määrittelee sen rakenteen suuret linjat, eli minkälaisista rakennekomponenteista ohjelmisto koostuu"
        },
        {
          "right": true,
          "text": "Arkkitehtuuri ohjaa sitä miten sovellusta tulee jatkokehittää"
        },
        {
          "right": false,
          "text": "Ohjelmiston toimintaympäristön ja toteutusteknologioiden ei tule koskaan antaa vaikuttaa ohjelmiston arkkitehtuuriin"
        },
        {
          "right": false,
          "text": "Arkkitehtuurityyli määrää sen, mitä luokkia ja metodeja ohjelmistossa on"
        },
        {
          "right": false,
          "text": "Ohjelmiston ei-toiminnallisilla vaatimuksilla ei ole vaikutusta sen arkkitehtuuriin"
        },
        {
          "right": false,
          "text": "Sovelluksen arkkitehtuuri on pysyvä, ts. alussa valittua arkkitehtuuria ei koskaan muuteta."
        }
      ]
    },
    {
      "courseId": "6",
      "part": "4",
      "id": 444,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kerrosarkkitehtuuri tähtää siihen, että tietyn kerroksen koodiin tehtävät muutokset aiheuttaisivat mahdollisimman vähän muutoksia sovelluksen muihin osiin"
        },
        {
          "right": true,
          "text": "Kerrosarkkitehtuuria sovellettaessa käyttöliittymästä huolehtiva koodi on eristetty esimerkiksi sovelluslogiikaasta huolehtivasta koodista"
        },
        {
          "right": true,
          "text": "Mikropalveluarkkitehtuuri mahdollistaa sovelluksen toteuttamisen useita eri ohjelmointikieliä käyttäen"
        },
        {
          "right": false,
          "text": "Mikropalveluarkkitehtuuria sovellettaessa jokainen user story toteutetaan omana mikropalveluna"
        },
        {
          "right": false,
          "text": "Kerrosarkkitehtuurissa eri kerroksilla oleva koodi keskustelee ainoastaan verkon välityksellä, eli esimerkiksi käyttöliittymästä ei koskaan kutsuta suoraan sovelluslogiikkakerroksen metodeja"
        },
        {
          "right": false,
          "text": "Mikropalveluarkkitehtuurin suurimpia etuja on niiden helppo testaaminen ja debuggaaminen"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "4",
      "id": 445,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Inkrementaalinen arkkitehtuuri tarkoittaa sitä, että ohjelman lopullinen arkkitehtuuri muodostuu projektin edetessä"
        },
        {
          "right": true,
          "text": "Inkrementaalista arkkitehtuuria sovellettaessa esimerkiksi sovelluksen kerrosrakenne toteutetaan ainakin jossain muodossa jo varhaisessa vaiheessa projektia, jopa ensimmäisessä sprintissä"
        },
        {
          "right": true,
          "text": "Ketteriä menetelmiä sovellettaessa tunnustetaan se tosiasia, että vaatimusten tapaan saattaa myös arkkitehtuuria joutua mukauttamaan projektin aikana"
        },
        {
          "right": false,
          "text": "Jos kehitystiimi rakentaa arkkitehtuurin inkrementaalisesti, ei arkkitehtuuria dokumentoida millään tavalla"
        },
        {
          "right": false,
          "text": "Walking skeleton tarkoittaa koodia, joka tullaan heittämään pois kun ohjelman ominaisuudet valmistuvat"
        },
        {
          "right": false,
          "text": "Inkrementaalinen suunnittelu ja arkkitehtuuri takaavat sen, että ohjelmistosta tulee rakenteeltaan laadukas"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "4",
      "id": 446,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kapseloinnilla tarkoitetaan toteutustason yksityiskohtien piilottamista"
        },
        {
          "right": true,
          "text": "Metoditason koheesio pyrkii siihen, että yksittäinen metodi keskittyy ainoastaan yhteen asiaan kerrallaan. Jos metodi tekee liian monia asioita, sen koheesio paranee jos metodi jaetaan useammaksi metodiksi"
        },
        {
          "right": true,
          "text": "Mikropalveluissa yksittäisen palvelun koheesion taso on korkea ja ne kapseloivat sisäiset toimintaperiaatteensa muilta palveluilta"
        },
        {
          "right": true,
          "text": "Luokkatason koheesio ja single responsibility -periaate tarkoittavat samaa asiaa"
        },
        {
          "right": false,
          "text": "Ohjelmiston sisäisellä laadulla tarkoitetaan sitä, että koodin käyttämät tietorakenteet ja algoritmit tarjoavat optimaalisen nopean toiminnallisuuden kuhunkin käyttötarkoitukseen"
        },
        {
          "right": false,
          "text": "Single responsibility -periaate ei ole relevantti käytettäessä muita ohjelmointiparadigmoja kuin olio-ohjelmointia"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "4",
      "id": 447,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Code smell eli koodihaju on merkki siitä, että koodin sisäisessä laadussa on todennäköisesti ongelmia"
        },
        {
          "right": true,
          "text": "Tekninen velka on metafora sille, että koodin sisäinen rakenne on heikkoa"
        },
        {
          "right": false,
          "text": "Nykyisten parhaiden käytänteiden mukaan koodi tulee kommentoida huolellisesti, esim. jokaisesta koodissa olevasta muuttujasta tulee selittää mikä tietoa muuttuja tallettaa"
        },
        {
          "right": false,
          "text": "Refaktoroinnilla muutetaan luokkien metodeja siten, että niiden toiminnallisuus vastaa paremmin asiakkaiden tarpeita"
        },
        {
          "right": false,
          "text": "Refaktorointia ei kannata suorittaa jokaisessa sprintissä, se laskisi liikaa kehitystiimin velositeettia"
        },
        {
          "right": false,
          "text": "Teknistä velkaa tulee välttää kaikissa olosuhteissa"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "5",
      "id": 451,
      "title": "Mitkä seuraavista ovat leanin mukaan hukkaa (muda)?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Välivarastointi"
        },
        {
          "right": true,
          "text": "Ylituotanto"
        },
        {
          "right": true,
          "text": "Odotus"
        },
        {
          "right": true,
          "text": "Tuotteessa olevat viat"
        },
        {
          "right": false,
          "text": "Taukojen pitäminen"
        },
        {
          "right": false,
          "text": "Koulutus"
        },
        {
          "right": false,
          "text": "Toimintojen ulkoistaminen"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "5",
      "id": 452,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kaizen tarkoittaa työskentelytapojen jatkuvaan parantamisen kannustavaa asennetta"
        },
        {
          "right": true,
          "text": "Jatkuva parantaminen pyrkii etsimään ongelmien perimmäisen syyn (root cause) ja eliminoimaan sen"
        },
        {
          "right": true,
          "text": "Pull- tai JIT-periaatteilla tarkoitetaan sitä, että tuotetta tai sen tarvitsemia komponentteja valmistetaan vasta tilauksesta, eli ei varalta etukäteen"
        },
        {
          "right": true,
          "text": "Kanban on eräs työkalu pull- tai JIT-periaatteen toteuttamiseen"
        },
        {
          "right": false,
          "text": "Lean pyrkii maksimoimaan tuotantolaitteiden käyttöasteen"
        },
        {
          "right": false,
          "text": "Kaizen ei kosketa yrityksen rivityöntekijöitä, keskitason johto hoitaa kaizeniin liittyvät asiat"
        },
        {
          "right": false,
          "text": "Läpimenoaika (leadtime) tarkoittaa sitä, miten nopeasti jatkuvassa parannuksessa saadaan eliminoitua hukkaa aiheuttavat tekijät"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "5",
      "id": 453,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean suosii periaatetta, jossa päätökset tehdään mahdollisimman myöhäisessä vaiheessa, mutta ei kuitenkaan liian myöhään"
        },
        {
          "right": true,
          "text": "Osassa 2 mainitun 'hyvän backlogin' kriteerejä noudattava backlog on leanin periaatteiden mukainen"
        },
        {
          "right": false,
          "text": "Build quality in -periaatteen mukaan kannattaa keskittyä kalliimpien tuotteiden valmistamiseen. Esim. Applella periaate näkyy siinä, että firmalla ei ole halpoja puhelinmalleja"
        },
        {
          "right": false,
          "text": "Lean pyrkii läpimenoajan (leadtime) optimointiin henkilökohtaisilla bonuksilla"
        },
        {
          "right": false,
          "text": "Vesiputousmallissa suositut, hyvin tarkkaan tehdyt vaatimusmäärittelydokumentit ovat leanin periaatteiden mukaisia"
        },
        {
          "right": false,
          "text": "Vesiputousmallin suosima periaate tehdä sovelluksen testaus erillisenä lopussa tapahtuvana vaiheena on leanin periaatteiden mukainen käytäntö"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "5",
      "id": 454,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean-ideaalin mukainen johtaja hallitsee myös käytännön hands on -työskentelyn"
        },
        {
          "right": true,
          "text": "Tuotekehitykseen sovellettaessa lean pyrkii kiihdyttämään oppimista"
        },
        {
          "right": true,
          "text": "Leanin tuotekehityksen periaatteiden mukaan epävarmat asiat kannattaa selvittää varhaisessa vaiheessa"
        },
        {
          "right": false,
          "text": "Leanin tuotekehityksen 'set based concurrent development'-menetelmän idea on sama kuin iteratiivisessa ohjelmistokehityksessä, tuotetta laajennetaan ja parannellaan vähitellen iteraatio iteraatiolta"
        },
        {
          "right": false,
          "text": "Go see (kenchi genbutsu) -periaateen mukaan työntekijöiden tulee raportoida tekemisistä tarkasti managerille"
        },
        {
          "right": false,
          "text": "Scrum ei ole leanin periaatteiden mukainen, koska se on push-systeemi"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "5",
      "id": 455,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Scrum of scrums on periaate, jonka avulla pyritään hallitsemaan useita kehitystiimejä, jotka työskentelevät saman tuotteen parissa"
        },
        {
          "right": true,
          "text": "SAFe on hyvin tarkkaan dokumentoitu ja runsaasti erilaisia periaatteita ja henkilörooleja sisältävä laajan mittakaavan ketterä menetelmäkehys"
        },
        {
          "right": true,
          "text": "LeSS:iä sovellettaessa oletuksena on, että kehitetään yhtä tuotetta, jolla on yksi product owner. LeSS ei ota kantaa siihen, miten eri tuotteita kehittävät tiimit suhtautuvat toisiinsa"
        },
        {
          "right": false,
          "text": "LeSS lisää Scrumiin joukon kokonaan uudentyyppisiä palavereja sekä henkilörooleja"
        },
        {
          "right": false,
          "text": "LeSS suosittelee jakamaan työtä siten, että esimerkiksi yksi tiimi huolehtii sovelluksen frontendistä, yksi sovelluksen backendista ja yksi sovelluksen tietokannasta"
        },
        {
          "right": false,
          "text": "9 tai enemmän tiimiä sisältävässä LeSS huge -versiossa jokaiselle tiimille on varattu oma product backlog"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "5",
      "id": 456,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ketteriä menetelmiä käytetään nykyään useimpien tutkimusten mukaan yli 50% kaikista ohjelmistoprojekteista"
        },
        {
          "right": true,
          "text": "Tutkimusten mukaan yllättävän monet ketteriä menetelmiä soveltavat eivät kuitenkaan noudata monia ketteryyden perusperiaatteita esimerkiksi lyhyitä iteraatiota"
        },
        {
          "right": true,
          "text": "Erään tutkimuksen mukaan Jatkuva toimittaminen (continuous deployment) on ollut käytössä jopa kolmasosalla vastaajista"
        },
        {
          "right": false,
          "text": "Ketterien menetelmien nousu näyttää olevan takana, esim. Yhdysvaltojen hallituksen alaisissa projekteissa ketteriä menetelmiä ei enää käytetä yhtä paljon kuin esimerkiksi 10 vuotta sitten, kun Scrum-hype oli suurimmillaan"
        },
        {
          "right": false,
          "text": "Tutkimusten mukaan suuret ohjelmistoprojektit onnistuvat suuremmalla todennäköisyydellä kuin pienet projektit"
        },
        {
          "right": false,
          "text": "Tutkimusten mukaan suurin ketteryyden tuoma hyöty on sen kustannustehokkuus"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "6",
      "id": 461,
      "title": "(1) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Eräs Smartlyn toimialoista on Facebook-mainostus"
        },
        {
          "right": true,
          "text": "Tärkeä motivaatio automaattisille testeille on varmistua siitä, että jo toimineet asiat eivät hajoa kun koodia muokataan"
        },
        {
          "right": true,
          "text": "End to end -testit testaavat järjestelmää kokonaisuudessaan, kurssin käyttämän terminologian <i>järjestelmätestit</i> ovat siis end to end -testejä"
        },
        {
          "right": false,
          "text": "Smartyllä tiimirakene vastaa ohjelmiston arkkitehtuurisia kerroksia, eli esim. sovelluksen käyttöliittymästä on vastuussa oma tiiminsä"
        },
        {
          "right": false,
          "text": "Automatisoidut testit ovat hyvä keino löytää ohjelmistosta kokonaan uudenlaisia bugeja"
        },
        {
          "right": false,
          "text": "Kattava yksikkötestaus on riittävä tapa saavuttaa täysi luottamus sille, että ohjelmisto toimii oikein"
        },
        {
          "right": false,
          "text": "End to end -testeissä kutsutaan myös ulkoisten palveluiden esimerkiksi Facebookin rajapintoja"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "6",
      "id": 462,
      "title": "(2) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "API-testeillä voidaan testata esimerkiksi yksittäistä mikropalvelua kokonaisuudessaan"
        },
        {
          "right": true,
          "text": "Yksikkötestit eivät käytä tietokantaa"
        },
        {
          "right": true,
          "text": "End to end -testit suoritetaan käyttöliittymän läpi"
        },
        {
          "right": true,
          "text": "End to end -testien huono puoli on se, että ne ovat usein riippuvaisia käyttöliittymässä esitettävän datan muodosta"
        },
        {
          "right": false,
          "text": "Integraatiotestit eivät käytä tietokantaa"
        },
        {
          "right": false,
          "text": "Yksikkötestit tekevät usein HTTP-pyyntöjä verkossa oleviin rajapintoihin"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "6",
      "id": 463,
      "title": "(3) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Testipyramidi antaa erään suosituksen sille, kuinka paljon testausta kannattaa kohdentaa eri testauksen tasoille"
        },
        {
          "right": true,
          "text": "Monien startupien tapaan Smartyllä oli tilanne aluksi se, että automatisoituja testejä ei ollut"
        },
        {
          "right": true,
          "text": "Jos koodissa havaitaan bugi, kannattaa bugikorjauksen lisäksi tehdä testit, jotka varmistavat ettei sama bugi palaa koodiin uudelleen"
        },
        {
          "right": false,
          "text": "Kokonaan ilman automaattisia testejä olevan 'legacy'-koodin testauksen automatisointi kannattaa aloittaa yksikkötesteistä"
        },
        {
          "right": false,
          "text": "Startup-yrityksen kannattaa rakentaa kattavat automaattiset testit jo siinä vaiheessa kun ns. 'product market -fit' on vielä löytymättä"
        },
        {
          "right": false,
          "text": "Testipyramidin mukaista jakaumaa eri tason testien määrään suhteen kannattaa noudattaa aina heti ohjelmakomponentin, esim. mikropalvelun toteuttamisen ensimmäisestä päivästä alkaen"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "6",
      "id": 464,
      "title": "(4) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Smartly ei enää käytä ollenkaan end to end -testejä sillä kokemus niistä oli huono, testit rikkoontuivat välillä ilman mitään syytä"
        },
        {
          "right": true,
          "text": "Smartlyllä koodiin tehtävät lisäykset katselmoidaan pull requestien (PR) kautta"
        },
        {
          "right": true,
          "text": "Smartly julkaisee feature togglejen avulla joitain koodiin tulevia muutoksia/toiminnallisuuksia aluksi vain osalle asiakkaista"
        },
        {
          "right": false,
          "text": "Smartlyllä on yhtenäiset testauskäytänteet, tämän takia jokainen tiimi testaa vastuullaan olevaa ohjelmiston osaa samalla tavalla"
        },
        {
          "right": false,
          "text": "Smartlyllä ohjelmiston laadusta vastaa erillinen laadunhallintaan keskittyvä QA-tiimi"
        },
        {
          "right": false,
          "text": "Smartlyllä koodia testataan manuaalisesti ennen kuin se päästetään tuotantokäyttöön"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "6",
      "id": 465,
      "title": "(1) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Saavutettavuus/esteettömyys tarkoittaa sitä, että tuotteen on tarjottava sama kokemus käyttäjän rajoitteista huolimatta"
        },
        {
          "right": true,
          "text": "Käyttökokemussuunnittelun (UX design) on mukautunut ketteryyteen paljon ohjelmistokehitystä hitaammin"
        },
        {
          "right": true,
          "text": "Käyttäjäkeskeinen suunnittelu (User centric design) on iteratiivinen menetelmä käyttökokemussuunnitteluun"
        },
        {
          "right": false,
          "text": "Käyttökokemussuunnittelun (UX design) katsotaan syntyneen 1980-luvulla piilaaksossa Microsoftin tuotekehityslaboratoriossa"
        },
        {
          "right": false,
          "text": "Tarkka, etukäteen tapahtuva suunnittelu on onnistuneen käyttökokemuksen luomisen edellytys"
        },
        {
          "right": false,
          "text": "Käyttäjäkeskeinen suunnittelu (User centric design) määrittelee erään tarkan ohjeiston sille, miten käyttökokemussuunnittelua tulee tehdä"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "6",
      "id": 466,
      "title": "(2) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean UX suosittelee sijoittamaan designerit osaksi ohjelmistokehitystiimejä"
        },
        {
          "right": true,
          "text": "Lean UX pyrkii siihen että työtä edistetään pienissä paloissa ja eritasoisia aikaansaannoksia julkaistaan nopeassa syklissä"
        },
        {
          "right": true,
          "text": "Erehdykset salliva kulttuuri kuuluu Lean UX:ään"
        },
        {
          "right": false,
          "text": "Ketterässä käyttökokemussuunnittelussa (Agile UX) ovat avainasemassa tarkat eli ns. pixel perfect -tasolla tehdyt layout-suunnitelmat"
        },
        {
          "right": false,
          "text": "Lean UX:ssä käyttökokemuksen määrittelee firman johtava suunnittelija, eli ns. UX-ninja"
        },
        {
          "right": false,
          "text": "Lean UX suosittelee että käyttäjätestaus tehdään kontrolloiduissa laboratorio-olosuhteissa"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "6",
      "id": 467,
      "title": "(3) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Design-sprintti on menetelmä, jonka avulla käydään lyhyessä ajassa läpi kaikki design-prosessin vaiheet, motivaationa esim. alustavan liiketoimintakonseptin luominen"
        },
        {
          "right": true,
          "text": "Design-systeemi määrittelee esimerkiksi yrityksen web-sivuston graafisen ulkoasun"
        },
        {
          "right": true,
          "text": "Design-systeemi saattaa tarjota joukon muotoilultaan valmiita käyttöliittymäkomponentteja"
        },
        {
          "right": false,
          "text": "Oikeaoppisessa Lean UX -menetelmässä joka toinen sprintti on Design-sprintti ja joka toinen normaali sovelluskehitykseen keskittyvä sprintti"
        },
        {
          "right": false,
          "text": "Design-sprintin pituus on aina viikko"
        },
        {
          "right": false,
          "text": "Käytettävyyssuunnittelu on taidetta, tieteellisellä ajattelulla ei ole roolia käytettävyyssuunnittelussa"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "7",
      "id": 471,
      "title": "(1) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Nykyään on tyypillistä, että sovelluskehittäjä joutuu käyttämään useita eri ohjelmointikieliä jopa yhdessä projektissa työskennellessään"
        },
        {
          "right": true,
          "text": "Ei ole olemassa vain yhtä tapaa kouluttautua ohjelmistoalalle"
        },
        {
          "right": false,
          "text": "Ketterän manifestin mukaiset itseorganisoituvat tiimit ovat utopia, niillä ei ole sijaa nykyisessä bisneksessä, tiimien tulee työskennellä tiukan ulkoisen ohjauksen varassa"
        },
        {
          "right": false,
          "text": "Softa-alalla menestyksekkäästi toimimiseen tarvitaan nykyään täysin erilainen mindset, eli mielenlaatu/ajattelutapa kuin 80-luvulla"
        },
        {
          "right": false,
          "text": "Jos osaat hyvin yhden teknologian, pärjäät sen avulla ohjelmistoalalla jopa vuosikymmeniä"
        },
        {
          "right": false,
          "text": "On parasta koostaa ohjelmistotiimi mahdollisimman samankaltaisista ihmisistä, liika erilaisuus ihmisten taustoissa vaikeuttaa asiakkaiden tarpeiden ymmärtämistä"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "7",
      "id": 472,
      "title": "(2) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston uusia versiota kannattaa viedä (eli 'shipata') tuotantoon niin usein kuin mahdollista, jopa yli 10 kertaa päivässä"
        },
        {
          "right": true,
          "text": "Ensimmäisenä mieleen tuleva tekninen ratkaisu kannattaa usein kyseenalaistaa"
        },
        {
          "right": false,
          "text": "Isojen IT-organisaatioiden on huomattavasti helpompi ottaa huomioon asiakkaan tarpeet kuin pienten ketterien tiimien"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjien ei ole tarvetta ymmärtää bisneksen tarpeita tai sovelluksen arkkitehtuuriratkaisuja, riittää että sovelluskehittäjä maksimoi tuotantokäyttöön vietävän koodin määrään"
        },
        {
          "right": false,
          "text": "Sovelluksen laadunhallinta kannattaa tehdä laadunhallintaan varatuissa sprinteissä, joita pidetään noin 4-5 sprintin välein"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "7",
      "id": 473,
      "title": "(3) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Retrospektiiveja ei tulisi jättää pitämättä"
        },
        {
          "right": true,
          "text": "Sprintin aikaisesta työskentelystä noin 10% tulisi kohdistua seuraavien sprinttien aikana toteutettavien storyjen valmisteluun"
        },
        {
          "right": false,
          "text": "Paras sprintin pituus on 4 viikkoa"
        },
        {
          "right": false,
          "text": "Eräs Elisan parhaista käytänteistä ovat ns. tekniset storyt, eli storyt joiden toteuttaminen ei yleensä näy käyttäjälle mitenkään"
        },
        {
          "right": false,
          "text": "Teknistä velkaa ei tule ottaa missään olosuhteissa"
        },
        {
          "right": false,
          "text": "Niin sanotun Nokia-testin voi läpäistä ainoastaan, jos ennen toteutusvaihetta pidetään joukko spesifikaatiosprinttejä, joiden aikana ohjelmisto määritellään tarkasti"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "7",
      "id": 474,
      "title": "(4) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Hyvin toimiva jatkuva integraatio (CI) vaikuttaa parhaimmillaan organisaation suorituskykyyn jopa liiketoiminnan tasolla"
        },
        {
          "right": true,
          "text": "Yli muutaman päivän pituisia feature brancheja ei kannata käyttää"
        },
        {
          "right": true,
          "text": "Jos jatkuvan integraation (CI) 'build' hajoaa, eli koodi ei käänny, tai jokin testi ei mene läpi, tulee ongelma korjata heti"
        },
        {
          "right": true,
          "text": "Sen koodin määrä joka ei ole tuotantokäytössä tulee minimoida"
        },
        {
          "right": false,
          "text": "Jatkuva integraatio (CI) toimii ainoastaan sellaisissa ohjelmistoissa, joita kehittää yksi tai korkeintaan pari tiimiä. Isommassa skaalassa ohjelmistoja kehitettäessä CI:n käyttö olisi liian suuri hidaste"
        },
        {
          "right": false,
          "text": "Jatkuva integraation (CI) soveltaminen onnistuu ainoastaan pilvipalveluina toteutetuille web-sovelluksille"
        },
        {
          "right": false,
          "text": "CI-palvelimen status, eli onko kaikki hyvin vai onko esim. testeissä ongelmia, tulee pitää kehitystiimin sisäisenä asiana"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "7",
      "id": 479,
      "title": "(5) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Suurin hukka ohjelmistokehityksessä on se, että rakennetaan asiakkaan tarpeiden kannalta kokonaan vääränlainen järjestelmä"
        },
        {
          "right": true,
          "text": "Lean-startup-menetelmällä testataan idean tarpeellisuutta/hyödyllisyyttä oikeilla käyttäjillä"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä jokaisella tiimillä voi olla oma Definition of done"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä osan tiimeistä kannattaa erikoistua joihinkin osa-alueisiin, esimerkiksi testaamiseen"
        },
        {
          "right": false,
          "text": "Ohjelmistokehittäjille kannattaa antaa henkilökohtaisia suoriutumistavoitteita jotka vaikuttavat suoraan palkkaukseen, näin myös tiimit saadaan työskentelemään mahdollisimman tehokkaasti"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä eri tiimien jäsenet eivät yleensä keskustele suoraan keskenään, keskustelu hoidetaan tiimien scrum masterien kautta"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "7",
      "id": 475,
      "title": "(1) Mitkä seuraavista Marko Klemetin luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Erään määritelmän mukaan DevOps tarkoittaa sovelluskehittäjien ja järjestelmäylläpitäjien välistä yhteistyötä"
        },
        {
          "right": true,
          "text": "DevOpsiin liittyvät työkalut auttavat keräämään monenlaista informaatiota tuotantoympäristöstä ja täten tekemään sovelluksen toiminnallisuuteen liittyviä kokeiluja"
        },
        {
          "right": true,
          "text": "Sovellus tulisi viedä tuotantoympäristöön heti kehitystyön alkuvaiheessa, jopa jo ensimmäisenä päivänä, ennen kuin sovelluksessa on juurikaan valmiina olevaa toiminnallisuutta"
        },
        {
          "right": true,
          "text": "Eräs pilviympäristöjen hyvistä puolista on se, että ne antavat sovelluskehittäjille mahdollisuuden julkaista koodia suoraan tuotantoympäristöön"
        },
        {
          "right": false,
          "text": "DevOpsia soveltamalla on mahdollista korvata testausautomaatio"
        }
      ]
    },
    {
      "courseId": "6",
      "part": "7",
      "id": 476,
      "title": "(2) Mitkä seuraavista Marko Klemetin luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Design-systeemi dokumentoi yrityksen visuaalisen ilmeen ja saattaa jopa tarjota uudelleenkäytettäviä, visuaalista ilmettä noudattavia käyttöliittymäkomponentteja"
        },
        {
          "right": true,
          "text": "ROBOT-framework on hyväksymistestauksen työkalu, missä testit kirjoitetaan asiakkaan ymmärtämällä kielellä"
        },
        {
          "right": true,
          "text": "GitHub actions ja Jenkins ovat jatkuvaan integraatioon (CI) sopivia palveluita"
        },
        {
          "right": false,
          "text": "Paras käytänne DevOpsin soveltamiseen on muodostaa yritykseen erillinen DevOps-tiimi, joka hoitaa tuotantojärjestelmien ja deployment-pipelinen konfiguroinnin"
        },
        {
          "right": false,
          "text": "Jatkuvan integraation (CI) ja jatkuvan julkaisun (CD) konfiguraatioita ei kannata tallettaa versionhallintaan"
        },
        {
          "right": false,
          "text": "DevOpsin käyttöönotossa tärkeimmässä asemassa on sopivien työkalujen tehokas käyttö"
        }
      ]
    },

    {
      "id": 601,
      "part": "1",
      "courseId": "7",
      "title": "Mitkä seuraavista ovat ohjelmiston elinkaaren vaiheita (lifecycle phases)?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "asiakkaan vaatimusten selvittäminen"
        },
        {
          "right": true,
          "text": "testaus"
        },
        {
          "right": true,
          "text": "ohjelmointi"
        },
        {
          "right": true,
          "text": "ohjelmiston rakenteen suunnittelu"
        },
        {
          "right": true,
          "text": "käytössä jo olevan ohjelmiston laajentaminen"
        },
        {
          "right": false,
          "text": "ohjelmiston dokumentointi"
        },
        {
          "right": false,
          "text": "suorituskyvyn parantaminen"
        },
        {
          "right": false,
          "text": "asiakastapaamiset"
        }
      ]
    },
    {
      "courseId": "7",
      "title": "Mitkä seuraavista vesiputousmallia koskevista väitteistä ovat  'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vesiputousmallia käytettäessä tulee määrittelyn ja suunnittelun tuotokset dokumentoida huolellisesti."
        },
        {
          "right": true,
          "text": "Jos käytetään vesiputousmallia ohjelmoijat eivät tyypillisesti osallistu vaatimusmäärittelyyn"
        },
        {
          "right": false,
          "text": "Yksi ensimmäisistä vesiputousmallin puolestapuhujista oli Winston Royce"
        },
        {
          "right": false,
          "text": "Yhdysvaltojen puolustusministeriö eli Department of Defence ei tänä päivänäkään salli muiden ohjelmistotuotantotapojen kuin vesiputousmallin käyttöä"
        },
        {
          "right": false,
          "text": "Avaruussukkuloiden käyttämä ohjelmisto rakennettiin vesiputousmallilla"
        },
        {
          "right": false,
          "text": "Vesiputousmalli sopii erityisen hyvin pitkäkestoisiin projekteihin sillä niissä on paremmin aikaa suorittaa aluksi perusteellinen vaatimusmäärittely"
        },
        {
          "right": false,
          "text": "Vesiputousmalli sopii erityisen hyvin pitkäkestoisiin projekteihin sillä niissä on paremmin aikaa suorittaa lopuksi kattava testaus"
        }
      ],
      "part": "1",
      "id": 602
    },
    {
      "courseId": "7",
      "title": "Seuraavassa luetellut ovat vesiputousmallin heikkouksia:",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Asiakkaan ei ole helppoa ilmaista sitä miten tilattavan ohjelmiston tulisi toimia"
        },
        {
          "right": true,
          "text": "Jos sovelluksen toteutuksen yksityiskohtia ei ollenkaan huomioida määrittelyn yhteydessä, saatetaan vaatimusmäärittelyyn kirjata asioita joita on aivan liian kallista toteuttaa."
        },
        {
          "right": true,
          "text": "Myöhäisessä vaiheessa havaitut ongelmat saattavat johtaa suuria kustannuksia aiheuttaviin muutoksiin."
        },
        {
          "right": true,
          "text": "Vesiputousmalli ei ota huomioon sovelluksen kehityksen aikana tapahtuvia mahdollisia bisnesympäristön muutoksia"
        },
        {
          "right": false,
          "text": "Vesiputousmalli asettaa liikaa testaamiseen liittyvää vastuuta ohjelmoijille"
        },
        {
          "right": false,
          "text": "Vesiputousmalli ei ota tarpeeksi huomioon kehitystiimin johtajien mielipiteitä"
        }
      ],
      "part": "1",
      "id": 603
    },
    {
      "courseId": "7",
      "title": "Ketterän manifestin ja sen periaatteiden mukaan",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Projektin edistymistä mitataan ensisijaisesti toimivan ohjelmiston valmistumisen etenemisellä"
        },
        {
          "right": true,
          "text": "Muutokseen reagoiminen on tärkeämpää kuin etukäteen laadittujen suunnitelmien noudattaminen"
        },
        {
          "right": true,
          "text": "Asiakkaalle kannattaa toimittaa käyttökelpoisia ohjelmiston versioita niin usein kuin mahdollista"
        },
        {
          "right": false,
          "text": "Dokumentointi ei ole tärkeää"
        },
        {
          "right": false,
          "text": "Yksilön vaikutus ohjelmistoprojektissa kannattaa minimoida"
        },
        {
          "right": false,
          "text": "Kommunikointi kannattaa ensisijaisesti hoitaa pikaviestimien avulla"
        },
        {
          "right": false,
          "text": "Tärkeiden deadlinejen koittaessa kehitystiimin tulee työskennellä normaalia suuremmalla intensiteetillä jotta ketteryys säilytetään"
        }
      ],
      "part": "1",
      "id": 604
    },
    {
      "courseId": "7",
      "title": "Ketterän manifestin periaatteiden mukaan",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sen lisäksi, että ketterässä kehityksessä vaatimukset voivat vaihtua, voi myös tiimi tarpeen mukaan muokata toimintatapojaan"
        },
        {
          "right": true,
          "text": "Ohjelmistokehittäjille kannattaa antaa vapaus ja vastuu päättää omista työtavoista"
        },
        {
          "right": true,
          "text": "On oleellista että ohjelmistokehittäjät käyvät tiivistä interaktiota loppukäyttäjien kanssa"
        },
        {
          "right": true,
          "text": "Kannattaa suosia mahdollisimman yksinkertaisia ratkaisuja"
        },
        {
          "right": false,
          "text": "Ohjelmistoarkkitehdin rooli on keskeinen projektien onnistumisen kannalta"
        },
        {
          "right": false,
          "text": "Ketterässä kehittämisessä ohjelmiston laadulla ei ole kovin suurta merkitystä, pääasia on toteuttaa asiakkaalle mahdollisimman nopeasti uutta toiminnallisuutta"
        },
        {
          "right": false,
          "text": "Ohjelmistosta ei kannata tuottaa uusia versiota liian usein"
        }
      ],
      "part": "1",
      "id": 605
    },
    {
      "courseId": "7",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Product ownerin kannattaa olla hyvin selvillä ohjelmiston käyttäjien tarpeista"
        },
        {
          "right": true,
          "text": "Scrum ei suosittele yli kymmenen hengen tiimejä"
        },
        {
          "right": true,
          "text": "Scrumissa on mahdollista ja jopa suositeltavaa tarpeen mukaan muokata kehitystiimin toimintatapoja"
        },
        {
          "right": false,
          "text": "Sprintin pituuden saa valita täysin vapaasti"
        },
        {
          "right": false,
          "text": "Scrumin tehokas soveltaminen on suoraviivaista sillä sen 'pelisäännöt' määrittelevä Scrum guide on vaan noin 15 sivua pitkä."
        },
        {
          "right": false,
          "text": "Scrum antaa tarkan ohjeistuksen sille miten sovelluskehittäjän tulee toimia"
        }
      ],
      "part": "1",
      "id": 606
    },
    {
      "courseId": "7",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Product owner määrää sen missä järjestyksessä toiminnallisuutta toteutetaan sovellukseen"
        },
        {
          "right": true,
          "text": "Jos joku tiimin ulkopuolinen pyytää sprintin aikana kehitystiimiä toteuttamaan välittömästi jonkin uuden ja briljantin idean, tulee scrum masterin puuttua asiaan"
        },
        {
          "right": true,
          "text": "Scrum master auttaa byrokraattisten ongelmien (esim. kehitystiimillä ei ole käytössä sopivaa palvelinympäristöä) ratkaisemisessa"
        },
        {
          "right": false,
          "text": "Scrum master antaa työmääräarviot sovellukseen toteutettaville toiminnallisuuksille"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjät eivät saa lisätä uusia vaatimuksia product backlogille ilman product ownerin lupaa"
        },
        {
          "right": false,
          "text": "Scrum master päättää minkä asian parissa kukin kehitystiimin jäsen sprintin aikana työskentelee"
        },
        {
          "right": false,
          "text": "Product owner työskentelee scrum masterin alaisuudessa"
        }
      ],
      "part": "1",
      "id": 607
    },
    {
      "courseId": "7",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kehittäjätiimissä tulisi olla osaamista myös sovelluksen testaamiseen"
        },
        {
          "right": true,
          "text": "Scrum suosittelee että tiimi määrittelee yhteisen laatustandardin, joka määrittelee mitä kaikkea toiminnallisuuden toteuttaminen valmiiksi asti pitää sisällään"
        },
        {
          "right": false,
          "text": "Lähellä deadlineja myös puutteellisesti toteutetut käyttäjävaatimukset voidaan hyväksyä osaksi sprintissä julkaistavaa ohjelmistoversiota"
        },
        {
          "right": false,
          "text": "Scrum master määrittelee kehitystiimin työskentelytavat"
        },
        {
          "right": false,
          "text": "Kehitystiimi saa täysin itse päättää mitä käyttäjän vaatimuksia se kussakin sprintissä toteuttaa"
        },
        {
          "right": false,
          "text": "Yhden sprintin aikana toteutetut vaatimukset testataan yleensä vasta seuraavassa sprintissä"
        },
        {
          "right": false,
          "text": "Scrum suosittelee, että järjestelmäylläpitäjiä tai käyttöliittymäsuunnittelijoita ei työskentele osana Scrum-tiimejä"
        }
      ],
      "part": "1",
      "id": 608
    },
    {
      "courseId": "7",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sprintin suunnittelussa päätetään mitä seuraavan sprintin aikana on tarkoitus toteuttaa"
        },
        {
          "right": true,
          "text": "Daily scrum -palavereissa on tarkoitus tuoda esiin seikkoja, jotka mahdollisesti hidastavat kehitystyötä"
        },
        {
          "right": true,
          "text": "Sprintin katselmointien (sprint review) yhteydessä saatetaan product backlogille lisätä uusia vaatimuksia"
        },
        {
          "right": false,
          "text": "Product owner ei osallistu sprintin suunnitteluun. Sille ei ole tarvetta, sillä kehittäjätiimi työskentelee itseorganisoituvasti"
        },
        {
          "right": false,
          "text": "Termit sprint backlog ja product backlog tarkottavat käytännössä samaa"
        },
        {
          "right": false,
          "text": "Asiakkaat voivat antaa palautetta sovelluksesta Daily scrum -palaverissa"
        },
        {
          "right": false,
          "text": "Sprintin katselmoinnissa (sprint review) jokainen sovelluskehittäjä raportoi omista sprintin aikaisista tekemisistään scrum masterille"
        }
      ],
      "part": "1",
      "id": 609
    },
    {
      "courseId": "7",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Retrospektiivin tarkoituksena on optimoida sovelluskehittäjien työskentelytapaa"
        },
        {
          "right": true,
          "text": "Scrum ei ota kantaa siihen miten sovellus testataan"
        },
        {
          "right": true,
          "text": "Inspect-and-adapt -periaatteen takia product backlog saatetaan joutua priorisoimaan uudelleen"
        },
    
        {
          "right": false,
          "text": "Retrospektiivissä priorisoidaan product backlog tarpeen vaatiessa uudelleen"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjien ei kannata paljastaa sprintin alussa esiin tulevia vaikeuksia. Koska tiimit ovat itseorganisoituja, ei ole mitään tarvetta kertoa ongelmista ulkopuolisille liian aikaisin, sillä ongelmat ratkeavat yleensä ajan kanssa"
        },
        {
          "right": false,
          "text": "ScrumBut sopii erityisesti suurien ohjelmistoprojektien hallitsemiseen"
        }
    
      ],
      "part": "1",
      "id": 610
    },
    {
      "courseId": "7",
      "part": "2",
      "id": 611,
      "title": "Mitkä seuraavista vaatimusmäärittelyä koskevista väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vaatimusmäärittelyn aikana selvitetään mitä toiminnallisuutta kehitteillä olevaan ohjelmistoon halutaan"
        },
        {
          "right": true,
          "text": "Vaatimusmäärittelyn aikana selvitetään minkälaisessa toimintaympäristössä kehitettävän sovelluksen on tarkoitus toimia"
        },
        {
          "right": true,
          "text": "Lainsäädännölliset rajoitukset, kuten GDPR tulee huomioida sovelluksen vaatimusmäärittelyn aikana"
        },
        {
          "right": false,
          "text": "Eräs verkkokaupan laatuvaatimus (quality attribute) voisi olla 'Asiakas voi lisätä tuotteen ostoskoriin'"
        },
        {
          "right": false,
          "text": "Eräs verkkokaupan toiminnallinen (functional requirement) vaatimus voisi olla 'Verkkokauppan on toimittava kaikilla moderneilla web-selaimella'"
        },
        {
          "right": false,
          "text": "Vaatimusten validoinnilla tarkoitetaan niiden dokumentoimista kirjallisessa muodossa, esim. ohjelmistotiimin Wikisivulla"
        }
      ]
    }, 
    {
      "courseId": "7",
      "part": "2",
      "id": 612,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "MVP:n (minimal viable product) avulla voidaan tutkia ideoiden, esim. ohjelmiston potentiaalisten uusien ominaisuuksien, käyttökelpoisuutta"
        },
        {
          "right": true,
          "text": "Lean-startup-menetelmän tarkoituksena on oppia käyttäjien mieltymyksiä seuraamalla miten he sovellusta käyttävät"
        },
        {
          "right": false,
          "text": "A/B-testauksen avulla voidaan varmistua että järjestelmä toimii oikein poikkeuksellisissakin tilanteissa"
        },
        {
          "right": false,
          "text": "Vesiputousmallin hyvä puoli on se, että vaatimusmäärittelyä voidaan tarkentaa koko ohjelmistokehityksen ajan"
        },
        {
          "right": false,
          "text": "Eräs ketterien menetelmien ongelmista on se, että asiakas ei osaa ilmaista vaatimuksia riittävän hyvin ohjelmistokehitysprojektien alussa"
        },
        {
          "right": false,
          "text": "Lean startup -menetelmä sopii epämääräisyytensä takia oikeastaan vaan startup-yrityksille"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "2",
      "id": 613,
      "title": "Mitkä seuraavista user storyja koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "User storylle kannattaa kirjata hyväksymäkriteerit, eli esim. joukko testejä joiden avulla voidaan todeta storyn olevan toteutettu halutulla tavalla"
        },
        {
          "right": true,
          "text": "Ennen user storyn kuvaaman toiminnallisuuden toteuttamista on oleellista kommunikoida riittävästi product ownerin tai asiakkaan edustajan kanssa"
        },
        {
          "right": true,
          "text": "'Opiskelijan tulee pystyä tarkastelemaan seuraavan periodin opetustarjontaa' on kohtuullisen hyvä muotoilu user storylle"
        },
        {
          "right": false,
          "text": "User storyyn kirjataan tarkasti kaikki loppukäyttäjän sille asettamat vaatimukset"
        },
        {
          "right": false,
          "text": "'Opiskelijoiden tiedot talletetaan tietokantaan' on hyvä muotoilu user storylle"
        },
        {
          "right": false,
          "text": "Mike Cohn ja Ron Jeffries ovat erimielisiä siitä, mitä user storyn määritelmä pitää sisällään"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "2",
      "id": 614,
      "title": "Mitkä seuraavista user storyja koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": false,
          "text": "User storyn tekstuaalinen kuvaus on aina kirjattava muodossa 'As a _user_, I want _functionality_ so that _business value_'"
        },
        {
          "right": false,
          "text": "Kaikki product backlogille asti päätyvät user storyt ovat projektin kannalta suunilleen yhtä tärkeitä saada toteutettua"
        },
        {
          "right": false,
          "text": "User storyjen on aina noudatettava INVEST-kriteerejä"
        },
        {
          "right": false,
          "text": "Jos user story lisätään product backlogille, sen sisältöä ei saa enää muuttaa"
        },
        {
          "right": false,
          "text": "Suuren teknisen riskin sisältävän toiminnallisuuden kuvaamat user storyt kannattaa toteuttaa vasta ihan projektin lopussa, näin niissä epäonnistuminen ei laske liian aikaisessa vaiheessa sovelluskehittäjien mielialaa"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "2",
      "id": 615,
      "title": "Mitkä seuraavista user storyjen estimointia koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Suhteellisessa estimoinnissa verrataan user storyjen työmäärää muiden user storyjen vaatimaan työmäärään"
        },
        {
          "right": true,
          "text": "Työmääräarvioissa tulee huomioida definition of done eli projektissa sovittu yleinen laatutaso"
        },
        {
          "right": true,
          "text": "Työmääräarviot auttavat asiakasta user storyjen priorisoinnissa"
        },
        {
          "right": false,
          "text": "On kehitetty menetelmiä (esim. planning poker), joiden avulla ohjelmiston tekemiseen vaadittava työmäärä voidaan arvioida kohtuullisen tarkasti jo ennen projektin käynnistymistä"
        },
        {
          "right": false,
          "text": "Ketterien menetelmien parhaiden käytänteiden mukaista on antaa product ownerin ja scrum masterin hoitaa työmääräarviointi"
        },
        {
          "right": false,
          "text": "Työmääräarvioita ei tule muuttaa kesken projektin, sillä ne ovat lupaus asiakkaalle siitä milloin sovellus tulee valmistumaan"
        },
        {
          "right": false,
          "text": "Cone of uncertainity kuvaa sitä, että mitä kokeneempi sovelluskehittäjä on, sitä parempia työmääräarvioita hän pystyy tekemään"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "2",
      "id": 616,
      "title": "Mitkä seuraavista hyvää product backlogia koskevista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "User storyjen prioriteetti voi muuttua ajan kuluessa"
        },
        {
          "right": true,
          "text": "Sprinttiin toteutettavaksi valittavien user storyjen tulee olla riittävän pieniä"
        },
        {
          "right": true,
          "text": "Backlogille lisätään tarpeen mukaan uusia user storyja"
        },
        {
          "right": false,
          "text": "Backlogin sisältöä saa muuttaa ainoastaan sprintin suunnittelukokouksissa"
        },
        {
          "right": false,
          "text": "Jokaisen backlogille lisätyn user storyn täytyy aina sisältää tarkat hyväksymäkriteerit"
        },
        {
          "right": false,
          "text": "Jokainen backlogilla oleva user story täytyy toteuttaa, muuten projekti tuomitaan epäonnistuneeksi"
        },
        {
          "right": false,
          "text": "Kun user story on toteutettu valmiiksi, sanotaan että story on ready"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "2",
      "id": 617,
      "title": "Mitkä seuraavista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Tuotteen tai julkaisun burndown-kaavion avulla pystytään visualisoimaan jäljellä olevaa tekemättömän työn määrää"
        },
        {
          "right": true,
          "text": "User story mapping -tekniikka ryhmittelee user storyt toiminnallisiin loogisiin kokonaisuuksiin"
        },
        {
          "right": false,
          "text": "Tiimin velositeetilla tarkoitetaan sitä kuinka monta riviä koodia tiimi pystyy keskimäärin tuottamaan yhden sprintin aikana"
        },
        {
          "right": false,
          "text": "Velositeetin perusteella voidaan helposti vertailla mikä firman ohjelmistokehitystiimeistä on suorituskyvyltään paras"
        },
        {
          "right": false,
          "text": "Tiimin velositeettiin lasketaan jokainen sprintin aikana tehty koodirivi"
        },
        {
          "right": false,
          "text": "NoEstimates-liike on sitä mieltä että user storyjen estimointia ei tarvita ja siitä ei ole mitään hyötyä"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "2",
      "id": 618,
      "title": "Mitkä seuraavista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ei ole hyvä ottaa sprinttiin toteutettavaksi sellaista user storya jonka vaatimasta työmäärästä ei ole kellään minkäänlaista käsitystä"
        },
        {
          "right": true,
          "text": "Product owner pystyy priorisoinnin avulla vaikuttamaan siihen, mitä user storyja sprinttiin valitaan"
        },
        {
          "right": true,
          "text": "Velositeetin avulla voidaan arvioida kuinka paljon työtä yhteen sprinttiin kannattaa ottaa"
        },
        {
          "right": false,
          "text": "Sprintin tavoitteella tarkoitetaan sprinttiin valittuja user storyja"
        },
        {
          "right": false,
          "text": "Product owner määrää kuinka monta user storya kehitystiimi ottaa tiettyyn sprinttiin toteutettavaksi"
        },
        {
          "right": false,
          "text": "Jos user story on liian suuri toteutettavaksi yhdessä sprintissä, se kannattaa jakaa kahtia siten, että toinen keskittyy pelkään käyttöliittymään ja toinen bisneslogiikkaan ja tietokantaan"
        },
        {
          "right": false,
          "text": "Spike-ratkaisuilla saadaan aina nopeutettua sovelluskehitystä"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "2",
      "id": 619,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sprintin suunnittelun yhteydessä joudutaan miettimään myös sovelluksen toteutustason asioita"
        },
        {
          "right": true,
          "text": "Taskboardiksi organisoitu sprint backlog visualisoi kunkin tehtävän eli taskin statuksen"
        },
        {
          "right": false,
          "text": "Sprint backlogille laitettavat taskit tulee aina kirjoittaa asiakkaan ymmärtämällä kielellä"
        },
        {
          "right": false,
          "text": "Product owner määrää mitä sarakkeita sprintin backlogina toimivalla taskboardilla on"
        },
        {
          "right": false,
          "text": "Sprintin burndown-käyrän avulla on mahdollista seurata kuinka paljon työtunteja kehittäjillä on vielä jäljellä kyseisessä sprintissä"
        },
        {
          "right": false,
          "text": "Jos taskien työmäärä on arvioitu tunteina, tulee taskiin käytetty työaika päivän päätteeksi aina vähentää työmääräarviosta"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "2",
      "id": 630,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "WIP-rajoitteiden avulla voidaan yrittää pienentää riskiä sille, että sprintin aikana ehditään toteuttamaan useita user storyja ainoastaan osittain"
        },
        {
          "right": true,
          "text": "Retrospektiivi on hyvä hetki tarkastella ja modifioida sprintin taskboardia, esim. lisätä siihen WIP-rajoitteita"
        },
        {
          "right": true,
          "text": "On itseasiassa hiukan kiistanalaista kannattaako sprint backlogilla oleville taskeille antaa työmääräarvioita"
        },
        {
          "right": false,
          "text": "ScrumBan-menetelmässä noudatetaan aina 2 viikon pituisia sprinttejä"
        },
        {
          "right": false,
          "text": "ScrumBan-menetelmässä on tyypillistä, että jokainen sovelluskehittäjä työskentelee yhtä aikaa usean eri user storyn parissa"
        },
        {
          "right": false,
          "text": "Backlog grooming tehdään aina kahden sprintin välissä"
        }
      ]
    },
    
    
    {
      "courseId": "7",
      "part": "3",
      "id": 631,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vesiputousmallissa asiakas validoi vaatimukset lukemalla vaatimusmäärittelyn tuloksena olevaa dokumentaatiota"
        },
        {
          "right": true,
          "text": "Staattisen analyysin avulla voidaan tarkastella automatisoidusti noudattaako koodi määriteltyjä tyyliseikkoja, esim. oikeaoppista sisennystä"
        },
        {
          "right": true,
          "text": "Pariohjelmoinnin on todettu vähentävän koodiin jäävien bugien määrää"
        },
        {
          "right": false,
          "text": "Koodin katselmoinnissa testataan kaatuuko sovellus sattumanvaraisilla syötteillä"
        },
        {
          "right": false,
          "text": "Ohjelmiston verifioinnilla tarkoitetaan sen varmistamista, että ollaan ylipäätään tekemässä ohjelmistoa, joka on käyttäjän tarpeisiin sopiva"
        },
        {
          "right": false,
          "text": "Ketterät menetelmät ja vesiputousmalli poikkeavat monin paikoin, mutta vaatimusten validointi tapahtuu molemmissa suunilleen samalla tavalla"
        },
        {
          "right": false,
          "text": "XP:n koodin yhteisomistajuuden periaate tarkoittaa sitä, että koodi julkaistaan Open source -lisenssillä kaikkien vapaaseen käyttöön"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "3",
      "id": 632,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston ulkoisella laadulla tarkoitetaan sitä, onko ohjelmisto sopiva käyttötarkoitukseensa, eli toimiiko se niin kuin käyttäjä haluaa ja olettaa"
        },
        {
          "right": true,
          "text": "Järjestelmätestauksessa sovelluksen toimintaa tutkitaan usein saman rajapinnan kautta, miten loppukäyttäjä sovellusta käyttää"
        },
        {
          "right": true,
          "text": "Testitapauksia mietittäessä kannattaa valita sellaisia testisyötteitä, jotka toimivat järjestelmän kannalta erilaisella tavalla, eli mitkä eivät kuulu samaan ekvivalenssiluokkaan"
        },
        {
          "right": false,
          "text": "Käyttäjän hyväksymistestauksessa verrataan sovellusta toimintaa vaatimusmäärittelyyn"
        },
        {
          "right": false,
          "text": "Black box -testauksen suorittavat aina sovelluskehittäjät"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "3",
      "id": 633,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Yksikkötestaus on useimmiten ns. developer-testausta, eli sovelluskehittäjien vastuulla"
        },
        {
          "right": true,
          "text": "Huono sisäinen laatu saattaa vaikeuttaa sovelluksen jatkokehittämistä"
        },
        {
          "right": true,
          "text": "Haarautumakattavuutta mittaamalla voidaan löytää ehtolauseita, joiden kaikkia haaroja ei ole testattu"
        },
        {
          "right": true,
          "text": "Mutaatiotestauksen ideana on varmistaa, että testit huomaavat sen jos koodiin tulee bugeja"
        },
        {
          "right": false,
          "text": "Lasilaatikkotestauksella testataan sovelluksen tarjoamaa käyttökokemusta, eli se kohdistuu lähinnä käyttöliittymän testaamiseen"
        },
        {
          "right": false,
          "text": "Jos koodin rivikattavuus on 100%, voidaan olla lähes varmoja, että koodi toimii oikein"
        },
        {
          "right": false,
          "text": "Yksikkötestaus suoritetaan useimmiten ohjelman tilaajaorganisaation toimesta"
        },
        {
          "right": false,
          "text": "Yksikkötestaamista kutsutaan usein End to End -testaamiseksi"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "3",
      "id": 634,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Integraatiotestauksessa pyritään varmistamaan sovelluksen suurempien, useimmista luokista tai moduuleista koostuvien kokonaisuuksien toiminta"
        },
        {
          "right": true,
          "text": "Regressiotestaus pyrkii varmistamaan, että ohjelmiston jo aiemmin toimineet osat eivät hajoa uusien muutosten yhteydessä"
        },
        {
          "right": true,
          "text": "Regressiotestejä on mahdollista tehdä Pythonin unittest-kirjastolla"
        },
        {
          "right": false,
          "text": "Eräs ketterän kehityksen hyvistä puolia on se, että regressiotestaukselle ei käytännössä ole mitään tarvetta"
        },
        {
          "right": false,
          "text": "Ketterässä kehityksessä koodin integraatiotestauksen suorittaa kehittäjäorganisaation QA-tiimi"
        },
        {
          "right": false,
          "text": "Ketterä kehitys ja vesiputousmalli ovat monin paikoin hyvin erilaisia menetelmiä. Koodin integrointi ja integraatiotestaus tapahtuu kuitenkin molemmissa samalla tavalla"
        },
        {
          "right": false,
          "text": "Regressiotestaus tapahtuu lähes aina manuaalisesti"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "3",
      "id": 635,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Oikeaoppista TDD:tä sovellettaessa kirjoitetaan käytännössä aina yksi testi joka ei mene läpi ja sen jälkeen mahdollisimman yksinkertainen koodi, joka läpäisee testin"
        },
        {
          "right": true,
          "text": "Oikeaoppista TDD:tä sovellettaessa koodin sisäistä rakennetta parannellaan jos huomataan sen rapistuneen, tällöin testien halutaan edelleen menevän läpi"
        },
        {
          "right": true,
          "text": "Mock-olioita käytetään testauksessa varmistamaan, että testattava olio tai metodi kommunikoi riippuvuuksiensa kanssa oikein"
        },
        {
          "right": false,
          "text": "TDD:n ikävä puoli on se, että koodista saattaa tulla sen soveltamisen seurauksena ylläpidettävyydeltään huonoa"
        },
        {
          "right": false,
          "text": "TDD soveltuu erityisen hyvin ns. legacy-järjestelmien, eli vanhojen ja ylläpidettävyyden kannalta hankalien ohjelmistojen laajentamisen välineeksi"
        },
        {
          "right": false,
          "text": "Oikeaoppista TDD:tä käytettäessä ohjelmoitavat luokat ja metodit tulee aina suunnitella erittäin tarkasti ennen ohjelmoinnin aloittamista"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "3",
      "id": 636,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Integraatiohelvetti viittaa siihen, että vasta ohjelmintivaiheen lopussa tapahtuva luokkien ja komponenttien integrointi aiheuttaa useimmiten suuria ongelmia, riippumatta siitä miten huolellisesti ohjelmisto on suunniteltu"
        },
        {
          "right": true,
          "text": "Jatkuva integraatio pyrkii tuomaan koodin komponenteissa olevat yhteensopivuusongelmat esille niin nopeasti kuin mahdollista"
        },
        {
          "right": true,
          "text": "On oleellista jatkuvan integraation suorittamisen kannalta, että Python-projektissa tiedosto pyproject.toml on lisätty versionhallintaan"
        },
        {
          "right": false,
          "text": "Smoke testiksi kutsutaan testiä, missä järjestelmä yritetään saada kaatumaan tai 'savuamaan' kuormittamalla sitä äärimmäisen suurella operaatiomäärällä"
        },
        {
          "right": false,
          "text": "Jatkuvan integraation noudattaminen on helppoa, riittää kun joku konfiguroi tiimille  esim GitHub Actionin"
        },
        {
          "right": false,
          "text": "Jos jatkuvan integraation palvelin huomaa koodissa jonkin ongelman, riittää että ongelma korjataan seuraavan sprintin alkuun mennessä"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "3",
      "id": 637,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Jatkuva toimittaminen (continuous deployment) vaatii erittäin suurta automaation astetta testauksen ja sovelluksen tuotantoon viemisen suhteen"
        },
        {
          "right": true,
          "text": "Jatkuvaa toimitusvalmius (continuous delivery) automatisoi ohjelmiston laadunhallinnan, mutta jättää ihmisen ratkaistavaksi missä vaiheessa uusia versiota julkaistaan loppukäyttäjille"
        },
        {
          "right": true,
          "text": "Staging-ympäristön on konfuguraatioiltaan syytä olla mahdollisimman lähellä sovelluksen tuotantoympäristöä"
        },
        {
          "right": false,
          "text": "Build pipelinen käyttö nopeuttaa ohjelmakoodin kääntämistä rinnakkaistamalla käännöksen vaiheet useille eri koneille"
        },
        {
          "right": false,
          "text": "Jatkuva toimittaminen (continuous deployment) sopii ainoastaan hyvin pienille yrityksille, esimerkiksi alkuvaiheessa oleville start upeille"
        },
        {
          "right": false,
          "text": "Staging-ympäristö ja CI-palvelin tarkoittavat samaa asiaa"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "3",
      "id": 638,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Tutkiva testaus kannattaa kohdistaa sprintin aikana toteutettuihin uusiin toimintoihin"
        },
        {
          "right": true,
          "text": "Kokenut testaaja voi löytää tutkivaa testaamista käyttäen virheitä, jotka jäävät helposti automatisoitujen testien ulottumattomiin"
        },
        {
          "right": false,
          "text": "Tutkiva testaaminen sopii erityisen hyvin regressiotestaukseen"
        },
        {
          "right": false,
          "text": "Jos ohjelmistoprojektissa tehdään paljon tutkivaa testaamista, ei yksikkö- ja integraatiotestausta tarvitse tehdä"
        },
        {
          "right": false,
          "text": "Tutkiva testaaminen perustuu testitapausten huolelliseen etukäteissuunnitteluun"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "4",
      "id": 641,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Canary releaseissa osa todellisista loppukäyttäjistä ohjataan käyttämään järjestelmän uutta versiota"
        },
        {
          "right": true,
          "text": "Feature toggle on eräs tekniikka canary releasejen toteuttamiseen"
        },
        {
          "right": true,
          "text": "Canary releaseja käytettäessä sovelluksen toimintaa on monitoroitava tarkasti"
        },
        {
          "right": true,
          "text": "Feature togglen avulla koodissa olevia keskeneräisiä toiminnallisuuksia voidaan piilottaa loppukäyttäjiltä"
        },
        {
          "right": false,
          "text": "Käytettäessä canary releaseja, sovelluskehittäjät testaavat sovelluksen toimivuutta ns. staging-palvelimella"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "4",
      "id": 642,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Käytettäessä feature brancheja uusi toiminnallisuus, esim. user story toteutetaan ensin omassa versionhallinnan haarassa, ja yhdistetään kehityksen päähaaraan vasta kun se on valmiina"
        },
        {
          "right": true,
          "text": "Trunk based development ei suosi feature branchien käyttöä, kaikki koodi pyritään integroimaan välittömästi pääkehityshaaraan"
        },
        {
          "right": true,
          "text": "DevOps-toimintamallia sovellettaessa kehittäjät ja järjestelmäylläpitäjät toimivat tiiviissä yhteistyössä"
        },
        {
          "right": true,
          "text": "Infrastructure as Code tarkottaa suurinpiirtein sitä, että sovelluksien käyttämiä palvelinympäristöjä hallinnoidaan koodin avulla käsiteltävillä konfiguraatiotiedostoilla, joita voidaan esim. tallettaa versionhallintaan normaalin ohjelmakoodin tapaan"
        },
        {
          "right": false,
          "text": "Trunk based development on kiinnostava idea, mutta se sopii lähinnä pienten startup-yritysten käyttöön"
        },
        {
          "right": false,
          "text": "Trunk based development -kehitysmallia on mahdotonta soveltaa, jos sovellukseen on toteutettava niin isoja toiminnallisuuksia, että niiden tekemiseen menee kauemmin kuin päivä"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "4",
      "id": 643,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston arkkitehtuuri määrittelee sen rakenteen suuret linjat, eli minkälaisista rakennekomponenteista ohjelmisto koostuu"
        },
        {
          "right": true,
          "text": "Arkkitehtuuri ohjaa sitä miten sovellusta tulee jatkokehittää"
        },
        {
          "right": false,
          "text": "Ohjelmiston toimintaympäristön ja toteutusteknologioiden ei tule koskaan antaa vaikuttaa ohjelmiston arkkitehtuuriin"
        },
        {
          "right": false,
          "text": "Arkkitehtuurityyli määrää sen, mitä luokkia ja metodeja ohjelmistossa on"
        },
        {
          "right": false,
          "text": "Ohjelmiston ei-toiminnallisilla vaatimuksilla ei ole vaikutusta sen arkkitehtuuriin"
        },
        {
          "right": false,
          "text": "Sovelluksen arkkitehtuuri on pysyvä, ts. alussa valittua arkkitehtuuria ei koskaan muuteta."
        }
      ]
    },
    {
      "courseId": "7",
      "part": "4",
      "id": 644,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kerrosarkkitehtuuri tähtää siihen, että tietyn kerroksen koodiin tehtävät muutokset aiheuttaisivat mahdollisimman vähän muutoksia sovelluksen muihin osiin"
        },
        {
          "right": true,
          "text": "Kerrosarkkitehtuuria sovellettaessa käyttöliittymästä huolehtiva koodi on eristetty esimerkiksi sovelluslogiikaasta huolehtivasta koodista"
        },
        {
          "right": true,
          "text": "Mikropalveluarkkitehtuuri mahdollistaa sovelluksen toteuttamisen useita eri ohjelmointikieliä käyttäen"
        },
        {
          "right": false,
          "text": "Mikropalveluarkkitehtuuria sovellettaessa jokainen user story toteutetaan omana mikropalveluna"
        },
        {
          "right": false,
          "text": "Kerrosarkkitehtuurissa eri kerroksilla oleva koodi keskustelee ainoastaan verkon välityksellä, eli esimerkiksi käyttöliittymästä ei koskaan kutsuta suoraan sovelluslogiikkakerroksen metodeja"
        },
        {
          "right": false,
          "text": "Mikropalveluarkkitehtuurin suurimpia etuja on niiden helppo testaaminen ja debuggaaminen"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "4",
      "id": 645,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Inkrementaalinen arkkitehtuuri tarkoittaa sitä, että ohjelman lopullinen arkkitehtuuri muodostuu projektin edetessä"
        },
        {
          "right": true,
          "text": "Inkrementaalista arkkitehtuuria sovellettaessa esimerkiksi sovelluksen kerrosrakenne toteutetaan ainakin jossain muodossa jo varhaisessa vaiheessa projektia, jopa ensimmäisessä sprintissä"
        },
        {
          "right": true,
          "text": "Ketteriä menetelmiä sovellettaessa tunnustetaan se tosiasia, että vaatimusten tapaan saattaa myös arkkitehtuuria joutua mukauttamaan projektin aikana"
        },
        {
          "right": false,
          "text": "Jos kehitystiimi rakentaa arkkitehtuurin inkrementaalisesti, ei arkkitehtuuria dokumentoida millään tavalla"
        },
        {
          "right": false,
          "text": "Walking skeleton tarkoittaa koodia, joka tullaan heittämään pois kun ohjelman ominaisuudet valmistuvat"
        },
        {
          "right": false,
          "text": "Inkrementaalinen suunnittelu ja arkkitehtuuri takaavat sen, että ohjelmistosta tulee rakenteeltaan laadukas"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "4",
      "id": 646,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kapseloinnilla tarkoitetaan toteutustason yksityiskohtien piilottamista"
        },
        {
          "right": true,
          "text": "Metoditason koheesio pyrkii siihen, että yksittäinen metodi keskittyy ainoastaan yhteen asiaan kerrallaan. Jos metodi tekee liian monia asioita, sen koheesio paranee jos metodi jaetaan useammaksi metodiksi"
        },
        {
          "right": true,
          "text": "Mikropalveluissa yksittäisen palvelun koheesion taso on korkea ja ne kapseloivat sisäiset toimintaperiaatteensa muilta palveluilta"
        },
        {
          "right": true,
          "text": "Luokkatason koheesio ja single responsibility -periaate tarkoittavat samaa asiaa"
        },
        {
          "right": false,
          "text": "Ohjelmiston sisäisellä laadulla tarkoitetaan sitä, että koodin käyttämät tietorakenteet ja algoritmit tarjoavat optimaalisen nopean toiminnallisuuden kuhunkin käyttötarkoitukseen"
        },
        {
          "right": false,
          "text": "Single responsibility -periaate ei ole relevantti käytettäessä muita ohjelmointiparadigmoja kuin olio-ohjelmointia"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "4",
      "id": 647,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Code smell eli koodihaju on merkki siitä, että koodin sisäisessä laadussa on todennäköisesti ongelmia"
        },
        {
          "right": true,
          "text": "Tekninen velka on metafora sille, että koodin sisäinen rakenne on heikkoa"
        },
        {
          "right": false,
          "text": "Nykyisten parhaiden käytänteiden mukaan koodi tulee kommentoida huolellisesti, esim. jokaisesta koodissa olevasta muuttujasta tulee selittää mikä tietoa muuttuja tallettaa"
        },
        {
          "right": false,
          "text": "Refaktoroinnilla muutetaan luokkien metodeja siten, että niiden toiminnallisuus vastaa paremmin asiakkaiden tarpeita"
        },
        {
          "right": false,
          "text": "Refaktorointia ei kannata suorittaa jokaisessa sprintissä, se laskisi liikaa kehitystiimin velositeettia"
        },
        {
          "right": false,
          "text": "Teknistä velkaa tulee välttää kaikissa olosuhteissa"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "5",
      "id": 651,
      "title": "Mitkä seuraavista ovat leanin mukaan hukkaa (muda)?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Välivarastointi"
        },
        {
          "right": true,
          "text": "Ylituotanto"
        },
        {
          "right": true,
          "text": "Odotus"
        },
        {
          "right": true,
          "text": "Tuotteessa olevat viat"
        },
        {
          "right": false,
          "text": "Taukojen pitäminen"
        },
        {
          "right": false,
          "text": "Koulutus"
        },
        {
          "right": false,
          "text": "Toimintojen ulkoistaminen"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "5",
      "id": 652,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kaizen tarkoittaa työskentelytapojen jatkuvaan parantamisen kannustavaa asennetta"
        },
        {
          "right": true,
          "text": "Jatkuva parantaminen pyrkii etsimään ongelmien perimmäisen syyn (root cause) ja eliminoimaan sen"
        },
        {
          "right": true,
          "text": "Pull- tai JIT-periaatteilla tarkoitetaan sitä, että tuotetta tai sen tarvitsemia komponentteja valmistetaan vasta tilauksesta, eli ei varalta etukäteen"
        },
        {
          "right": true,
          "text": "Kanban on eräs työkalu pull- tai JIT-periaatteen toteuttamiseen"
        },
        {
          "right": false,
          "text": "Lean pyrkii maksimoimaan tuotantolaitteiden käyttöasteen"
        },
        {
          "right": false,
          "text": "Kaizen ei kosketa yrityksen rivityöntekijöitä, keskitason johto hoitaa kaizeniin liittyvät asiat"
        },
        {
          "right": false,
          "text": "Läpimenoaika (leadtime) tarkoittaa sitä, miten nopeasti jatkuvassa parannuksessa saadaan eliminoitua hukkaa aiheuttavat tekijät"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "5",
      "id": 653,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean suosii periaatetta, jossa päätökset tehdään mahdollisimman myöhäisessä vaiheessa, mutta ei kuitenkaan liian myöhään"
        },
        {
          "right": true,
          "text": "Osassa 2 mainitun 'hyvän backlogin' kriteerejä noudattava backlog on leanin periaatteiden mukainen"
        },
        {
          "right": false,
          "text": "Build quality in -periaatteen mukaan kannattaa keskittyä kalliimpien tuotteiden valmistamiseen. Esim. Applella periaate näkyy siinä, että firmalla ei ole halpoja puhelinmalleja"
        },
        {
          "right": false,
          "text": "Lean pyrkii läpimenoajan (leadtime) optimointiin henkilökohtaisilla bonuksilla"
        },
        {
          "right": false,
          "text": "Vesiputousmallissa suositut, hyvin tarkkaan tehdyt vaatimusmäärittelydokumentit ovat leanin periaatteiden mukaisia"
        },
        {
          "right": false,
          "text": "Vesiputousmallin suosima periaate tehdä sovelluksen testaus erillisenä lopussa tapahtuvana vaiheena on leanin periaatteiden mukainen käytäntö"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "5",
      "id": 654,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean-ideaalin mukainen johtaja hallitsee myös käytännön hands on -työskentelyn"
        },
        {
          "right": true,
          "text": "Tuotekehitykseen sovellettaessa lean pyrkii kiihdyttämään oppimista"
        },
        {
          "right": true,
          "text": "Leanin tuotekehityksen periaatteiden mukaan epävarmat asiat kannattaa selvittää varhaisessa vaiheessa"
        },
        {
          "right": false,
          "text": "Leanin tuotekehityksen 'set based concurrent development'-menetelmän idea on sama kuin iteratiivisessa ohjelmistokehityksessä, tuotetta laajennetaan ja parannellaan vähitellen iteraatio iteraatiolta"
        },
        {
          "right": false,
          "text": "Go see (kenchi genbutsu) -periaateen mukaan työntekijöiden tulee raportoida tekemisistä tarkasti managerille"
        },
        {
          "right": false,
          "text": "Scrum ei ole leanin periaatteiden mukainen, koska se on push-systeemi"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "5",
      "id": 655,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Scrum of scrums on periaate, jonka avulla pyritään hallitsemaan useita kehitystiimejä, jotka työskentelevät saman tuotteen parissa"
        },
        {
          "right": true,
          "text": "SAFe on hyvin tarkkaan dokumentoitu ja runsaasti erilaisia periaatteita ja henkilörooleja sisältävä laajan mittakaavan ketterä menetelmäkehys"
        },
        {
          "right": true,
          "text": "LeSS:iä sovellettaessa oletuksena on, että kehitetään yhtä tuotetta, jolla on yksi product owner. LeSS ei ota kantaa siihen, miten eri tuotteita kehittävät tiimit suhtautuvat toisiinsa"
        },
        {
          "right": false,
          "text": "LeSS lisää Scrumiin joukon kokonaan uudentyyppisiä palavereja sekä henkilörooleja"
        },
        {
          "right": false,
          "text": "LeSS suosittelee jakamaan työtä siten, että esimerkiksi yksi tiimi huolehtii sovelluksen frontendistä, yksi sovelluksen backendista ja yksi sovelluksen tietokannasta"
        },
        {
          "right": false,
          "text": "9 tai enemmän tiimiä sisältävässä LeSS huge -versiossa jokaiselle tiimille on varattu oma product backlog"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "5",
      "id": 656,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ketteriä menetelmiä käytetään nykyään useimpien tutkimusten mukaan yli 50% kaikista ohjelmistoprojekteista"
        },
        {
          "right": true,
          "text": "Tutkimusten mukaan yllättävän monet ketteriä menetelmiä soveltavat eivät kuitenkaan noudata monia ketteryyden perusperiaatteita esimerkiksi lyhyitä iteraatiota"
        },
        {
          "right": true,
          "text": "Erään tutkimuksen mukaan Jatkuva toimittaminen (continuous deployment) on ollut käytössä jopa kolmasosalla vastaajista"
        },
        {
          "right": false,
          "text": "Ketterien menetelmien nousu näyttää olevan takana, esim. Yhdysvaltojen hallituksen alaisissa projekteissa ketteriä menetelmiä ei enää käytetä yhtä paljon kuin esimerkiksi 10 vuotta sitten, kun Scrum-hype oli suurimmillaan"
        },
        {
          "right": false,
          "text": "Tutkimusten mukaan suuret ohjelmistoprojektit onnistuvat suuremmalla todennäköisyydellä kuin pienet projektit"
        },
        {
          "right": false,
          "text": "Tutkimusten mukaan suurin ketteryyden tuoma hyöty on sen kustannustehokkuus"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "6",
      "id": 671,
      "title": "(1) Mitkä seuraavista Jami Kousan luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": false,
          "text": "Unity on maailman toiseksi eniten käytetty pelimoottori"
        },
        {
          "right": false,
          "text": "Unity hyödyntää ainoastaan Amazon AWS:n tarjoamia pilvipalveluita"
        },
        {
          "right": true,
          "text": "Service foundation -tiimi on jakautunut useisiin eri asiakokonaisuuksista vastuussa oleviin alitiimeihin"
        },
        {
          "right": false,
          "text": "Jamin näkökulmasta Unityn suurin haaste ovat monimutkaiset teknologiat"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "6",
      "id": 672,
      "title": "(2) Mitkä seuraavista Jami Kousan luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Unityllä vaatimusmäärittelydokumentit (Product requirement document) kirjoitetaan ilman teknistä jargonia"
        },
        {
          "right": false,
          "text": "Tekninen suunnitteludokumentti (Technical Design Document) tehdään aina kokonaisuudessaan valmiiksi ennen ohjelmoinnin aloittamista"
        },
        {
          "right": true,
          "text": "Tekninen suunnitteludokumentti (Technical Design Document) luetaan tyypillisesti useiden henkilöiden toimesta"
        },
        {
          "right": false,
          "text": "Arkkitehtuuripäätösdokumenttien (Architecture descision record) tarkoitus on perustella miksi jokin vaaimusmäärittelyn (Product requirement document) kuvaava ominaisuus on päätetty toteuttaa"
        },
        {
          "right": false,
          "text": "Arkkitehtuuripäätösdokumentit (Architecture descision record) on arkistoitu Unityn sisäiseen wikiin, teeman mukaiseen aakkosjärjestykseen"
        },
        {
          "right": false,
          "text": "Jos arkkitehtuuripäätösdokumentti (Architecture descision record) perustelee jonkin valitun teknisen ratkaisun, on päätös lopullinen, sitä ei enää muuteta missään vaiheessa"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "6",
      "id": 673,
      "title": "(3) Mitkä seuraavista Jami Kousan luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": false,
          "text": "Unityn koodikatselmoinnissa katselmoidaan aina kerrallaan yhden vaatimusmäärittelydokumentin (Product requirement document) kuvaaman toiminnallisuuden toteutus"
        },
        {
          "right": true,
          "text": "Hyvin tehty koodikatselmointi vähentää sovelluskehittäjän stressiä"
        },
        {
          "right": true,
          "text": "Koodikatselmoinnit toteutetaan Unityllä GitHubin pull requesteina"
        },
        {
          "right": false,
          "text": "Unityllä devaustiimit saavat tiedon bugeista yleensä käyttäjien tekemän ilmoitusten perusteella"
        },
        {
          "right": false,
          "text": "Hälyytys (alert) on aina merkki siitä että softassa on bugi"
        },
        {
          "right": true,
          "text": "Diagnosoiduille ongelmille nimitetään ns. 'commander', eli henkilö joka huolehtii siitä, että ongelma ratkaistaan"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "6",
      "id": 675,
      "title": "(1) Mitkä seuraavista Mikko Tiaisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Laajemmat harrasteprojektit ovat tärkeitä vakuuttamaan rekrytoijille että hallitset firmojen edellyttämät teknologiat"
        },
        {
          "right": false,
          "text": "Pelkkä pakollisten kurssien suorittaminen riittää siihen, että saat helposti ensimmäisen koodaustyöpaikan"
        },
        {
          "right": false,
          "text": "Kokeneemmat sovelluskehittäjät siirtyvät aina johtotehtäviin ja eivät lopulta osallistu enää käytännön ohjelmointiin"
        },
        {
          "right": false,
          "text": "Ns. juniorikehittäjän positiossa keskitytään yleensä pelkkään koodaamiseen, testaamisen hoitavat yleensä firman seniorikehittäjät"
        },
        {
          "right": true,
          "text": "Kyky kirjoittaa luettavaa ja ylläpidetävää koodia on tärkeää jo ensimmäisestä päivästä lähtien"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "6",
      "id": 676,
      "title": "(2) Mitkä seuraavista Mikko Tiaisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Tuotetaloissa on usein aika tarkat vaatimukset sille, mitä teknologioita uuden työntekijän tulee osata"
        },
        {
          "right": true,
          "text": "Tuotetalojen työpaikkailmoituksissa luetellaan usein sellaisiakin teknologioita, joita työntekijöiden ei välttämättä tarvitse hallita"
        },
        {
          "right": false,
          "text": "Konsulttifirmoissa ns. 'soft skills' ei korostu tuotetalojen tapaan. Konsulttifirmassa saakin keskittyä lähes pelkästään koodaamiseen"
        },
        {
          "right": false,
          "text": "Konsulttifirmat sitoutuvat yleensä tarkasti siihen, minkälaisen sovelluksen tilaaja saa palkatessaan tietyn määrän konsultteja"
        },
        {
          "right": false,
          "text": "Konsulttifirmoissa on yleensä erittäin tarkat vaatimukset sille, mitä teknologioita uuden työntekijän tulee osata"
        },
        {
          "right": false,
          "text": "Konsulttifirmaan on mahdotonta päästä töihin ilman aiempaa koodausalan työkokemusta"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "6",
      "id": 677,
      "title": "(3) Mitkä seuraavista Mikko Tiaisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Haastatteluissa kannattaa olla rehellinen omien heikkouksien suhteen"
        },
        {
          "right": false,
          "text": "Mikko suosittelee valmistautumaan teknisiin haastatteluihin katsomalla Youtubesta videoita, jotka preppaavat Googlen teknisiin haastatteluihin"
        },
        {
          "right": false,
          "text": "On kriittistä onnistua teknisessä haastattelussa lähes täydellisesti"
        },
        {
          "right": true,
          "text": "Teknisessä haastattelussa pääsee usein lukemaan koodia"
        },
        {
          "right": true,
          "text": "Mikko suosittelee harjoittelemaan koodissa olevien ratkaisujen ääneen selittämistä"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "7",
      "id": 681,
      "title": "(1) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Nykyään on tyypillistä, että sovelluskehittäjä joutuu käyttämään useita eri ohjelmointikieliä työuransa aikana"
        },
        {
          "right": true,
          "text": "Ei ole olemassa vain yhtä tapaa kouluttautua ohjelmistoalalle"
        },
        {
          "right": false,
          "text": "Ketterän manifestin mukaiset itseorganisoituvat tiimit ovat utopia, niillä ei ole sijaa nykyisessä bisneksessä, tiimien tulee työskennellä tiukan ulkoisen ohjauksen varassa"
        },
        {
          "right": false,
          "text": "Softa-alalla menestyksekkäästi toimimiseen tarvitaan nykyään täysin erilainen mindset, eli mielenlaatu/ajattelutapa kuin 80-luvulla"
        },
        {
          "right": false,
          "text": "Jos osaat hyvin yhden teknologian, pärjäät sen avulla ohjelmistoalalla jopa vuosikymmeniä"
        },
        {
          "right": false,
          "text": "On parasta koostaa ohjelmistotiimi mahdollisimman samankaltaisista ihmisistä, liika erilaisuus ihmisten taustoissa vaikeuttaa asiakkaiden tarpeiden ymmärtämistä"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "7",
      "id": 682,
      "title": "(2) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": false,
          "text": "Asiakkaan edustaja (ns. bisnesomistaja) on aina oikeassa"
        },
        {
          "right": true,
          "text": "Ohjelmiston uusia versiota kannattaa viedä (eli 'shipata') tuotantoon niin usein kuin mahdollista"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjien ei ole tarvetta ymmärtää bisneksen tarpeita tai sovelluksen arkkitehtuuriratkaisuja, riittää että sovelluskehittäjä maksimoi tuotantokäyttöön vietävän koodin määrään"
        },
        {
          "right": true,
          "text": "Ensimmäisenä mieleen tuleva ratkaisu kannattaa usein kyseenalaistaa"
        },
        {
          "right": false,
          "text": "Sovelluksen laadusta kannattaa pitää huolta koodin paranteluun keskittyvissä sprinteissä, joita pidetään noin 4-5 sprintin välein"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "7",
      "id": 683,
      "title": "(3) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Retrospektiiveja ei tulisi jättää pitämättä"
        },
        {
          "right": true,
          "text": "Sprintin aikaisesta työskentelystä noin 10% tulisi kohdistua seuraavien sprinttien aikana toteutettavien storyjen valmisteluun"
        },
        {
          "right": false,
          "text": "Paras sprintin pituus on 4 viikkoa"
        },
        {
          "right": false,
          "text": "Eräs Elisan parhaista käytänteistä ovat ns. tekniset storyt, eli storyt joiden toteuttaminen ei yleensä näy käyttäjälle mitenkään"
        },
        {
          "right": false,
          "text": "Teknistä velkaa ei tule ottaa missään olosuhteissa"
        },
        {
          "right": false,
          "text": "Niin sanotun Nokia-testin voi läpäistä ainoastaan, jos ennen toteutusvaihetta pidetään joukko spesifikaatiosprinttejä, joiden aikana ohjelmisto määritellään tarkasti"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "7",
      "id": 684,
      "title": "(4) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Pitkäikäisiä feature brancheja kannattaa välttää"
        },
        {
          "right": false,
          "text": "Jatkuva integraatio (CI) toimii ainoastaan sellaisissa ohjelmistoissa, joita kehittää yksi tai korkeintaan pari tiimiä. Isommassa skaalassa ohjelmistoja kehitettäessä CI:n käyttö olisi liian suuri hidaste"
        },
        {
          "right": false,
          "text": "Jatkuva integraation (CI) soveltaminen onnistuu ainoastaan pilvipalveluina toteutetuille web-sovelluksille"
        },
        {
          "right": false,
          "text": "CI-palvelimen muuttunut status kannattaa välittää koodareille huomaamattomasti, esim. chat-viesteinä jotta työnteko ei pääse häiriintymään"
        },
        {
          "right": true,
          "text": "Suurin hukka ohjelmistokehityksessä on se, että rakennetaan asiakkaan tarpeiden kannalta kokonaan vääränlainen järjestelmä"
        },
        {
          "right": true,
          "text": "Lean-startup-menetelmällä testataan idean tarpeellisuutta/hyödyllisyyttä oikeilla käyttäjillä"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä osan tiimeistä kannattaa erikoistua joihinkin osa-alueisiin, esimerkiksi testaamiseen"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "7",
      "id": 685,
      "title": "(1) Mitkä seuraavista Anniina Sallisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Data engineerin työnä on tuoda firman oleellinen data saataville esimerkiksi Data scientisteille ja analyytikoille"
        },
        {
          "right": false,
          "text": "Data engineerin työssä ohjelmointitaito ei ole välttämätön, erilaisten pilvipalveluiden käyttötaito riittää"
        },
        {
          "right": true,
          "text": "Data warehouse (suomeksi tietovarasto) kokoaa yleensä dataa useasta eri lähteestä"
        },
        {
          "right": false,
          "text": "Data lake tallettaa ainoastaan strukturoitua dataa, jolla on tarkasti määritelty skeema"
        },
        {
          "right": false,
          "text": "Data warehouse (tietovarasto) sisältää aina ajantasaista tietoa. Esim. elintarvikemyymälän tietovarasto kertoo aina tarkasti kuluvan päivän aikana myytyjen tuotteiden määrän."
        },
        {
          "right": false,
          "text": "Rinnakkaislaskenta ja hajautettu laskenta tarkoittavat käytännössä samaa asiaa"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "7",
      "id": 686,
      "title": "(2) Mitkä seuraavista Anniina Sallisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Relaatiotietokannat ovat rivipohjaisia (engl. row based), tämä mahdollistaa nopeat pienet muutokset"
        },
        {
          "right": false,
          "text": "Relaatiotietokannat, esim. PostgreSQL sopivat tiedon talletusperiaatteidensa takia hyvin tietovarastoksi (engl. data warehouse)"
        },
        {
          "right": true,
          "text": "ETL- ja ELT-prosessit huolehtivat eri lähteistä tulevan datan esikäsittelystä ja siirrosta tietovarastoon (engl. data warehouse)"
        },
        {
          "right": true,
          "text": "ELT-prosessi on ETL-prosessia parempi esim. tilanteissa, missä järjestelmään lisätään uusi datalähde"
        },
        {
          "right": true,
          "text": "Jos tieto on organisoitu data lakeen lähdejärjestelmän mukaisiin partitioihin, on data scientistien helppoa ja tehokasta tehdä dataan oikeastaan mitä tahansa kyselyitä"
        },
        {
          "right": false,
          "text": "Tiedon hakeminen data lakesta ja tiedon päivittäminen data lakeen ovat ovat molemmat aina erittäin nopeita operaatioita"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "7",
      "id": 687,
      "title": "(3) Mitkä seuraavista Anniina Sallisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ouran kontekstissa haasteita tuo välillä se, että älysormukselta tuleva data saattaa olla useita päiviä tai jopa viikkoja vanhaa"
        },
        {
          "right": false,
          "text": "Ouran data lake -ratkaisuna käyttämä Amazonin S3 on pilvessä sijaitseva relaatiotietokanta"
        },
        {
          "right": false,
          "text": "Ouran data lake -kehitettiin vesiputousmallia muistuttavalla prosessilla, se suunniteltiin ensin huolellisesti ja toteutettiin tämän jälkeen noudattaen tarkasti tehtyä suunnitelmaa"
        },
        {
          "right": true,
          "text": "Ouran data lakessa data on partitioitu mittauksen ajankohdan mukaisesti"
        },
        {
          "right": false,
          "text": "Amazonin Athena -palvelu mahdollistaa sen että data lakessa olevaa tietoa ei tarvitse hakea SQL:llä, vaan se saadaan ladattua suoraan Excel-taulukkoina"
        }
      ]
    },
    {
      "courseId": "7",
      "part": "7",
      "id": 688,
      "title": "(4) Mitkä seuraavista Anniina Sallisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Oura käyttää Amazon S3:n kanssa Apache Icebergia tehostaakseen datan käsittelyä"
        },
        {
          "right": false,
          "text": "Apache Icebergin käytön huono puoli on se, että kaikki data lakessa oleva data pitää olla monistettu useisiin erilaisiin partitioihin (esim. mittausajankohdan mukaan, käyttäjän asuinmaan mukaan, sormustyypin mukaan, jne...) jotta erilaisia kyselyjä datalle on mahdollista suorittaa nopeasti"
        },
        {
          "right": true,
          "text": "Apache Iceberg mahdollistaa ns. time travelin eli on mahdollista tarkastella miltä data lakessa oleva data näytti menneisyydessä, esimerkiksi viikko sitten"
        },
        {
          "right": true,
          "text": "Apache Icebergin käytön ansiosta jokaisen kyselyn ei tarvitse käydä läpi läheskään kaikkea data lakessa olevaa dataa"
        },
        {
          "right": false,
          "text": "Apache Icebergin hyvä puoli on se, että se on tarjolla Amazonin valmiina SaaS-palveluna jota ei tarvitse itse asentaa eikä ylläpitää"
        },
        {
          "right": true,
          "text": "Kustannusten optimointi on ollut eräs ratkaiseva tekijä sen taustalla, miksi Oura on päätynyt käytössä olevan kaltaiseen data lake -ratkaisuun"
        }
      ]
    },
    
    {
      "id": 1601,
      "part": "1",
      "courseId": "8",
      "title": "Mitkä seuraavista ovat ohjelmiston elinkaaren vaiheita (lifecycle phases)?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "asiakkaan vaatimusten selvittäminen"
        },
        {
          "right": true,
          "text": "testaus"
        },
        {
          "right": true,
          "text": "ohjelmointi"
        },
        {
          "right": true,
          "text": "ohjelmiston rakenteen suunnittelu"
        },
        {
          "right": true,
          "text": "käytössä jo olevan ohjelmiston laajentaminen"
        },
        {
          "right": false,
          "text": "ohjelmiston dokumentointi"
        },
        {
          "right": false,
          "text": "suorituskyvyn parantaminen"
        },
        {
          "right": false,
          "text": "asiakastapaamiset"
        }
      ]
    },
    {
      "courseId": "8",
      "title": "Mitkä seuraavista vesiputousmallia koskevista väitteistä ovat  'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vesiputousmallia käytettäessä tulee määrittelyn ja suunnittelun tuotokset dokumentoida huolellisesti."
        },
        {
          "right": true,
          "text": "Jos käytetään vesiputousmallia ohjelmoijat eivät tyypillisesti osallistu vaatimusmäärittelyyn"
        },
        {
          "right": false,
          "text": "Yksi ensimmäisistä vesiputousmallin puolestapuhujista oli Winston Royce"
        },
        {
          "right": false,
          "text": "Yhdysvaltojen puolustusministeriö eli Department of Defence ei tänä päivänäkään salli muiden ohjelmistotuotantotapojen kuin vesiputousmallin käyttöä"
        },
        {
          "right": false,
          "text": "Avaruussukkuloiden käyttämä ohjelmisto rakennettiin vesiputousmallilla"
        },
        {
          "right": false,
          "text": "Vesiputousmalli sopii erityisen hyvin pitkäkestoisiin projekteihin sillä niissä on paremmin aikaa suorittaa aluksi perusteellinen vaatimusmäärittely"
        },
        {
          "right": false,
          "text": "Vesiputousmalli sopii erityisen hyvin pitkäkestoisiin projekteihin sillä niissä on paremmin aikaa suorittaa lopuksi kattava testaus"
        }
      ],
      "part": "1",
      "id": 1602
    },
    {
      "courseId": "8",
      "title": "Seuraavassa luetellut ovat vesiputousmallin heikkouksia:",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Asiakkaan ei ole helppoa ilmaista sitä miten tilattavan ohjelmiston tulisi toimia"
        },
        {
          "right": true,
          "text": "Jos sovelluksen toteutuksen yksityiskohtia ei ollenkaan huomioida määrittelyn yhteydessä, saatetaan vaatimusmäärittelyyn kirjata asioita joita on aivan liian kallista toteuttaa."
        },
        {
          "right": true,
          "text": "Myöhäisessä vaiheessa havaitut ongelmat saattavat johtaa suuria kustannuksia aiheuttaviin muutoksiin."
        },
        {
          "right": true,
          "text": "Vesiputousmalli ei ota huomioon sovelluksen kehityksen aikana tapahtuvia mahdollisia bisnesympäristön muutoksia"
        },
        {
          "right": false,
          "text": "Vesiputousmalli asettaa liikaa testaamiseen liittyvää vastuuta ohjelmoijille"
        },
        {
          "right": false,
          "text": "Vesiputousmalli ei ota tarpeeksi huomioon kehitystiimin johtajien mielipiteitä"
        }
      ],
      "part": "1",
      "id": 1603
    },
    {
      "courseId": "8",
      "title": "Ketterän manifestin ja sen periaatteiden mukaan",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Projektin edistymistä mitataan ensisijaisesti toimivan ohjelmiston valmistumisen etenemisellä"
        },
        {
          "right": true,
          "text": "Muutokseen reagoiminen on tärkeämpää kuin etukäteen laadittujen suunnitelmien noudattaminen"
        },
        {
          "right": true,
          "text": "Asiakkaalle kannattaa toimittaa käyttökelpoisia ohjelmiston versioita niin usein kuin mahdollista"
        },
        {
          "right": false,
          "text": "Dokumentointi ei ole tärkeää"
        },
        {
          "right": false,
          "text": "Yksilön vaikutus ohjelmistoprojektissa kannattaa minimoida"
        },
        {
          "right": false,
          "text": "Kommunikointi kannattaa ensisijaisesti hoitaa pikaviestimien avulla"
        },
        {
          "right": false,
          "text": "Tärkeiden deadlinejen koittaessa kehitystiimin tulee työskennellä normaalia suuremmalla intensiteetillä jotta ketteryys säilytetään"
        }
      ],
      "part": "1",
      "id": 1604
    },
    {
      "courseId": "8",
      "title": "Ketterän manifestin periaatteiden mukaan",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sen lisäksi, että ketterässä kehityksessä vaatimukset voivat vaihtua, voi myös tiimi tarpeen mukaan muokata toimintatapojaan"
        },
        {
          "right": true,
          "text": "Ohjelmistokehittäjille kannattaa antaa vapaus ja vastuu päättää omista työtavoista"
        },
        {
          "right": true,
          "text": "On oleellista että ohjelmistokehittäjät käyvät tiivistä interaktiota loppukäyttäjien kanssa"
        },
        {
          "right": true,
          "text": "Kannattaa suosia mahdollisimman yksinkertaisia ratkaisuja"
        },
        {
          "right": false,
          "text": "Ohjelmistoarkkitehdin rooli on keskeinen projektien onnistumisen kannalta"
        },
        {
          "right": false,
          "text": "Ketterässä kehittämisessä ohjelmiston laadulla ei ole kovin suurta merkitystä, pääasia on toteuttaa asiakkaalle mahdollisimman nopeasti uutta toiminnallisuutta"
        },
        {
          "right": false,
          "text": "Ohjelmistosta ei kannata tuottaa uusia versiota liian usein"
        }
      ],
      "part": "1",
      "id": 1605
    },
    {
      "courseId": "8",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Product ownerin kannattaa olla hyvin selvillä ohjelmiston käyttäjien tarpeista"
        },
        {
          "right": true,
          "text": "Scrum ei suosittele yli kymmenen hengen tiimejä"
        },
        {
          "right": true,
          "text": "Scrumissa on mahdollista ja jopa suositeltavaa tarpeen mukaan muokata kehitystiimin toimintatapoja"
        },
        {
          "right": false,
          "text": "Sprintin pituuden saa valita täysin vapaasti"
        },
        {
          "right": false,
          "text": "Scrumin tehokas soveltaminen on suoraviivaista sillä sen 'pelisäännöt' määrittelevä Scrum guide on vaan noin 15 sivua pitkä."
        },
        {
          "right": false,
          "text": "Scrum antaa tarkan ohjeistuksen sille miten sovelluskehittäjän tulee toimia"
        }
      ],
      "part": "1",
      "id": 1606
    },
    {
      "courseId": "8",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Product owner määrää sen missä järjestyksessä toiminnallisuutta toteutetaan sovellukseen"
        },
        {
          "right": true,
          "text": "Jos joku tiimin ulkopuolinen pyytää sprintin aikana kehitystiimiä toteuttamaan välittömästi jonkin uuden ja briljantin idean, tulee scrum masterin puuttua asiaan"
        },
        {
          "right": true,
          "text": "Scrum master auttaa byrokraattisten ongelmien (esim. kehitystiimillä ei ole käytössä sopivaa palvelinympäristöä) ratkaisemisessa"
        },
        {
          "right": false,
          "text": "Scrum master antaa työmääräarviot sovellukseen toteutettaville toiminnallisuuksille"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjät eivät saa lisätä uusia vaatimuksia product backlogille ilman product ownerin lupaa"
        },
        {
          "right": false,
          "text": "Scrum master päättää minkä asian parissa kukin kehitystiimin jäsen sprintin aikana työskentelee"
        },
        {
          "right": false,
          "text": "Product owner työskentelee scrum masterin alaisuudessa"
        }
      ],
      "part": "1",
      "id": 1607
    },
    {
      "courseId": "8",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kehittäjätiimissä tulisi olla osaamista myös sovelluksen testaamiseen"
        },
        {
          "right": true,
          "text": "Scrum suosittelee että tiimi määrittelee yhteisen laatustandardin, joka määrittelee mitä kaikkea toiminnallisuuden toteuttaminen valmiiksi asti pitää sisällään"
        },
        {
          "right": false,
          "text": "Lähellä deadlineja myös puutteellisesti toteutetut käyttäjävaatimukset voidaan hyväksyä osaksi sprintissä julkaistavaa ohjelmistoversiota"
        },
        {
          "right": false,
          "text": "Scrum master määrittelee kehitystiimin työskentelytavat"
        },
        {
          "right": false,
          "text": "Kehitystiimi saa täysin itse päättää mitä käyttäjän vaatimuksia se kussakin sprintissä toteuttaa"
        },
        {
          "right": false,
          "text": "Yhden sprintin aikana toteutetut vaatimukset testataan yleensä vasta seuraavassa sprintissä"
        },
        {
          "right": false,
          "text": "Scrum suosittelee, että järjestelmäylläpitäjiä tai käyttöliittymäsuunnittelijoita ei työskentele osana Scrum-tiimejä"
        }
      ],
      "part": "1",
      "id": 1608
    },
    {
      "courseId": "8",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sprintin suunnittelussa päätetään mitä seuraavan sprintin aikana on tarkoitus toteuttaa"
        },
        {
          "right": true,
          "text": "Daily scrum -palavereissa on tarkoitus tuoda esiin seikkoja, jotka mahdollisesti hidastavat kehitystyötä"
        },
        {
          "right": true,
          "text": "Sprintin katselmointien (sprint review) yhteydessä saatetaan product backlogille lisätä uusia vaatimuksia"
        },
        {
          "right": false,
          "text": "Product owner ei osallistu sprintin suunnitteluun. Sille ei ole tarvetta, sillä kehittäjätiimi työskentelee itseorganisoituvasti"
        },
        {
          "right": false,
          "text": "Termit sprint backlog ja product backlog tarkottavat käytännössä samaa"
        },
        {
          "right": false,
          "text": "Asiakkaat voivat antaa palautetta sovelluksesta Daily scrum -palaverissa"
        },
        {
          "right": false,
          "text": "Sprintin katselmoinnissa (sprint review) jokainen sovelluskehittäjä raportoi omista sprintin aikaisista tekemisistään scrum masterille"
        }
      ],
      "part": "1",
      "id": 1609
    },
    {
      "courseId": "8",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Retrospektiivin tarkoituksena on optimoida sovelluskehittäjien työskentelytapaa"
        },
        {
          "right": true,
          "text": "Scrum ei ota kantaa siihen miten sovellus testataan"
        },
        {
          "right": true,
          "text": "Inspect-and-adapt -periaatteen takia product backlog saatetaan joutua priorisoimaan uudelleen"
        },
    
        {
          "right": false,
          "text": "Retrospektiivissä priorisoidaan product backlog tarpeen vaatiessa uudelleen"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjien ei kannata paljastaa sprintin alussa esiin tulevia vaikeuksia. Koska tiimit ovat itseorganisoituja, ei ole mitään tarvetta kertoa ongelmista ulkopuolisille liian aikaisin, sillä ongelmat ratkeavat yleensä ajan kanssa"
        },
        {
          "right": false,
          "text": "ScrumBut sopii erityisesti suurien ohjelmistoprojektien hallitsemiseen"
        }
    
      ],
      "part": "1",
      "id": 1610
    },
    {
      "courseId": "8",
      "part": "2",
      "id": 1611,
      "title": "Mitkä seuraavista vaatimusmäärittelyä koskevista väittämistä ovat 'oikein' ja mitkä 'väärin'?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vaatimusmäärittelyn aikana selvitetään mitä toiminnallisuutta kehitteillä olevaan ohjelmistoon halutaan"
        },
        {
          "right": true,
          "text": "Vaatimusmäärittelyn aikana selvitetään minkälaisessa toimintaympäristössä kehitettävän sovelluksen on tarkoitus toimia"
        },
        {
          "right": true,
          "text": "Lainsäädännölliset rajoitukset, kuten GDPR tulee huomioida sovelluksen vaatimusmäärittelyn aikana"
        },
        {
          "right": false,
          "text": "Eräs verkkokaupan laatuvaatimus (quality attribute) voisi olla 'Asiakas voi lisätä tuotteen ostoskoriin'"
        },
        {
          "right": false,
          "text": "Eräs verkkokaupan toiminnallinen (functional requirement) vaatimus voisi olla 'Verkkokauppan on toimittava kaikilla moderneilla web-selaimella'"
        },
        {
          "right": false,
          "text": "Vaatimusten validoinnilla tarkoitetaan niiden dokumentoimista kirjallisessa muodossa, esim. ohjelmistotiimin Wikisivulla"
        }
      ]
    }, 
    {
      "courseId": "8",
      "part": "2",
      "id": 1612,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "MVP:n (minimal viable product) avulla voidaan tutkia ideoiden, esim. ohjelmiston potentiaalisten uusien ominaisuuksien, käyttökelpoisuutta"
        },
        {
          "right": true,
          "text": "Lean-startup-menetelmän tarkoituksena on oppia käyttäjien mieltymyksiä seuraamalla miten he sovellusta käyttävät"
        },
        {
          "right": false,
          "text": "A/B-testauksen avulla voidaan varmistua että järjestelmä toimii oikein poikkeuksellisissakin tilanteissa"
        },
        {
          "right": false,
          "text": "Vesiputousmallin hyvä puoli on se, että vaatimusmäärittelyä voidaan tarkentaa koko ohjelmistokehityksen ajan"
        },
        {
          "right": false,
          "text": "Eräs ketterien menetelmien ongelmista on se, että asiakas ei osaa ilmaista vaatimuksia riittävän hyvin ohjelmistokehitysprojektien alussa"
        },
        {
          "right": false,
          "text": "Lean startup -menetelmä sopii epämääräisyytensä takia oikeastaan vaan startup-yrityksille"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "2",
      "id": 1613,
      "title": "Mitkä seuraavista user storyja koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "User storylle kannattaa kirjata hyväksymäkriteerit, eli esim. joukko testejä joiden avulla voidaan todeta storyn olevan toteutettu halutulla tavalla"
        },
        {
          "right": true,
          "text": "Ennen user storyn kuvaaman toiminnallisuuden toteuttamista on oleellista kommunikoida riittävästi product ownerin tai asiakkaan edustajan kanssa"
        },
        {
          "right": true,
          "text": "'Opiskelijan tulee pystyä tarkastelemaan seuraavan periodin opetustarjontaa' on kohtuullisen hyvä muotoilu user storylle"
        },
        {
          "right": false,
          "text": "User storyyn kirjataan tarkasti kaikki loppukäyttäjän sille asettamat vaatimukset"
        },
        {
          "right": false,
          "text": "'Opiskelijoiden tiedot talletetaan tietokantaan' on hyvä muotoilu user storylle"
        },
        {
          "right": false,
          "text": "Mike Cohn ja Ron Jeffries ovat erimielisiä siitä, mitä user storyn määritelmä pitää sisällään"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "2",
      "id": 1614,
      "title": "Mitkä seuraavista user storyja koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": false,
          "text": "User storyn tekstuaalinen kuvaus on aina kirjattava muodossa 'As a _user_, I want _functionality_ so that _business value_'"
        },
        {
          "right": false,
          "text": "Kaikki product backlogille asti päätyvät user storyt ovat projektin kannalta suunilleen yhtä tärkeitä saada toteutettua"
        },
        {
          "right": false,
          "text": "User storyjen on aina noudatettava INVEST-kriteerejä"
        },
        {
          "right": false,
          "text": "Jos user story lisätään product backlogille, sen sisältöä ei saa enää muuttaa"
        },
        {
          "right": false,
          "text": "Suuren teknisen riskin sisältävän toiminnallisuuden kuvaamat user storyt kannattaa toteuttaa vasta ihan projektin lopussa, näin niissä epäonnistuminen ei laske liian aikaisessa vaiheessa sovelluskehittäjien mielialaa"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "2",
      "id": 1615,
      "title": "Mitkä seuraavista user storyjen estimointia koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Suhteellisessa estimoinnissa verrataan user storyjen työmäärää muiden user storyjen vaatimaan työmäärään"
        },
        {
          "right": true,
          "text": "Työmääräarvioissa tulee huomioida definition of done eli projektissa sovittu yleinen laatutaso"
        },
        {
          "right": true,
          "text": "Työmääräarviot auttavat asiakasta user storyjen priorisoinnissa"
        },
        {
          "right": false,
          "text": "On kehitetty menetelmiä (esim. planning poker), joiden avulla ohjelmiston tekemiseen vaadittava työmäärä voidaan arvioida kohtuullisen tarkasti jo ennen projektin käynnistymistä"
        },
        {
          "right": false,
          "text": "Ketterien menetelmien parhaiden käytänteiden mukaista on antaa product ownerin ja scrum masterin hoitaa työmääräarviointi"
        },
        {
          "right": false,
          "text": "Työmääräarvioita ei tule muuttaa kesken projektin, sillä ne ovat lupaus asiakkaalle siitä milloin sovellus tulee valmistumaan"
        },
        {
          "right": false,
          "text": "Cone of uncertainity kuvaa sitä, että mitä kokeneempi sovelluskehittäjä on, sitä parempia työmääräarvioita hän pystyy tekemään"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "2",
      "id": 1616,
      "title": "Mitkä seuraavista hyvää product backlogia koskevista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "User storyjen prioriteetti voi muuttua ajan kuluessa"
        },
        {
          "right": true,
          "text": "Sprinttiin toteutettavaksi valittavien user storyjen tulee olla riittävän pieniä"
        },
        {
          "right": true,
          "text": "Backlogille lisätään tarpeen mukaan uusia user storyja"
        },
        {
          "right": false,
          "text": "Backlogin sisältöä saa muuttaa ainoastaan sprintin suunnittelukokouksissa"
        },
        {
          "right": false,
          "text": "Jokaisen backlogille lisätyn user storyn täytyy aina sisältää tarkat hyväksymäkriteerit"
        },
        {
          "right": false,
          "text": "Jokainen backlogilla oleva user story täytyy toteuttaa, muuten projekti tuomitaan epäonnistuneeksi"
        },
        {
          "right": false,
          "text": "Kun user story on toteutettu valmiiksi, sanotaan että story on ready"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "2",
      "id": 1617,
      "title": "Mitkä seuraavista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Tuotteen tai julkaisun burndown-kaavion avulla pystytään visualisoimaan jäljellä olevaa tekemättömän työn määrää"
        },
        {
          "right": true,
          "text": "User story mapping -tekniikka ryhmittelee user storyt toiminnallisiin loogisiin kokonaisuuksiin"
        },
        {
          "right": false,
          "text": "Tiimin velositeetilla tarkoitetaan sitä kuinka monta riviä koodia tiimi pystyy keskimäärin tuottamaan yhden sprintin aikana"
        },
        {
          "right": false,
          "text": "Velositeetin perusteella voidaan helposti vertailla mikä firman ohjelmistokehitystiimeistä on suorituskyvyltään paras"
        },
        {
          "right": false,
          "text": "Tiimin velositeettiin lasketaan jokainen sprintin aikana tehty koodirivi"
        },
        {
          "right": false,
          "text": "NoEstimates-liike on sitä mieltä että user storyjen estimointia ei tarvita ja siitä ei ole mitään hyötyä"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "2",
      "id": 1618,
      "title": "Mitkä seuraavista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ei ole hyvä ottaa sprinttiin toteutettavaksi sellaista user storya jonka vaatimasta työmäärästä ei ole kellään minkäänlaista käsitystä"
        },
        {
          "right": true,
          "text": "Product owner pystyy priorisoinnin avulla vaikuttamaan siihen, mitä user storyja sprinttiin valitaan"
        },
        {
          "right": true,
          "text": "Velositeetin avulla voidaan arvioida kuinka paljon työtä yhteen sprinttiin kannattaa ottaa"
        },
        {
          "right": false,
          "text": "Sprintin tavoitteella tarkoitetaan sprinttiin valittuja user storyja"
        },
        {
          "right": false,
          "text": "Product owner määrää kuinka monta user storya kehitystiimi ottaa tiettyyn sprinttiin toteutettavaksi"
        },
        {
          "right": false,
          "text": "Jos user story on liian suuri toteutettavaksi yhdessä sprintissä, se kannattaa jakaa kahtia siten, että toinen keskittyy pelkään käyttöliittymään ja toinen bisneslogiikkaan ja tietokantaan"
        },
        {
          "right": false,
          "text": "Spike-ratkaisuilla saadaan aina nopeutettua sovelluskehitystä"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "2",
      "id": 1619,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sprintin suunnittelun yhteydessä joudutaan miettimään myös sovelluksen toteutustason asioita"
        },
        {
          "right": true,
          "text": "Taskboardiksi organisoitu sprint backlog visualisoi kunkin tehtävän eli taskin statuksen"
        },
        {
          "right": false,
          "text": "Sprint backlogille laitettavat taskit tulee aina kirjoittaa asiakkaan ymmärtämällä kielellä"
        },
        {
          "right": false,
          "text": "Product owner määrää mitä sarakkeita sprintin backlogina toimivalla taskboardilla on"
        },
        {
          "right": false,
          "text": "Sprintin burndown-käyrän avulla on mahdollista seurata kuinka paljon työtunteja kehittäjillä on vielä jäljellä kyseisessä sprintissä"
        },
        {
          "right": false,
          "text": "Jos taskien työmäärä on arvioitu tunteina, tulee taskiin käytetty työaika päivän päätteeksi aina vähentää työmääräarviosta"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "2",
      "id": 1630,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "WIP-rajoitteiden avulla voidaan yrittää pienentää riskiä sille, että sprintin aikana ehditään toteuttamaan useita user storyja ainoastaan osittain"
        },
        {
          "right": true,
          "text": "Retrospektiivi on hyvä hetki tarkastella ja modifioida sprintin taskboardia, esim. lisätä siihen WIP-rajoitteita"
        },
        {
          "right": true,
          "text": "On itseasiassa hiukan kiistanalaista kannattaako sprint backlogilla oleville taskeille antaa työmääräarvioita"
        },
        {
          "right": false,
          "text": "ScrumBan-menetelmässä noudatetaan aina 2 viikon pituisia sprinttejä"
        },
        {
          "right": false,
          "text": "ScrumBan-menetelmässä on tyypillistä, että jokainen sovelluskehittäjä työskentelee yhtä aikaa usean eri user storyn parissa"
        },
        {
          "right": false,
          "text": "Backlog grooming tehdään aina kahden sprintin välissä"
        }
      ]
    },
    
    
    {
      "courseId": "8",
      "part": "3",
      "id": 1631,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vesiputousmallissa asiakas validoi vaatimukset lukemalla vaatimusmäärittelyn tuloksena olevaa dokumentaatiota"
        },
        {
          "right": true,
          "text": "Staattisen analyysin avulla voidaan tarkastella automatisoidusti noudattaako koodi määriteltyjä tyyliseikkoja, esim. oikeaoppista sisennystä"
        },
        {
          "right": true,
          "text": "Pariohjelmoinnin on todettu vähentävän koodiin jäävien bugien määrää"
        },
        {
          "right": false,
          "text": "Koodin katselmoinnissa testataan kaatuuko sovellus sattumanvaraisilla syötteillä"
        },
        {
          "right": false,
          "text": "Ohjelmiston verifioinnilla tarkoitetaan sen varmistamista, että ollaan ylipäätään tekemässä ohjelmistoa, joka on käyttäjän tarpeisiin sopiva"
        },
        {
          "right": false,
          "text": "Ketterät menetelmät ja vesiputousmalli poikkeavat monin paikoin, mutta vaatimusten validointi tapahtuu molemmissa suunilleen samalla tavalla"
        },
        {
          "right": false,
          "text": "XP:n koodin yhteisomistajuuden periaate tarkoittaa sitä, että koodi julkaistaan Open source -lisenssillä kaikkien vapaaseen käyttöön"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "3",
      "id": 1632,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston ulkoisella laadulla tarkoitetaan sitä, onko ohjelmisto sopiva käyttötarkoitukseensa, eli toimiiko se niin kuin käyttäjä haluaa ja olettaa"
        },
        {
          "right": true,
          "text": "Järjestelmätestauksessa sovelluksen toimintaa tutkitaan usein saman rajapinnan kautta, miten loppukäyttäjä sovellusta käyttää"
        },
        {
          "right": true,
          "text": "Testitapauksia mietittäessä kannattaa valita sellaisia testisyötteitä, jotka toimivat järjestelmän kannalta erilaisella tavalla, eli mitkä eivät kuulu samaan ekvivalenssiluokkaan"
        },
        {
          "right": false,
          "text": "Käyttäjän hyväksymistestauksessa verrataan sovellusta toimintaa vaatimusmäärittelyyn"
        },
        {
          "right": false,
          "text": "Black box -testauksen suorittavat aina sovelluskehittäjät"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "3",
      "id": 1633,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Yksikkötestaus on useimmiten ns. developer-testausta, eli sovelluskehittäjien vastuulla"
        },
        {
          "right": true,
          "text": "Huono sisäinen laatu saattaa vaikeuttaa sovelluksen jatkokehittämistä"
        },
        {
          "right": true,
          "text": "Haarautumakattavuutta mittaamalla voidaan löytää ehtolauseita, joiden kaikkia haaroja ei ole testattu"
        },
        {
          "right": true,
          "text": "Mutaatiotestauksen ideana on varmistaa, että testit huomaavat sen jos koodiin tulee bugeja"
        },
        {
          "right": false,
          "text": "Lasilaatikkotestauksella testataan sovelluksen tarjoamaa käyttökokemusta, eli se kohdistuu lähinnä käyttöliittymän testaamiseen"
        },
        {
          "right": false,
          "text": "Jos koodin rivikattavuus on 100%, voidaan olla lähes varmoja, että koodi toimii oikein"
        },
        {
          "right": false,
          "text": "Yksikkötestaus suoritetaan useimmiten ohjelman tilaajaorganisaation toimesta"
        },
        {
          "right": false,
          "text": "Yksikkötestaamista kutsutaan usein End to End -testaamiseksi"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "3",
      "id": 1634,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Integraatiotestauksessa pyritään varmistamaan sovelluksen suurempien, useimmista luokista tai moduuleista koostuvien kokonaisuuksien toiminta"
        },
        {
          "right": true,
          "text": "Regressiotestaus pyrkii varmistamaan, että ohjelmiston jo aiemmin toimineet osat eivät hajoa uusien muutosten yhteydessä"
        },
        {
          "right": true,
          "text": "Regressiotestejä on mahdollista tehdä Pythonin unittest-kirjastolla"
        },
        {
          "right": false,
          "text": "Eräs ketterän kehityksen hyvistä puolia on se, että regressiotestaukselle ei käytännössä ole mitään tarvetta"
        },
        {
          "right": false,
          "text": "Ketterässä kehityksessä koodin integraatiotestauksen suorittaa kehittäjäorganisaation QA-tiimi"
        },
        {
          "right": false,
          "text": "Ketterä kehitys ja vesiputousmalli ovat monin paikoin hyvin erilaisia menetelmiä. Koodin integrointi ja integraatiotestaus tapahtuu kuitenkin molemmissa samalla tavalla"
        },
        {
          "right": false,
          "text": "Regressiotestaus tapahtuu lähes aina manuaalisesti"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "3",
      "id": 1635,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Oikeaoppista TDD:tä sovellettaessa kirjoitetaan käytännössä aina yksi testi joka ei mene läpi ja sen jälkeen mahdollisimman yksinkertainen koodi, joka läpäisee testin"
        },
        {
          "right": true,
          "text": "Oikeaoppista TDD:tä sovellettaessa koodin sisäistä rakennetta parannellaan jos huomataan sen rapistuneen, tällöin testien halutaan edelleen menevän läpi"
        },
        {
          "right": true,
          "text": "Mock-olioita käytetään testauksessa varmistamaan, että testattava olio tai metodi kommunikoi riippuvuuksiensa kanssa oikein"
        },
        {
          "right": false,
          "text": "TDD:n ikävä puoli on se, että koodista saattaa tulla sen soveltamisen seurauksena ylläpidettävyydeltään huonoa"
        },
        {
          "right": false,
          "text": "TDD soveltuu erityisen hyvin ns. legacy-järjestelmien, eli vanhojen ja ylläpidettävyyden kannalta hankalien ohjelmistojen laajentamisen välineeksi"
        },
        {
          "right": false,
          "text": "Oikeaoppista TDD:tä käytettäessä ohjelmoitavat luokat ja metodit tulee aina suunnitella erittäin tarkasti ennen ohjelmoinnin aloittamista"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "3",
      "id": 1636,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Integraatiohelvetti viittaa siihen, että vasta ohjelmintivaiheen lopussa tapahtuva luokkien ja komponenttien integrointi aiheuttaa useimmiten suuria ongelmia, riippumatta siitä miten huolellisesti ohjelmisto on suunniteltu"
        },
        {
          "right": true,
          "text": "Jatkuva integraatio pyrkii tuomaan koodin komponenteissa olevat yhteensopivuusongelmat esille niin nopeasti kuin mahdollista"
        },
        {
          "right": true,
          "text": "On oleellista jatkuvan integraation suorittamisen kannalta, että Python-projektissa tiedosto pyproject.toml on lisätty versionhallintaan"
        },
        {
          "right": false,
          "text": "Smoke testiksi kutsutaan testiä, missä järjestelmä yritetään saada kaatumaan tai 'savuamaan' kuormittamalla sitä äärimmäisen suurella operaatiomäärällä"
        },
        {
          "right": false,
          "text": "Jatkuvan integraation noudattaminen on helppoa, riittää kun joku konfiguroi tiimille  esim GitHub Actionin"
        },
        {
          "right": false,
          "text": "Jos jatkuvan integraation palvelin huomaa koodissa jonkin ongelman, riittää että ongelma korjataan seuraavan sprintin alkuun mennessä"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "3",
      "id": 1637,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Jatkuva toimittaminen (continuous deployment) vaatii erittäin suurta automaation astetta testauksen ja sovelluksen tuotantoon viemisen suhteen"
        },
        {
          "right": true,
          "text": "Jatkuvaa toimitusvalmius (continuous delivery) automatisoi ohjelmiston laadunhallinnan, mutta jättää ihmisen ratkaistavaksi missä vaiheessa uusia versiota julkaistaan loppukäyttäjille"
        },
        {
          "right": true,
          "text": "Staging-ympäristön on konfuguraatioiltaan syytä olla mahdollisimman lähellä sovelluksen tuotantoympäristöä"
        },
        {
          "right": false,
          "text": "Build pipelinen käyttö nopeuttaa ohjelmakoodin kääntämistä rinnakkaistamalla käännöksen vaiheet useille eri koneille"
        },
        {
          "right": false,
          "text": "Jatkuva toimittaminen (continuous deployment) sopii ainoastaan hyvin pienille yrityksille, esimerkiksi alkuvaiheessa oleville start upeille"
        },
        {
          "right": false,
          "text": "Staging-ympäristö ja CI-palvelin tarkoittavat samaa asiaa"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "3",
      "id": 1638,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Tutkiva testaus kannattaa kohdistaa sprintin aikana toteutettuihin uusiin toimintoihin"
        },
        {
          "right": true,
          "text": "Kokenut testaaja voi löytää tutkivaa testaamista käyttäen virheitä, jotka jäävät helposti automatisoitujen testien ulottumattomiin"
        },
        {
          "right": false,
          "text": "Tutkiva testaaminen sopii erityisen hyvin regressiotestaukseen"
        },
        {
          "right": false,
          "text": "Jos ohjelmistoprojektissa tehdään paljon tutkivaa testaamista, ei yksikkö- ja integraatiotestausta tarvitse tehdä"
        },
        {
          "right": false,
          "text": "Tutkiva testaaminen perustuu testitapausten huolelliseen etukäteissuunnitteluun"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "4",
      "id": 1641,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Canary releaseissa osa todellisista loppukäyttäjistä ohjataan käyttämään järjestelmän uutta versiota"
        },
        {
          "right": true,
          "text": "Feature toggle on eräs tekniikka canary releasejen toteuttamiseen"
        },
        {
          "right": true,
          "text": "Canary releaseja käytettäessä sovelluksen toimintaa on monitoroitava tarkasti"
        },
        {
          "right": true,
          "text": "Feature togglen avulla koodissa olevia keskeneräisiä toiminnallisuuksia voidaan piilottaa loppukäyttäjiltä"
        },
        {
          "right": false,
          "text": "Käytettäessä canary releaseja, sovelluskehittäjät testaavat sovelluksen toimivuutta ns. staging-palvelimella"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "4",
      "id": 1642,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Käytettäessä feature brancheja uusi toiminnallisuus, esim. user story toteutetaan ensin omassa versionhallinnan haarassa, ja yhdistetään kehityksen päähaaraan vasta kun se on valmiina"
        },
        {
          "right": true,
          "text": "Trunk based development ei suosi feature branchien käyttöä, kaikki koodi pyritään integroimaan välittömästi pääkehityshaaraan"
        },
        {
          "right": true,
          "text": "DevOps-toimintamallia sovellettaessa kehittäjät ja järjestelmäylläpitäjät toimivat tiiviissä yhteistyössä"
        },
        {
          "right": true,
          "text": "Infrastructure as Code tarkottaa suurinpiirtein sitä, että sovelluksien käyttämiä palvelinympäristöjä hallinnoidaan koodin avulla käsiteltävillä konfiguraatiotiedostoilla, joita voidaan esim. tallettaa versionhallintaan normaalin ohjelmakoodin tapaan"
        },
        {
          "right": false,
          "text": "Trunk based development on kiinnostava idea, mutta se sopii lähinnä pienten startup-yritysten käyttöön"
        },
        {
          "right": false,
          "text": "Trunk based development -kehitysmallia on mahdotonta soveltaa, jos sovellukseen on toteutettava niin isoja toiminnallisuuksia, että niiden tekemiseen menee kauemmin kuin päivä"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "4",
      "id": 1643,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston arkkitehtuuri määrittelee sen rakenteen suuret linjat, eli minkälaisista rakennekomponenteista ohjelmisto koostuu"
        },
        {
          "right": true,
          "text": "Arkkitehtuuri ohjaa sitä miten sovellusta tulee jatkokehittää"
        },
        {
          "right": false,
          "text": "Ohjelmiston toimintaympäristön ja toteutusteknologioiden ei tule koskaan antaa vaikuttaa ohjelmiston arkkitehtuuriin"
        },
        {
          "right": false,
          "text": "Arkkitehtuurityyli määrää sen, mitä luokkia ja metodeja ohjelmistossa on"
        },
        {
          "right": false,
          "text": "Ohjelmiston ei-toiminnallisilla vaatimuksilla ei ole vaikutusta sen arkkitehtuuriin"
        },
        {
          "right": false,
          "text": "Sovelluksen arkkitehtuuri on pysyvä, ts. alussa valittua arkkitehtuuria ei koskaan muuteta."
        }
      ]
    },
    {
      "courseId": "8",
      "part": "4",
      "id": 1644,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kerrosarkkitehtuuri tähtää siihen, että tietyn kerroksen koodiin tehtävät muutokset aiheuttaisivat mahdollisimman vähän muutoksia sovelluksen muihin osiin"
        },
        {
          "right": true,
          "text": "Kerrosarkkitehtuuria sovellettaessa käyttöliittymästä huolehtiva koodi on eristetty esimerkiksi sovelluslogiikaasta huolehtivasta koodista"
        },
        {
          "right": true,
          "text": "Mikropalveluarkkitehtuuri mahdollistaa sovelluksen toteuttamisen useita eri ohjelmointikieliä käyttäen"
        },
        {
          "right": false,
          "text": "Mikropalveluarkkitehtuuria sovellettaessa jokainen user story toteutetaan omana mikropalveluna"
        },
        {
          "right": false,
          "text": "Kerrosarkkitehtuurissa eri kerroksilla oleva koodi keskustelee ainoastaan verkon välityksellä, eli esimerkiksi käyttöliittymästä ei koskaan kutsuta suoraan sovelluslogiikkakerroksen metodeja"
        },
        {
          "right": false,
          "text": "Mikropalveluarkkitehtuurin suurimpia etuja on niiden helppo testaaminen ja debuggaaminen"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "4",
      "id": 1645,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Inkrementaalinen arkkitehtuuri tarkoittaa sitä, että ohjelman lopullinen arkkitehtuuri muodostuu projektin edetessä"
        },
        {
          "right": true,
          "text": "Inkrementaalista arkkitehtuuria sovellettaessa esimerkiksi sovelluksen kerrosrakenne toteutetaan ainakin jossain muodossa jo varhaisessa vaiheessa projektia, jopa ensimmäisessä sprintissä"
        },
        {
          "right": true,
          "text": "Ketteriä menetelmiä sovellettaessa tunnustetaan se tosiasia, että vaatimusten tapaan saattaa myös arkkitehtuuria joutua mukauttamaan projektin aikana"
        },
        {
          "right": false,
          "text": "Jos kehitystiimi rakentaa arkkitehtuurin inkrementaalisesti, ei arkkitehtuuria dokumentoida millään tavalla"
        },
        {
          "right": false,
          "text": "Walking skeleton tarkoittaa koodia, joka tullaan heittämään pois kun ohjelman ominaisuudet valmistuvat"
        },
        {
          "right": false,
          "text": "Inkrementaalinen suunnittelu ja arkkitehtuuri takaavat sen, että ohjelmistosta tulee rakenteeltaan laadukas"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "4",
      "id": 1646,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kapseloinnilla tarkoitetaan toteutustason yksityiskohtien piilottamista"
        },
        {
          "right": true,
          "text": "Metoditason koheesio pyrkii siihen, että yksittäinen metodi keskittyy ainoastaan yhteen asiaan kerrallaan. Jos metodi tekee liian monia asioita, sen koheesio paranee jos metodi jaetaan useammaksi metodiksi"
        },
        {
          "right": true,
          "text": "Mikropalveluissa yksittäisen palvelun koheesion taso on korkea ja ne kapseloivat sisäiset toimintaperiaatteensa muilta palveluilta"
        },
        {
          "right": true,
          "text": "Luokkatason koheesio ja single responsibility -periaate tarkoittavat samaa asiaa"
        },
        {
          "right": false,
          "text": "Ohjelmiston sisäisellä laadulla tarkoitetaan sitä, että koodin käyttämät tietorakenteet ja algoritmit tarjoavat optimaalisen nopean toiminnallisuuden kuhunkin käyttötarkoitukseen"
        },
        {
          "right": false,
          "text": "Single responsibility -periaate ei ole relevantti käytettäessä muita ohjelmointiparadigmoja kuin olio-ohjelmointia"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "4",
      "id": 1647,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Code smell eli koodihaju on merkki siitä, että koodin sisäisessä laadussa on todennäköisesti ongelmia"
        },
        {
          "right": true,
          "text": "Tekninen velka on metafora sille, että koodin sisäinen rakenne on heikkoa"
        },
        {
          "right": false,
          "text": "Nykyisten parhaiden käytänteiden mukaan koodi tulee kommentoida huolellisesti, esim. jokaisesta koodissa olevasta muuttujasta tulee selittää mikä tietoa muuttuja tallettaa"
        },
        {
          "right": false,
          "text": "Refaktoroinnilla muutetaan luokkien metodeja siten, että niiden toiminnallisuus vastaa paremmin asiakkaiden tarpeita"
        },
        {
          "right": false,
          "text": "Refaktorointia ei kannata suorittaa jokaisessa sprintissä, se laskisi liikaa kehitystiimin velositeettia"
        },
        {
          "right": false,
          "text": "Teknistä velkaa tulee välttää kaikissa olosuhteissa"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "5",
      "id": 1651,
      "title": "Mitkä seuraavista ovat leanin mukaan hukkaa (muda)?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Välivarastointi"
        },
        {
          "right": true,
          "text": "Ylituotanto"
        },
        {
          "right": true,
          "text": "Odotus"
        },
        {
          "right": true,
          "text": "Tuotteessa olevat viat"
        },
        {
          "right": false,
          "text": "Taukojen pitäminen"
        },
        {
          "right": false,
          "text": "Koulutus"
        },
        {
          "right": false,
          "text": "Toimintojen ulkoistaminen"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "5",
      "id": 1652,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kaizen tarkoittaa työskentelytapojen jatkuvaan parantamisen kannustavaa asennetta"
        },
        {
          "right": true,
          "text": "Jatkuva parantaminen pyrkii etsimään ongelmien perimmäisen syyn (root cause) ja eliminoimaan sen"
        },
        {
          "right": true,
          "text": "Pull- tai JIT-periaatteilla tarkoitetaan sitä, että tuotetta tai sen tarvitsemia komponentteja valmistetaan vasta tilauksesta, eli ei varalta etukäteen"
        },
        {
          "right": true,
          "text": "Kanban on eräs työkalu pull- tai JIT-periaatteen toteuttamiseen"
        },
        {
          "right": false,
          "text": "Lean pyrkii maksimoimaan tuotantolaitteiden käyttöasteen"
        },
        {
          "right": false,
          "text": "Kaizen ei kosketa yrityksen rivityöntekijöitä, keskitason johto hoitaa kaizeniin liittyvät asiat"
        },
        {
          "right": false,
          "text": "Läpimenoaika (leadtime) tarkoittaa sitä, miten nopeasti jatkuvassa parannuksessa saadaan eliminoitua hukkaa aiheuttavat tekijät"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "5",
      "id": 1653,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean suosii periaatetta, jossa päätökset tehdään mahdollisimman myöhäisessä vaiheessa, mutta ei kuitenkaan liian myöhään"
        },
        {
          "right": true,
          "text": "Osassa 2 mainitun 'hyvän backlogin' kriteerejä noudattava backlog on leanin periaatteiden mukainen"
        },
        {
          "right": false,
          "text": "Build quality in -periaatteen mukaan kannattaa keskittyä kalliimpien tuotteiden valmistamiseen. Esim. Applella periaate näkyy siinä, että firmalla ei ole halpoja puhelinmalleja"
        },
        {
          "right": false,
          "text": "Lean pyrkii läpimenoajan (leadtime) optimointiin henkilökohtaisilla bonuksilla"
        },
        {
          "right": false,
          "text": "Vesiputousmallissa suositut, hyvin tarkkaan tehdyt vaatimusmäärittelydokumentit ovat leanin periaatteiden mukaisia"
        },
        {
          "right": false,
          "text": "Vesiputousmallin suosima periaate tehdä sovelluksen testaus erillisenä lopussa tapahtuvana vaiheena on leanin periaatteiden mukainen käytäntö"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "5",
      "id": 1654,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean-ideaalin mukainen johtaja hallitsee myös käytännön hands on -työskentelyn"
        },
        {
          "right": true,
          "text": "Tuotekehitykseen sovellettaessa lean pyrkii kiihdyttämään oppimista"
        },
        {
          "right": true,
          "text": "Leanin tuotekehityksen periaatteiden mukaan epävarmat asiat kannattaa selvittää varhaisessa vaiheessa"
        },
        {
          "right": false,
          "text": "Leanin tuotekehityksen 'set based concurrent development'-menetelmän idea on sama kuin iteratiivisessa ohjelmistokehityksessä, tuotetta laajennetaan ja parannellaan vähitellen iteraatio iteraatiolta"
        },
        {
          "right": false,
          "text": "Go see (kenchi genbutsu) -periaateen mukaan työntekijöiden tulee raportoida tekemisistä tarkasti managerille"
        },
        {
          "right": false,
          "text": "Scrum ei ole leanin periaatteiden mukainen, koska se on push-systeemi"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "5",
      "id": 1655,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Scrum of scrums on periaate, jonka avulla pyritään hallitsemaan useita kehitystiimejä, jotka työskentelevät saman tuotteen parissa"
        },
        {
          "right": true,
          "text": "SAFe on hyvin tarkkaan dokumentoitu ja runsaasti erilaisia periaatteita ja henkilörooleja sisältävä laajan mittakaavan ketterä menetelmäkehys"
        },
        {
          "right": true,
          "text": "LeSS:iä sovellettaessa oletuksena on, että kehitetään yhtä tuotetta, jolla on yksi product owner. LeSS ei ota kantaa siihen, miten eri tuotteita kehittävät tiimit suhtautuvat toisiinsa"
        },
        {
          "right": false,
          "text": "LeSS lisää Scrumiin joukon kokonaan uudentyyppisiä palavereja sekä henkilörooleja"
        },
        {
          "right": false,
          "text": "LeSS suosittelee jakamaan työtä siten, että esimerkiksi yksi tiimi huolehtii sovelluksen frontendistä, yksi sovelluksen backendista ja yksi sovelluksen tietokannasta"
        },
        {
          "right": false,
          "text": "9 tai enemmän tiimiä sisältävässä LeSS huge -versiossa jokaiselle tiimille on varattu oma product backlog"
        }
      ]
    },
    {
      "courseId": "8",
      "part": "5",
      "id": 1656,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ketteriä menetelmiä käytetään nykyään useimpien tutkimusten mukaan yli 50% kaikista ohjelmistoprojekteista"
        },
        {
          "right": true,
          "text": "Tutkimusten mukaan yllättävän monet ketteriä menetelmiä soveltavat eivät kuitenkaan noudata monia ketteryyden perusperiaatteita esimerkiksi lyhyitä iteraatiota"
        },
        {
          "right": true,
          "text": "Erään tutkimuksen mukaan Jatkuva toimittaminen (continuous deployment) on ollut käytössä jopa kolmasosalla vastaajista"
        },
        {
          "right": false,
          "text": "Ketterien menetelmien nousu näyttää olevan takana, esim. Yhdysvaltojen hallituksen alaisissa projekteissa ketteriä menetelmiä ei enää käytetä yhtä paljon kuin esimerkiksi 10 vuotta sitten, kun Scrum-hype oli suurimmillaan"
        },
        {
          "right": false,
          "text": "Tutkimusten mukaan suuret ohjelmistoprojektit onnistuvat suuremmalla todennäköisyydellä kuin pienet projektit"
        },
        {
          "right": false,
          "text": "Tutkimusten mukaan suurin ketteryyden tuoma hyöty on sen kustannustehokkuus"
        }
      ]
    }
  ]
}